#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОтработаныВсеДанные = Ложь;
	Ссылка = Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = Ссылка.Метаданные().ПолноеИмя();
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос = Новый Запрос;

		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.Ссылка = КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	НЕ ЭлектронныйДокументВходящийЭДО.УдалитьСостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно))
		|	И НЕ ЭлектронныйДокументВходящийЭДО.УдалитьВидДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.УдалитьПроизвольный)
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Документ.ЭлектронныйДокументВходящийЭДО.УдалитьДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|				ГДЕ
		|					ЭлектронныйДокументВходящийЭДО.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка)
		|	И КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
		
		КоличествоСсылок = МассивСсылок.Количество();
		Если КоличествоСсылок < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСсылок > 0 Тогда
			Ссылка = МассивСсылок[КоличествоСсылок - 1];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ЭлектронныйДокументВходящийЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(СсылкаНаОбъект,,
				"Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию",
				"РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ОбработатьДанные_НачальноеЗаполнение");		
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Если Не ЭлектронныйДокументОтраженВУчете(СсылкаНаОбъект) Тогда
				ИнтеграцияЭДО.Обновление_ВыполнитьКонтрольОтраженияВУчете(СсылкаНаОбъект);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
		
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать входящий электронный документ: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые входящие электронные документы (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция входящих электронных документов: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Функция ЭлектронныйДокументОтраженВУчете(Знач ЭлектронныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьУчетныйДокумент
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО.УдалитьДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
