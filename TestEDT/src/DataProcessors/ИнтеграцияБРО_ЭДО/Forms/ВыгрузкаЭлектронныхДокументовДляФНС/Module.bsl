#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если НЕ ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	// Параметр ВерсияВызова может содержать значения:
	//  1 - выгрузка в файл;
	//  2 - возврат массива ссылок;
	//  3 - возврат массива структур (в данном случае форма открывается НЕ модально
	//      и при закрытии выполняется оповещение о событии "ЗакрытаФормаВыбораДокументовИБДляПередачиФНС").
	Если Не Параметры.Свойство("ВерсияВызова", ВерсияВызова) Тогда
		ВерсияВызова = ?(Параметры.Свойство("ВыгрузитьВФайл") И Параметры.ВыгрузитьВФайл = Истина, 1, 2);
	КонецЕсли;
	
	Если ВерсияВызова <> 1 Тогда
		Если ВерсияВызова = 3 Тогда
			МножественныйВыбор = Истина;
		Иначе
			МножественныйВыбор = (Параметры.Свойство("МножественныйВыбор", МножественныйВыбор) И МножественныйВыбор = Истина);
			Если НЕ МножественныйВыбор Тогда
				Элементы.ДоступныеДокументы.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
				ЗакрыватьПриВыборе = Истина;
			КонецЕсли;
		КонецЕсли;
		Элементы.ТаблицаВыбранныхДокументовВыгрузитьВФайл.Видимость = Ложь;
		Элементы.ТаблицаВыбранныхДокументовВыгрузитьВМассив.Видимость = Истина;
		Элементы.ТаблицаВыбранныхДокументовВыгрузитьВМассив.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	ДоступныеДокументы.Параметры.УстановитьЗначениеПараметра("СписокТиповЭД", МассивТиповЭД());
	
	СформироватьТаблицуБыстрогоОтбора();
	
	УстановитьОтборыПриОткрытииПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборыПриОткрытииПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.ДоступныеДокументы.Обновить();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьНевыгруженныеДокументы И ТаблицаВыбранныхДокументов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'В списке выбора есть невыгруженные документы.
			|Вы действительно хотите закрыть форму?'");
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеДокументы

&НаКлиенте
Процедура ДоступныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДокументНаПросмотр(Элементы.ДоступныеДокументы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВыбранныхДокументов

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.ТолькоПросмотр Тогда
		ОткрытьДокументНаПросмотр(Элементы.ТаблицаВыбранныхДокументов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовНомерДокументаОснованияПриИзменении(Элемент)
	
	УстановитьПризнакНеобходимостиЗаполненияДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовДатаДокументаОснованияПриИзменении(Элемент)
	
	УстановитьПризнакНеобходимостиЗаполненияДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивСтрок = ПараметрыПеретаскивания.Значение;
	Если МассивСтрок.Количество() > 0 И ТипЗнч(МассивСтрок[0]) = Тип("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы") Тогда
		ДобавитьВВыбранныеДокументы(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеОтборы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы();
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВРег(Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр) = ВРег("ТипДокументаЭДО") Тогда
		СписокТиповЭД = Новый СписокЗначений;
		СписокТиповЭД.ЗагрузитьЗначения(МассивТиповЭД());
		ДанныеВыбора = СписокТиповЭД;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВРег(Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр) = ВРег("НаправлениеЭДО") Тогда
		СписокНаправлений = Новый СписокЗначений;
		СписокНаправлений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий"));
		СписокНаправлений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий"));
		ДанныеВыбора = СписокНаправлений;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВРег(Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр) = ВРег("ТолькоОтраженныеВУчете") Тогда
		Список = Новый СписокЗначений;
		Список.Добавить(Истина);
		Список.Добавить(Ложь);
		ДанныеВыбора = Список;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВРег(Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр) = ВРег("СостояниеВерсииЭДО") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипЗначенияСписка = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументовЭДО");
		СостоянияЭД = Новый СписокЗначений;
		СостоянияЭД.ТипЗначения = ТипЗначенияСписка;
		
		СостоянияЭД.ЗагрузитьЗначения(СостоянияЭД());
		
		
		Если ЗначениеЗаполнено(Элементы.БыстрыеОтборы.ТекущиеДанные.Значение) Тогда
			Для Каждого ЭлементМассива Из Элементы.БыстрыеОтборы.ТекущиеДанные.Значение Цикл
				ЭлементДляПометки = СостоянияЭД.НайтиПоЗначению(ЭлементМассива.Значение);
				ЭлементДляПометки.Пометка = Истина;
			КонецЦикла;
		КонецЕсли;
		
		ВыборЭлементаЗавершить = Новый ОписаниеОповещения("ВыборСостоянияЭДЗавершить",ЭтотОбъект);
		СостоянияЭД.ПоказатьОтметкуЭлементов(ВыборЭлементаЗавершить,НСтр("ru = 'Состояния ЭД'"));
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСостоянияЭДЗавершить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСостояний = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из Результат Цикл
		Если ЭлементМассива.Пометка Тогда
			ЗначенияСостояний.Добавить(ЭлементМассива.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеБыстрогоОтбора("СостояниеВерсииЭДО", ЗначенияСостояний);
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеБыстрогоОтбора(ИмяОтбора, ЗначениеОтбора)
	
	ТаблицаОтбора = РеквизитФормыВЗначение("БыстрыеОтборы");
	
	Отбор = ТаблицаОтбора.Найти(ИмяОтбора,"Параметр");
	Отбор.Значение = ЗначениеОтбора;
	
	ЗначениеВРеквизитФормы(ТаблицаОтбора, "БыстрыеОтборы");
	
КонецПроцедуры


&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)

	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Параметр = "ТипДокументаЭДО" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ПустаяСсылка");
	ИначеЕсли Строка.Параметр = "Контрагент" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Параметр = "Организация" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Параметр = "Ответственный" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Параметр = "НаправлениеЭДО" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.ПустаяСсылка");
	ИначеЕсли Строка.Параметр = "СостояниеВерсииЭДО" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "Булево" Тогда
		Строка.Значение = Ложь;
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы();
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДокументИзСпискаДоступных(Команда)
	
	ОткрытьДокументНаПросмотр(Элементы.ДоступныеДокументы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументИзСпискаВыбранных(Команда)
	
	ОткрытьДокументНаПросмотр(Элементы.ТаблицаВыбранныхДокументов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	МассивСтрок = Элементы.ДоступныеДокументы.ВыделенныеСтроки;
	ДобавитьВВыбранныеДокументы(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Параметр = "ТипДокументаЭДО" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ПустаяСсылка");
		ИначеЕсли Строка.Параметр = "Контрагент" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Параметр = "Организация" Тогда
			СправочникОрганизации = ОбщегоНазначенияБЭДКлиентПовтИсп.ИмяПрикладногоСправочника("Организации");
			Строка.Значение = ПредопределенноеЗначение("Справочник." + СправочникОрганизации + ".ПустаяСсылка");
		ИначеЕсли Строка.Параметр = "Ответственный" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Параметр = "НаправлениеЭДО" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.ПустаяСсылка");
		ИначеЕсли Строка.Параметр = "СостояниеВерсииЭДО" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	Выгрузить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВМассив(Команда)
	
	Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отборы

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДоступныеДокументы.Отбор, "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДоступныеДокументы.Отбор, "ДатаДокумента");
	
	УстановитьОтборыДинамическогоСписка(ЭтотОбъект, БыстрыеОтборы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	ИспользуетсяНесколькоОрганизацийЭД = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();
	
	Если ИспользуетсяНесколькоОрганизацийЭД Тогда
		НоваяСтрока = БыстрыеОтборы.Добавить();
		НоваяСтрока.Параметр = "Организация";
		НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
		НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
		НоваяСтрока.Значение = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Организации");
	КонецЕсли;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ТипДокументаЭДО";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ТипыДокументовЭДО";
	НоваяСтрока.Значение = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭДО";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭДО";
	НоваяСтрока.Значение = Перечисления.НаправленияЭДО.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Пользователи.АвторизованныйПользователь();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "СостояниеВерсииЭДО";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Состояние ЭДО:'");
	НоваяСтрока.Тип = "СписокЗначений";
	
	СостоянияОбменЗавершен = Новый СписокЗначений;
	СостоянияОбменЗавершен.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
	СостоянияОбменЗавершен.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
	
	НоваяСтрока.Значение = СостоянияОбменЗавершен;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ТолькоОтраженныеВУчете";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Только отраженные в учете:'");
	НоваяСтрока.Тип = "Булево";
	НоваяСтрока.Значение = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическогоСписка(Форма, Отборы)
	
	Для Каждого СтрокаОтбора Из Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"Ответственный",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"Контрагент",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"Организация",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭДО" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"НаправлениеЭДО",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "ТипДокументаЭДО" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"ТипДокументаЭДО",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
															Форма.ДоступныеДокументы.Отбор,
															"СуммаДокумента",
															ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
															СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
															Форма.ДоступныеДокументы.Отбор,
															"СуммаДокумента",
															ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
															СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ДоступныеДокументы.Отбор,
													"ДатаДокумента",
													ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
													НачалоДня(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ДоступныеДокументы.Отбор,
													"ДатаДокумента",
													ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
													КонецДня(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "СостояниеВерсииЭДО" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"СостояниеВерсииЭДО",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.ВСписке,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "ТолькоОтраженныеВУчете" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"ОтраженВУчете",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												(ЗначениеЗаполнено(СтрокаОтбора.Значение) И СтрокаОтбора.Значение));
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПриОткрытииПоУмолчанию()
	
	Если Параметры.Свойство("НаправлениеЭДО") Тогда
		Отбор = Новый Структура("Параметр", "НаправлениеЭДО");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = Параметры.НаправлениеЭДО;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипДокументаЭДО") Тогда
		Отбор = Новый Структура("Параметр", "ТипДокументаЭДО");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = ТипЭДПеречислением(Параметры.ТипДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Отбор = Новый Структура("Параметр", "Организация");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = Параметры.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент") Тогда
		Отбор = Новый Структура("Параметр", "Контрагент");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = Параметры.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура("Параметр", "СостояниеВерсииЭДО");
	МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		
		СостоянияОбменЗавершен = Новый СписокЗначений;
		СостоянияОбменЗавершен.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
		СостоянияОбменЗавершен.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
		
		МассивСтрок[0].Значение = СостоянияОбменЗавершен;
	КонецЕсли;
	
	Отбор = Новый Структура("Параметр", "ТолькоОтраженныеВУчете");
	МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Значение = Истина;
	КонецЕсли;
	
	УстановитьОтборыДинамическогоСписка(ЭтотОбъект, БыстрыеОтборы);
	
КонецПроцедуры

// ТаблицаВыбранныхДокументов

&НаКлиенте
Процедура ДобавитьВВыбранныеДокументы(МассивСтрок)
	
	ВидЭДАкт = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.АктВыполненныхРабот");
	СостояниеЭДОбменЗавершен = ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОбменЗавершен");
	МассивСсылок = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'Для документа ""%1"" не завершен электронный документооборот.'");
	ТекстСообщения = "";
	Для Каждого Строка Из МассивСтрок Цикл
		ДанныеСтроки = Элементы.ДоступныеДокументы.ДанныеСтроки(Строка);
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЭлектронныйДокумент", ДанныеСтроки.ЭлектронныйДокумент);
		НайденныеСтроки = ТаблицаВыбранныхДокументов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьНевыгруженныеДокументы = Истина;
			Если ДанныеСтроки.СостояниеВерсииЭДО <> СостояниеЭДОбменЗавершен Тогда
				ТекстСообщения = ТекстСообщения
					+ ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + СтрЗаменить(ШаблонСообщения, "%1", ДанныеСтроки.Документ);
			КонецЕсли;
			НоваяСтрока = ТаблицаВыбранныхДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			Если ДанныеСтроки.ТипДокументаЭДО = ВидЭДАкт Тогда
				МассивСсылок.Добавить(ДанныеСтроки.Документ);
				НоваяСтрока.НеобходимоЗаполнитьДокументОснование = НЕ (ЗначениеЗаполнено(НоваяСтрока.НомерДокументаОснования)
					И ЗначениеЗаполнено(НоваяСтрока.ДатаДокументаОснования));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		Соответствие = СоответствиеДанныхДокументаОснования(МассивСсылок);
		Если Соответствие.Количество() <> 0 Тогда
			Для Каждого ДокументСсылка Из МассивСсылок Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Документ", ДокументСсылка);
				НайденныеСтроки = ТаблицаВыбранныхДокументов.НайтиСтроки(СтруктураПоиска);
				Структура = Соответствие.Получить(ДокументСсылка);
				Если ТипЗнч(Структура) <> Тип("Структура") Тогда
					Структура = Новый Структура;
				КонецЕсли;
				Для Каждого Строка Из НайденныеСтроки Цикл
					Структура.Свойство("НомерДоговора", Строка.НомерДокументаОснования);
					Структура.Свойство("ДатаДоговора", Строка.ДатаДокументаОснования);
					ЗаполнитьДокументОснование = НЕ (ЗначениеЗаполнено(Строка.НомерДокументаОснования)
													И ЗначениеЗаполнено(Строка.ДатаДокументаОснования));
					Строка.НеобходимоЗаполнитьДокументОснование = ЗаполнитьДокументОснование;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ВерсияВызова <> 1 И МножественныйВыбор = Ложь И ТаблицаВыбранныхДокументов.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстВопроса = ТекстСообщения + Символы.ПС + НСтр("ru = 'Продолжить выгрузку?'");
			ДопПараметры = Новый Структура("ТекстСообщения", ТекстСообщения);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеВВыбранныеДокументы", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			ТекстСообщения = "";
		Иначе
			Выгрузить();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеДанныхДокументаОснования(МассивСсылок)
	
	Соответствие = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьНомерДатаДоговораДокументов(МассивСсылок, Соответствие);
	Если ТипЗнч(Соответствие) <> Тип("Соответствие") Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;
	Возврат Соответствие;
	
КонецФункции

// Формирование файла выгрузки

&НаСервереБезКонтекста
Функция СформироватьФайлВыгрузки(Знач ТаблицаДокументов)
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКВыгрузке", ТаблицаДокументов.Выгрузить());

	Запрос.Текст =
		"ВЫБРАТЬ
		|	МассивСсылок.Документ,
		|	МассивСсылок.ЭлектронныйДокумент,
		|	МассивСсылок.ТипДокументаЭДО,
		|	МассивСсылок.ТипЭлементаРегламента,
		|	МассивСсылок.ТипРегламента,
		|	МассивСсылок.НомерДокумента,
		|	МассивСсылок.ДатаДокумента,
		|	МассивСсылок.Контрагент,
		|	МассивСсылок.Организация,
		|	МассивСсылок.СуммаДокумента,
		|	МассивСсылок.НаправлениеЭДО,
		|	МассивСсылок.НомерДокументаОснования,
		|	МассивСсылок.ДатаДокументаОснования,
		|	МассивСсылок.НеобходимоЗаполнитьДокументОснование
		|ПОМЕСТИТЬ ВыбранныеДокументы
		|ИЗ
		|	&ДокументыКВыгрузке КАК МассивСсылок
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДокументы.Документ КАК Документ,
		|	ВыбранныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВыбранныеДокументы.ТипДокументаЭДО,
		|	ВыбранныеДокументы.ТипЭлементаРегламента,
		|	ВыбранныеДокументы.ТипРегламента,
		|	ВыбранныеДокументы.НомерДокумента,
		|	ВыбранныеДокументы.ДатаДокумента,
		|	ВыбранныеДокументы.Контрагент,
		|	ВыбранныеДокументы.Организация КАК Организация,
		|	ВыбранныеДокументы.СуммаДокумента,
		|	ВыбранныеДокументы.НаправлениеЭДО,
		|	ВыбранныеДокументы.НомерДокументаОснования,
		|	ВыбранныеДокументы.ДатаДокументаОснования,
		|	ВыбранныеДокументы.НеобходимоЗаполнитьДокументОснование

		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Документ,
		|	ЭлектронныйДокумент";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Результат.СледующийПоЗначениюПоля("Организация") Цикл
		ТЗОписи = СтруктураТаблицыОписи();
		Организация = Результат.Организация;
		АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
		Пока Результат.СледующийПоЗначениюПоля("ЭлектронныйДокумент") Цикл
			СтрокаТЗОписи = ТЗОписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗОписи, Результат);
			УникальныйИдентификатор = Результат.ЭлектронныйДокумент.УникальныйИдентификатор();
			ДанныеФайла = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(Результат.ЭлектронныйДокумент);
			СтрокаТЗОписи.ИмяФайлаДанных = ДанныеФайла.ИмяФайла;
			СтрокаТЗОписи.РазмерФайлаДанных = ДанныеФайла.Размер;
			СтрокаТЗОписи.КНД = ДанныеФайла.КНД;
			МассивСтруктурПодписей = ДанныеФайла.УстановленныеПодписи;
			
			ДанныеЭД = ДанныеФайла.ДвоичныеДанные;
			ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
			
			Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
				Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
					СтрокаТЗОписи.ИмяФайлаПодписи    = ДанныеФайла.ИмяФайла + "SGN.sgn";
					СтруктураПодписи.Подпись.Записать(АдресКаталога + СтрокаТЗОписи.ИмяФайлаПодписи);
					СтрокаТЗОписи.РазмерФайлаПодписи = ДанныеЭД.Размер();
					Прервать;
				КонецЦикла;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось выгрузить подпись по документу ""%1"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Результат.Документ);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
				Прервать;
			КонецЕсли;
			
			ДанныеФайла = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС(Результат.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(ДанныеФайла.ИмяФайла) Тогда
				СтрокаТЗОписи.ИмяФайлаДанныхПодтверждения = ДанныеФайла.ИмяФайла;
				СтрокаТЗОписи.РазмерФайлаДанныхПодтверждения = ДанныеФайла.Размер;
				ДанныеЭД = ДанныеФайла.ДвоичныеДанные;
				ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
				МассивСтруктурПодписей = ДанныеФайла.УстановленныеПодписи;				
				
				СтрокаТЗОписи.КНДПодтверждения = ДанныеФайла.КНД;
				
				Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						СтрокаТЗОписи.ИмяФайлаПодписиПодтверждения    =  ДанныеФайла.ИмяФайла + "SGN.sgn";
						СтруктураПодписи.Подпись.Записать(АдресКаталога + СтрокаТЗОписи.ИмяФайлаПодписиПодтверждения);
						СтрокаТЗОписи.РазмерФайлаПодписиПодтверждения = ДанныеЭД.Размер();
						Прервать;
					КонецЦикла;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось выгрузить ответную подпись по документу ""%1"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Результат.Документ);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Файлы = НайтиФайлы(АдресКаталога, "*");
		Если Файлы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось выгрузить документы по Организации ""%1"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Организация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
			Продолжить;
		КонецЕсли;
		
		МассивИменФайлов = Новый Массив;
		Для Каждого НайденныйФайл Из Файлы Цикл
			МассивИменФайлов.Добавить(НайденныйФайл.Имя);
		КонецЦикла;
		
		ИмяРеквизитаИНН = ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКПП = ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ШаблонСтрокиПолучаемыхРеквизитов = "%1, %2";
		ИменаПолучаемыхРеквизитов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтрокиПолучаемыхРеквизитов, ИмяРеквизитаИНН, ИмяРеквизитаКПП);
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаПолучаемыхРеквизитов);
		ИНН = СокрЛП(РеквизитыОрганизации.ИНН);
		ИДОтправителя = ИНН + ?(СтрДлина(ИНН) = 12, "", СокрЛП(РеквизитыОрганизации.КПП));
		ИДВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddЧЧммсс");
		ИмяФайла = "EDI_" + ИДОтправителя + "_" + ИДВыгрузки;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		Контейнер = Новый ЗаписьZipФайла(АдресКаталога + ИмяФайла + ".zip");
		
		Для Каждого Файл Из Файлы Цикл
			Контейнер.Добавить(Файл.ПолноеИмя);
		КонецЦикла;
		
		Если ФайлОписанияВыгрузки(Организация, ТЗОписи, АдресКаталога) Тогда
			Контейнер.Добавить(АдресКаталога + "описание.xml");
			
			Контейнер.Записать();
			
			ДДВыгрузки = Новый ДвоичныеДанные(АдресКаталога + ИмяФайла + ".zip");
			АрхивныйФайл = Новый Файл(АдресКаталога + ИмяФайла + ".zip");
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("ИмяФайла", АрхивныйФайл.Имя);
			ДанныеФайла.Вставить("ИмяБезРасширения", АрхивныйФайл.ИмяБезРасширения);
			ДанныеФайла.Вставить("Расширение", Сред(АрхивныйФайл.Расширение, 2));
			ДанныеФайла.Вставить("Размер", АрхивныйФайл.Размер());
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДДВыгрузки, Организация.УникальныйИдентификатор());
			
			СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
		КонецЕсли;
		
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
	КонецЦикла;
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлОписанияВыгрузки(Организация, ТЗОписи, АдресКаталога)
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок

	ИмяРеквизитаНаименование = ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");	
	ИмяРеквизитаИНН = ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКПП = ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
	ШаблонСтрокиПолучаемыхРеквизитов = "%1, %2, %3";
	ИменаПолучаемыхРеквизитов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтрокиПолучаемыхРеквизитов, ИмяРеквизитаНаименование, ИмяРеквизитаИНН, ИмяРеквизитаКПП);
		
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаПолучаемыхРеквизитов);

	ПространствоИменСхемы = "Upload2Statements";
	Попытка
		Файл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
	
		ДатаВыгрузки = ТекущаяДатаСеанса();
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.03", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ДатаВыгрузки", Формат(ДатаВыгрузки, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВремяВыгрузки", Формат(ДатаВыгрузки, "ДФ=HH:mm:ss"), Истина, Ошибки);
		
		СвОрганизация = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Организация", ПространствоИменСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрганизация, "Наименование", РеквизитыОрганизации.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрганизация, "ИНН", РеквизитыОрганизации.ИНН, Истина, Ошибки);
		Если СтрДлина(РеквизитыОрганизации.ИНН) = 10 Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрганизация, "КПП", РеквизитыОрганизации.КПП, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Организация", СвОрганизация, Истина, Ошибки);
		
		СвКонтрагенты = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Контрагенты", ПространствоИменСхемы);
		Контрагент = "";
		ИДКонтрагента = "";
		Для Каждого СтрокаОписи Из ТЗОписи Цикл
			Если СтрокаОписи.Контрагент <> Контрагент Тогда
				СвКонтрагент = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Контрагенты.Контрагент", ПространствоИменСхемы);
				Контрагент = СтрокаОписи.Контрагент;
				РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, ИменаПолучаемыхРеквизитов);
				ИДКонтрагента = РеквизитыКонтрагента.ИНН + РеквизитыКонтрагента.КПП;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Идентификатор", ИДКонтрагента, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Наименование", РеквизитыКонтрагента.Наименование, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "ИНН", РеквизитыКонтрагента.ИНН, Истина, Ошибки);
				Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "КПП", РеквизитыКонтрагента.КПП, Истина, Ошибки);
				КонецЕсли;
				СвКонтрагенты.Контрагент.Добавить(СвКонтрагент);
			КонецЕсли;
			СвДокумент = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
			
			КодВидаДокументаБРО = Обработки.ИнтеграцияБРО_ЭДО.КодВидаДокументаБРОПоСвойствамЭДО(СтрокаОписи.ТипРегламента,
				СтрокаОписи.ТипДокументаЭДО, СтрокаОписи.ТипЭлементаРегламента);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Вид", КодВидаДокументаБРО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "КНД", СтрокаОписи.КНД, Истина, Ошибки);
			Направление = ?(СтрокаОписи.НаправлениеЭДО = Перечисления.НаправленияЭДО.Входящий, "0", "1");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Направление", Направление, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Номер", СтрокаОписи.НомерДокумента, Истина, Ошибки);
			ДатаДок = Формат(СтрокаОписи.ДатаДокумента, "ДФ=dd.MM.yyyy");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Дата", ДатаДок, Истина, Ошибки);
			Если ЗначениеЗаполнено(СтрокаОписи.ДатаДокументаОснования)
				И ЗначениеЗаполнено(СтрокаОписи.НомерДокументаОснования) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "НомерДокОсн", СтрокаОписи.НомерДокументаОснования, , Ошибки);
				ДатаДок = Формат(СтрокаОписи.ДатаДокументаОснования, "ДФ=dd.MM.yyyy");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ДатаДокОсн", ДатаДок, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ИдКонтрагента", ИДКонтрагента, Истина, Ошибки);
			
			СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДок", ПространствоИменСхемы);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл,     "Имя",     СтрокаОписи.ИмяФайлаДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл,     "Размер",  СтрокаОписи.РазмерФайлаДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл,     "КНД",     СтрокаОписи.КНД, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДок", СвФайл, Истина, Ошибки);
			
			СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦП", ПространствоИменСхемы);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписи, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписи, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦП", СвФайл, Истина, Ошибки);
			
			Если ЗначениеЗаполнено(СтрокаОписи.ИмяФайлаДанныхПодтверждения) Тогда
				СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДокПодтверждения", ПространствоИменСхемы);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаДанныхПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаДанныхПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "КНД", СтрокаОписи.КНДПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДокПодтверждения", СвФайл, , Ошибки);
				
				СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦППодтверждения", ПространствоИменСхемы);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписиПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписиПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦППодтверждения", СвФайл, , Ошибки);
			КонецЕсли;
			
			Файл.Документ.Добавить(СвДокумент);
		КонецЦикла;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Контрагенты", СвКонтрагенты, Истина, Ошибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		РаботаСФайламиБЭД.СохранитьXDTO(Файл, АдресКаталога + "описание.xml", Ложь, "windows-1251");
		Возврат Истина;
	Исключение
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Формирование выгрузки ЭД в 1с-Отчетность'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураТаблицыОписи()
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("ТипДокументаЭДО");
	ТЗ.Колонки.Добавить("ТипЭлементаРегламента");
	ТЗ.Колонки.Добавить("ТипРегламента");
	ТЗ.Колонки.Добавить("КНД");
	ТЗ.Колонки.Добавить("НаправлениеЭДО");
	ТЗ.Колонки.Добавить("НомерДокумента");
	ТЗ.Колонки.Добавить("ДатаДокумента");
	ТЗ.Колонки.Добавить("НомерДокументаОснования");
	ТЗ.Колонки.Добавить("ДатаДокументаОснования");
	ТЗ.Колонки.Добавить("ИмяФайлаДанных");
	ТЗ.Колонки.Добавить("ИмяФайлаПодписи");
	ТЗ.Колонки.Добавить("РазмерФайлаДанных");
	ТЗ.Колонки.Добавить("РазмерФайлаПодписи");
	ТЗ.Колонки.Добавить("КНДПодтверждения");
	ТЗ.Колонки.Добавить("ИмяФайлаДанныхПодтверждения");
	ТЗ.Колонки.Добавить("ИмяФайлаПодписиПодтверждения");
	ТЗ.Колонки.Добавить("РазмерФайлаДанныхПодтверждения");
	ТЗ.Колонки.Добавить("РазмерФайлаПодписиПодтверждения");
	
	Возврат ТЗ;
	
КонецФункции

// Прочие

&НаСервереБезКонтекста
Функция ТекущаяУниверсальнаяДатаНаСервере()

	Возврат ТекущаяУниверсальнаяДата()

КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЕстьНевыгруженныеДокументы = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеВВыбранныеДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТаблицаВыбранныхДокументов.Очистить();
	Иначе
		ТекстСообщения = "";
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ТекстСообщения", ТекстСообщения)
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Выгрузить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакНеобходимостиЗаполненияДокументаОснования()
	
	ТекущиеДанные = Элементы.ТаблицаВыбранныхДокументов.ТекущиеДанные;
	ТекущиеДанные.НеобходимоЗаполнитьДокументОснование = НЕ (ЗначениеЗаполнено(ТекущиеДанные.НомерДокументаОснования) 
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаДокументаОснования));
	
КонецПроцедуры

&НаКлиенте
Функция ВидЭДСтрокой(ВидЭД, ТипЭлементаВерсииЭД)
	
	ВидЭДСтрокой = Неопределено;
	
	Если ВидЭД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.СчетФактура") Тогда
		Если ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.УдалитьЭСФ") Тогда
			ВидЭДСтрокой = НСтр("ru = 'СчетФактура'");
		Иначе
			ВидЭДСтрокой = НСтр("ru = 'УПД'");
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.КорректировочныйСчетФактура") Тогда
		Если ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.УдалитьЭСФ") Тогда
			ВидЭДСтрокой = НСтр("ru = 'КорректировочныйСчетФактура'");
		Иначе
			ВидЭДСтрокой = НСтр("ru = 'УКД'");
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ТоварнаяНакладная") Тогда
		Если ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
			ВидЭДСтрокой = НСтр("ru = 'ТоварнаяНакладнаяТОРГ12'");
		ИначеЕсли ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.УдалитьДОПУПД") Тогда
			ВидЭДСтрокой = НСтр("ru = 'УПД'");
		Иначе
			ВидЭДСтрокой = НСтр("ru = 'ПередачаТоваров'");
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.АктВыполненныхРабот") Тогда
		Если ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
			ВидЭДСтрокой = НСтр("ru = 'АктПриемкиСдачиРабот'");
		Иначе
			ВидЭДСтрокой = НСтр("ru = 'ПередачаУслуг'");
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости")
		И ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.УдалитьДИСУКД") Тогда
		ВидЭДСтрокой = НСтр("ru = 'УКД'");
		
	КонецЕсли;
	
	Возврат ВидЭДСтрокой;
	
КонецФункции

&НаСервере
Функция ТипЭДПеречислением(ТипЭД)
	
	ВозвращаемыйТипЭД = Неопределено;
	Если ТипЗнч(ТипЭД) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		ВозвращаемыйТипЭД = ТипЭД;
	ИначеЕсли ТипЭД = "АктПриемкиСдачиРабот" Тогда
		ВозвращаемыйТипЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	ИначеЕсли ТипЭД = "КорректировочныйСчетФактура" Тогда
		ВозвращаемыйТипЭД = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	ИначеЕсли ТипЭД = "СчетФактура" Тогда
		ВозвращаемыйТипЭД = Перечисления.ТипыДокументовЭДО.СчетФактура;
	ИначеЕсли ТипЭД = "ТоварнаяНакладнаяТОРГ12" Тогда
		ВозвращаемыйТипЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	КонецЕсли;
	
	Возврат ВозвращаемыйТипЭД;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивТиповЭД()
	
	МассивТиповЭД = Новый Массив;
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	МассивТиповЭД.Добавить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	
	Возврат МассивТиповЭД;
	
КонецФункции

&НаСервереБезКонтекста
Функция СостоянияЭД()
	
	ЗначенияСостояний = Перечисления.СостоянияДокументовЭДО;
	
	СостоянияЭД = Новый Массив;
	СостоянияЭД.Добавить(ЗначенияСостояний.Аннулирован);
	СостоянияЭД.Добавить(ЗначенияСостояний.ЗакрытПринудительно);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяПодписаниеИзвещения);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяПодписание);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяУтверждение);
	СостоянияЭД.Добавить(ЗначенияСостояний.НеПолучен);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОбменЗавершен);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОбменЗавершенСИсправлением);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОжидаетсяПодтверждениеАннулирования);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОжидаетсяИзвещениеОПолучении);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОжидаетсяИсправление);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяОтправка);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяОтправкаИзвещения);
	СостоянияЭД.Добавить(ЗначенияСостояний.УдалитьОжидаетсяОтправкаПолучателю);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОжидаетсяПередачаОператору);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОжидаетсяПодтверждение);
	СостоянияЭД.Добавить(ЗначенияСостояний.ОжидаетсяПодтверждениеОператора);
	СостоянияЭД.Добавить(ЗначенияСостояний.ЗакрытСОтклонением);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяПодписаниеАннулирования);
	СостоянияЭД.Добавить(ЗначенияСостояний.ТребуетсяУточнение);
	СостоянияЭД.Добавить(ЗначенияСостояний.Аннулирован);
	
	Возврат СостоянияЭД;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ИнтеграцияЭДО.ИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументНаПросмотр(ВыбраннаяСтрока)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросПоОснованиям(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ВерсияВызова = 1 Тогда
			Соответствие = СформироватьФайлВыгрузки(ТаблицаВыбранныхДокументов);
			Если Соответствие.Количество() > 0 Тогда
				ПолноеИмяФайла = "";
#Если НЕ ВебКлиент Тогда
				ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
				ДиалогВыбора.Заголовок = НСтр("ru = 'Выберите каталог для сохранения файла (файлов) выгрузки'");
				ДиалогВыбора.ПолноеИмяФайла = "";
				Если НЕ ДиалогВыбора.Выбрать() Тогда
					Возврат;
				КонецЕсли;
#КонецЕсли
				ВсеДокументыВыгружены = Истина;
				Для Каждого Элемент Из Соответствие Цикл
#Если ВебКлиент Тогда
					ДанныеФайла = Новый Структура;
					ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",        Элемент.Значение);
					ДанныеФайла.Вставить("ОтносительныйПуть",                  "");
					ДанныеФайла.Вставить("ДатаМодификацииУниверсальная",       ТекущаяУниверсальнаяДатаНаСервере());
					ДанныеФайла.Вставить("ИмяФайла",                           Элемент.Ключ.ИмяФайла);
					ДанныеФайла.Вставить("Наименование",                       Элемент.Ключ.ИмяБезРасширения);
					ДанныеФайла.Вставить("Расширение",                         Элемент.Ключ.Расширение);
					ДанныеФайла.Вставить("Размер",                             Элемент.Ключ.Размер);
					ДанныеФайла.Вставить("Редактирует",                        Неопределено);
					ДанныеФайла.Вставить("ПодписанЭП",                         Ложь);
					ДанныеФайла.Вставить("Зашифрован",                         Ложь);
					ДанныеФайла.Вставить("ХранитьВерсии",                      Ложь);
					ДанныеФайла.Вставить("ПометкаУдаления",                    Ложь);
					ДанныеФайла.Вставить("ДатаЗаема",                          Неопределено);
					ДанныеФайла.Вставить("ФайлРедактируется",                  Ложь);
					ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
					ДанныеФайла.Вставить("НомерВерсии",                        0);
					ДанныеФайла.Вставить("ПолноеНаименованиеВерсии",           Элемент.Ключ.ИмяБезРасширения);
					ДанныеФайла.Вставить("ПапкаДляСохранитьКак",               Неопределено);
	
					РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
#Иначе
					ДДВыгрузки = ПолучитьИзВременногоХранилища(Элемент.Значение);
					ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиалогВыбора.Каталог)
						+ Элемент.Ключ.ИмяФайла;
					ДДВыгрузки.Записать(ПолноеИмяФайла);
					ЗаписанныйФайл = Новый Файл(ПолноеИмяФайла);
					ВсеДокументыВыгружены = ВсеДокументыВыгружены И ЗаписанныйФайл.Существует();
#КонецЕсли
				КонецЦикла;
				ЕстьНевыгруженныеДокументы = НЕ ВсеДокументыВыгружены;
			КонецЕсли;
		Иначе
			ЕстьНевыгруженныеДокументы = Ложь;
			Если ВерсияВызова = 2 Тогда
				МассивСсылок = Новый Массив;
				Для Каждого Строка Из ТаблицаВыбранныхДокументов Цикл
					МассивСсылок.Добавить(Строка.Документ);
				КонецЦикла;
				ОповеститьОВыборе(МассивСсылок);
			Иначе
				МассивСтруктур = Новый Массив;
				Для Каждого Строка Из ТаблицаВыбранныхДокументов Цикл
					Структура = Новый Структура;
					Структура.Вставить("СсылкаДокументИБ", Строка.Документ);
					Структура.Вставить("ВидДокумента", ВидЭДСтрокой(Строка.ТипДокументаЭДО, Строка.ТипЭлементаВерсииЭД));
					Структура.Вставить("НомерДоговора", Строка.НомерДокументаОснования);
					Структура.Вставить("ДатаДоговора", Строка.ДатаДокументаОснования);
					МассивСтруктур.Добавить(Структура);
				КонецЦикла;
				Оповестить("ЗакрытаФормаВыбораДокументовИБДляПередачиФНС", МассивСтруктур);
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить()
	
	Если ТаблицаВыбранныхДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования выгрузки необходимо выбрать хотя бы один документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		Отбор = Новый Структура("НеобходимоЗаполнитьДокументОснование", Истина);
		НайденныеСтроки = ТаблицаВыбранныхДокументов.НайтиСтроки(Отбор);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПоОснованиям", ЭтотОбъект);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'В списке выбранных документов, присутствуют документы вида ""%1"",
				|с незаполненными реквизитами документов-оснований (номер, дата).
				|Продолжить выгрузку?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", НайденныеСтроки[0].ТипДокументаЭДО);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхДокументовНомерДокументаОснования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхДокументовДатаДокументаОснования.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаВыбранныхДокументов.ТипДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаВыбранныхДокументов.НомерДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаВыбранныхДокументов.ДатаДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхДокументовНомерДокументаОснования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхДокументовДатаДокументаОснования.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаВыбранныхДокументов.ТипДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Ложь, Истина, Ложь, Ложь, ));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхДокументовНомерДокументаОснования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхДокументовДатаДокументаОснования.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаВыбранныхДокументов.ТипДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#КонецОбласти
