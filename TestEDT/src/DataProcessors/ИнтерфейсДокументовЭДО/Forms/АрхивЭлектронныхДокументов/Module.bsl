
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОформитьИнтерфейсДляМобильногоКлиентаНаСервере();
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрагентИсх", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОрганизацияИсх", "Видимость", Ложь);
	КонецЕсли;

	Ответственный = Пользователи.АвторизованныйПользователь();
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Ответственный", Ответственный);
	
	ОтветственныйИсх = Ответственный;
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокИсх, "Ответственный", ОтветственныйИсх);
	
	СтатусНеРаспакованногоКонтейнера = Перечисления.СтатусыТранспортныхСообщенийБЭД.КРаспаковке;
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(НераспакованныеКонтейнеры, "Статус", СтатусНеРаспакованногоКонтейнера);
	
	СтатусНеОтправленногоКонтейнера = Перечисления.СтатусыТранспортныхСообщенийБЭД.ПодготовленКОтправке;
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(НеотправленныеКонтейнеры, "Статус", СтатусНеОтправленногоКонтейнера);
	
	ЗаполнитьСпискиВыбораВидовДокументов();
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	УстановитьЗначениеПустогоКонтрагента();	
		
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПанельКонтекстныхНовостей);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "ВидЭД",    Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "Список", "СостояниеЭДО", Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "СписокИсх", "ВидЭДИсх",    Настройки);
	ОтборПоЭлементуПриЗагрузкеИзНастроек(ЭтотОбъект, "СписокИсх", "СостояниеЭДОИсх", Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		Элементы.Список.Обновить();
		Элементы.СписокИсх.Обновить();
		Элементы.СписокНераспакованныеКонтейнеры.Обновить();
		Элементы.СписокНеотправленныеКонтейнеры.Обновить();
		Элементы.ВсеКонтейнеры.Обновить();
		
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда
		
		Элементы.ВсеПриглашения.Обновить();
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(Элемент.ТекущиеДанные.Документооборот);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Ответственный", Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЭДПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "СостояниеЭДО", СостояниеЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНеРаспакованногоКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(НераспакованныеКонтейнеры, "Контрагент", КонтрагентНеРаспакованногоКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНеРаспакованногоКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(НераспакованныеКонтейнеры, "Статус", СтатусНеРаспакованногоКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНеОтправленногоКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(НеотправленныеКонтейнеры, "Контрагент", КонтрагентНеОтправленногоКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНеОтправленногоКонтейнераПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(НеотправленныеКонтейнеры, "Статус", СтатусНеОтправленногоКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйИсхПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокИсх, "Ответственный", ОтветственныйИсх);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЭДПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоВидуЭлектронногоДокумента("Список", "ВидЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЭДИсхПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоВидуЭлектронногоДокумента("СписокИсх", "ВидЭДИсх");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЭДИсхПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокИсх, "СостояниеЭДОИсх", СостояниеЭДОИсх);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриглашенияПриИзменении(Элемент)
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеПриглашения, "Организация", ОрганизацияПриглашения);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриглашенияПриИзменении(Элемент)
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеПриглашения, "Контрагент", КонтрагентПриглашения);
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриглашенияПриИзменении(Элемент)
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(ВсеПриглашения, "Статус", СтатусПриглашения);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Контрагент", Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентИсхПриИзменении(Элемент)

	УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокИсх, "Контрагент", КонтрагентИсх);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборВСпискеПоЭлементуКлиентСервер(Список, "Организация", Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИсхПриИзменении(Элемент)

	УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокИсх, "Организация", ОрганизацияИсх);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИсх

&НаКлиенте
Процедура СписокИсхОбработкаЗапросаОбновления()
	
	Элементы.СписокИсх.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокумент();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
		ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",      Истина);
	ПараметрыФормы.Вставить("РежимВыбора",             Истина);
	
	Документообороты = Новый Массив();
		
	Для Каждого ЭлСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		Документообороты.Добавить(ЭлСписка);
	КонецЦикла;
	
	Если Документообороты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("КоличествоКОбработке", Документообороты.Количество());
	
	ОбработкаОповещения = Новый ОписаниеОповещения("УстановитьОтветственногоОповещениеОЗавершении", ЭтотОбъект, ДополнительныеПараметры);	
	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(Документообороты, ОбработкаОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДанныеВходящихЭД(Команда)
	
	СравнитьДанныеЭД(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДанныеИсходящихЭД(Команда)
	
	СравнитьДанныеЭД(Элементы.СписокИсх);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	НераспакованныеКонтейнерыСписок = Элементы.СписокНераспакованныеКонтейнеры.ВыделенныеСтроки;
	
	СинхронизацияЭДОКлиент.РаспаковатьТранспортныеКонтейнеры(НераспакованныеКонтейнерыСписок);
 	
КонецПроцедуры

&НаКлиенте
Процедура РаспаковатьКонтейнерыОповещение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатыОтправки = Неопределено;
	
	КоличествоОтправленных = РезультатыОтправки.Успешные.Количество();
	
	ШаблонОповещения = НСтр("ru = 'Распаковано контейнеров: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);

	ЗаголовокОповещения = НСтр("ru = 'Распаковка контейнеров электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКРаспаковке(Команда)
	
	ТаблицаКонтейнеров = "СписокНераспакованныеКонтейнеры";
	Количество = 0;
	УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке"), Количество);
	
	ТекстОповещения = НСтр("ru = 'Изменен статус контейнеров на ""К распаковке""'") + ": (%1)";
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	Элементы[ТаблицаКонтейнеров].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(Команда)
	
	Если Команда.Имя = "УстановитьСтатусОтмененНеРаспакованныеКонтейнеры" Тогда
		ТаблицаКонтейнеров = "СписокНераспакованныеКонтейнеры";
	Иначе
		ТаблицаКонтейнеров = "СписокНеотправленныеКонтейнеры";
	КонецЕсли;
	
	Количество = 0;
	УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Отменен"), Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус контейнеров на ""Отменен""'") + ": (%1)";
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	Элементы[ТаблицаКонтейнеров].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПодготовленКОтправке(Команда)
	
	ТаблицаКонтейнеров = "СписокНеотправленныеКонтейнеры";
	Количество = 0;
	УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.ПодготовленКОтправке"), Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус контейнеров на ""Подготовлен к отправке""'" + ": (%1)");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	Элементы[ТаблицаКонтейнеров].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонтейнерыЭДНаДиск(Команда)
	
	ДанныеФайлов = ПолучитьДанныеПрисоединенныхФайловКонтейнеровЭДНаСервере(
		Элементы.ВсеКонтейнеры.ВыделенныеСтроки, УникальныйИдентификатор);
	
	МассивФайлов = Новый Массив;
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
			ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		МассивФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Если МассивФайлов.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьКонтейнерыЭДНаДискПослеУстановкиРасширения", ЭтотОбъект, МассивФайлов);
		ТекстСообщения = НСтр("ru = 'Для сохранения контейнеров ЭД необходимо установить расширение работы с файлами.'");
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонтейнерыЭДНаДискПослеУстановкиРасширения(РасширениеПодключено, МассивФайлов) Экспорт
	
	Если РасширениеПодключено Тогда				
		ПустойОбработчик = Новый ОписаниеОповещения;
		НачатьПолучениеФайлов(ПустойОбработчик, МассивФайлов);
	Иначе
		ДанныеФайла = МассивФайлов[0];
		ПолучитьФайл(ДанныеФайла.Хранение, ДанныеФайла.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуВыгрузкиЭлектронныхДокументовДляФНС(ЭтотОбъект, НаправлениеЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий");
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуВыгрузкиЭлектронныхДокументовДляФНС(ЭтотОбъект, НаправлениеЭД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗначениеПустогоКонтрагента()
	
	ПустойКонтрагент = ИнтеграцияЭДО.ПолучитьПустуюСсылку("Контрагенты");
	ВсеПриглашения.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", ПустойКонтрагент);
	ВсеПриглашения.Параметры.УстановитьЗначениеПараметра("ИНН"             , НСтр("ru = 'ИНН'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДанных, ВидЭлемента,
		ЗначениеЭлемента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВСпискеПоВидуЭлектронногоДокумента(Знач ИмяСписка, Знач ИмяРеквизита)
	
	СписокДанных = ЭтотОбъект[ИмяСписка];
	ВидДокумента = ЭтотОбъект[ИмяРеквизита];
	ИмяГруппыОтбора = "ГруппаОтбора" + ИмяРеквизита;
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокДанных.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		ГруппаБыстрыйОтбор.Использование = Ложь;
		Возврат;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаБыстрыйОтбор, "ВидДокумента", ВидСравненияКомпоновкиДанных.Равно, ВидДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.СписокИсхСравнитьДанныеЭДИсх.Видимость = Ложь;
		Элементы.СравнитьДанныеЭДВходящие.Видимость     = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьДанныеЭД(ТекущийСписок)
	
	#Если ТолстыйКлиентУправляемоеПриложение Или ТолстыйКлиентОбычноеПриложение Тогда
		
		Если ТекущийСписок.ТекущиеДанные = Неопределено
			ИЛИ ТекущийСписок.ВыделенныеСтроки.Количество() <> 2 Тогда
			Возврат;
		КонецЕсли;
		
		Представления = ПредставлениеЭлектронныхДокументов(ТекущийСписок.ВыделенныеСтроки);
		
		ИмяФайла1 = ПолучитьИмяВременногоФайла("mxl");
		ИмяФайла2 = ПолучитьИмяВременногоФайла("mxl");
		
		Представления[0].Записать(ИмяФайла1);
		Представления[1].Записать(ИмяФайла2);
		
		Сравнение = Новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
		Сравнение.ПервыйФайл = ИмяФайла1;
		Сравнение.ВторойФайл = ИмяФайла2;
		Сравнение.ПоказатьРазличияМодально();
		
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(), ИмяФайла1);
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(), ИмяФайла2);
		
	#КонецЕсли
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПредставлениеЭлектронныхДокументов(Знач Документообороты)
	
	МассивПредставлений = Новый Массив;
	
	Для Каждого Документооборот Из Документообороты Цикл
		ЭД = ЭлектронныеДокументыЭДО.СообщениеОтправителя(Документооборот);
		Представление = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(ЭД);
		МассивПредставлений.Добавить(Представление);
	КонецЦикла;
	
	Возврат МассивПредставлений;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусКонтейнеров(ТаблицаКонтейнеров, СтатусКонтейнера, КоличествоИзмененных)
		
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из Элементы[ТаблицаКонтейнеров].ВыделенныеСтроки Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Если СинхронизацияЭДО.ИзменитьСтатусТранспортногоКонтейнера(СтрокаТаблицы.Ссылка, СтатусКонтейнера) Тогда
				КоличествоИзмененных = КоличествоИзмененных + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработкаНеисправностейБЭД.ОбработатьОшибку(
				НСтр("ru = 'изменение статуса контейнеров ЭД'"), ТекстОшибки, ТекстСообщения,, СтрокаТаблицы.Ссылка);
				
		КонецПопытки;
		
	КонецЦикла;		

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрисоединенныхФайловКонтейнеровЭДНаСервере(Знач КонтейнерыЭД, УникальныйИдентификатор)
	
	ФайлыКонтейнеровЭД = СинхронизацияЭДО.ПрисоединенныеФайлыТранспортныхКонтейнеров(КонтейнерыЭД);

	ДанныеФайлов = Новый Массив;
	Для Каждого ФайлКонтейнера Из ФайлыКонтейнеровЭД Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлКонтейнера, УникальныйИдентификатор);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

&НаСервере
Процедура ОтборПоЭлементуПриЗагрузкеИзНастроек(Форма, ИмяСписка, ВидЭлемента, Настройки)
	
	СписокДанных = ЭтотОбъект[ИмяСписка];
	ЗначениеЭлемента = Настройки.Получить(ВидЭлемента);
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Форма[ВидЭлемента] = ЗначениеЭлемента;
		
		Если НРег(ВидЭлемента) = "видэд" Или НРег(ВидЭлемента) = "видэдисх" Тогда
		    УстановитьОтборВСпискеПоВидуЭлектронногоДокумента(ИмяСписка, ВидЭлемента);
		Иначе
			УстановитьОтборВСпискеПоЭлементуКлиентСервер(СписокДанных, ВидЭлемента, ЗначениеЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ВидЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоОповещениеОЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат.КоличествоОбработанных > 0 Тогда
		
		Элементы.Список.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
		|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", Результат.КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        ДополнительныеПараметры.КоличествоКОбработке);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораВидовДокументов()
	
	ВидыДокументов = ИнтерфейсДокументовЭДО.ВидыЭлектронныхДокументовДоступныеДляОтборов();
	Элементы.ВидЭД.СписокВыбора.ЗагрузитьЗначения(ВидыДокументов);
	Элементы.ВидЭДИсх.СписокВыбора.ЗагрузитьЗначения(ВидыДокументов);
	
КонецПроцедуры


#Область КонтекстныеПодсказки

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти  

#Область МобильныйКлиент

&НаСервере
Процедура ОформитьИнтерфейсДляМобильногоКлиентаНаСервере()
	
	ИнтерфейсДокументовЭДО.СкрытьВсеЭлементыФормы(Элементы);
	
	ВидимыеЭлементы = "Страницы, ЭД, ГруппаБыстрыеОтборы, ВидЭД, СтатусЭД, Организация, Контрагент, Список,
		|СписокВидДокумента, СписокНомерДокумента, СписокДатаДокумента, СписокКонтрагент, СписокОрганизация,
		|СписокСостояниеЭДО, ИЭД, ГруппаБыстрыеОтборыИсх, ОрганизацияИсх, КонтрагентИсх, ВидЭДИсх, СтатусЭДИсх, СписокИсх,
		|СписокИсхВидДокумента, СписокИсхНомерДокумента, СписокИсхДатаДокумента, СписокИсхКонтрагент, СписокИсхОрганизация,
		|СписокИсхСостояниеЭДО";
	
	ИнтерфейсДокументовЭДО.УстановитьВидимостьЭлементов(Элементы, ВидимыеЭлементы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Список", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИсх", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Список", "ПутьКДаннымКартинкиСтроки", "");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИсх", "ПутьКДаннымКартинкиСтроки", "");
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
