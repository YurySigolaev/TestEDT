
#Область ПодпискиНаСобытия

// Подписка на событие. Синхронизирует состояния в РС СостоянияВерсийЭД и СостоянияВерсийЭДДО
//
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.СостоянияВерсийЭД - Набор, из которого необходимо получить
//	 сведения о состоянии.
//	Отказ - Булево - Признак отказа от записи.
//	
//
Процедура СинхронизироватьСостоянияЭДДляДО(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляСинхронизации = ДанныеДляСинхронизацииСостояния(Источник);
	
	Для Каждого ДанныеСостояния Из ДанныеДляСинхронизации Цикл
		
		Если ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
			ИЛИ ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора
			ИЛИ ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.Отправлен,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
			ИЛИ (ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
				И ДанныеСостояния.Направление <> Перечисления.НаправленияЭДО.Исходящий) Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.НаПодписи,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
			И Не ДанныеСостояния.ТребуетсяПодтверждение Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
			И ДанныеСостояния.СостояниеЗаписанное <> Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.НаПодписи,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения
			И ДанныеСостояния.СостояниеЗаписанное <> Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен
			И ДанныеСостояния.ТребуетсяПодтверждение Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.НаПодписи,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.ОжидаетсяИсправление,
				ДанныеСостояния.Направление);
			
		ИначеЕсли ДанныеСостояния.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
			И ДанныеСостояния.СостояниеЗаписанное = Перечисления.СостоянияВерсийЭДДО.НаПодписи Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ДанныеСостояния.ДокументДО,
				ДанныеСостояния.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.Подписан,
				ДанныеСостояния.Направление);
			
		Иначе
			
			ИндексЗначения = Перечисления.СостоянияДокументовЭДО.Индекс(ДанныеСостояния.СостояниеЭДО);
			СостояниеЭД = Метаданные.Перечисления.СостоянияДокументовЭДО.ЗначенияПеречисления[ИндексЗначения].Имя;
				
			Если Не Метаданные.Перечисления.СостоянияВерсийЭДДО.ЗначенияПеречисления.Найти(СостояниеЭД) = Неопределено Тогда
				
				РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
					ДанныеСостояния.ДокументДО, 
					ДанныеСостояния.Контрагент, 
					Перечисления.СостоянияВерсийЭДДО[СостояниеЭД], 
					ДанныеСостояния.Направление);
					
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника, объект которого надо найти.
//  ИмяРеквизита - Строка - Имя реквизита, по которому будет проведен поиск.
//  ЗначРеквизита - Произвольный - значение реквизита, по которому будет проведен поиск.
//  Результат - СправочникСсылка - Ссылка на найденный объект.
//  Владелец - СправочникСсылка - Ссылка на владельца для поиска в иерархическом справочнике.
//  ТолькоНеПомеченные - Булево - Исключить из поиска помеченные на удаление.
//
Процедура НайтиСсылкуНаОбъектПоРеквизиту(
	ИмяСправочника, 
	ИмяРеквизита, 
	ЗначРеквизита, 
	Результат, 
	Владелец = Неопределено,
	ТолькоНеПомеченные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ИскСправочник
		|ГДЕ
		|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Если ТолькоНеПомеченные Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.ПометкаУдаления = Ложь";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск контактного лица контрагента по данным сертификата ЭП, при отсутствии добавляет новое.
//
Функция НайтиДобавитьКонтактноеЛицоИзСертификата(Контрагент, ДвоичныеДанныеСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеСертификата) Тогда
		Возврат КонтактноеЛицо;
	КонецЕсли;
	
	Субъект = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(
		Новый СертификатКриптографии(ДвоичныеДанныеСертификата));
		
	Если Не Субъект.Свойство("ОбщееИмя") Тогда
		Возврат КонтактноеЛицо;		
	КонецЕсли;
	
	ФИОКонтактногоЛица = Новый Массив;
	Если ЗначениеЗаполнено(Субъект.Фамилия) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Фамилия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Субъект.Имя) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Имя);
		
		Если ЗначениеЗаполнено(Субъект.Отчество) Тогда
			ФИОКонтактногоЛица.Добавить(Субъект.Отчество);
		КонецЕсли;	
	КонецЕсли;
	Если Не ФИОКонтактногоЛица.Количество() Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.ОбщееИмя);
	КонецЕсли;
	НаименованиеКонтактногоЛица = СтрСоединить(ФИОКонтактногоЛица, " ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И НЕ КонтактныеЛица.ПометкаУдаления
		|	И КонтактныеЛица.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Наименование", НаименованиеКонтактногоЛица);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// Добавляем новое контактное лицо
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Владелец = Контрагент;
		КонтактноеЛицо.Наименование = НаименованиеКонтактногоЛица;
		Субъект.Свойство("Должность", КонтактноеЛицо.Должность);
		КонтактноеЛицо.Комментарий = НСтр("ru = 'Создан при загрузке ЭД.'");
		КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
		КонтактноеЛицо.Записать();
		
		КонтактноеЛицо = КонтактноеЛицо.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо; 
		
	КонецЕсли;
			
	Возврат КонтактноеЛицо;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Знач Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Источник) 
			И Не (ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") 
					И ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Источник.Ссылка))
			И Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВерсииФайлов") 
					Или ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов")) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		ЗаполнитьПараметрыЭДПоСсылке(Источник, ПараметрыЭД, ФорматCML);
	Иначе
		ЗаполнитьПараметрыЭДПоОбъекту(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
		
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПолучитьОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ОснованиеОбъект) 
			И Не ТипЗнч(ОснованиеОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ОснованиеОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда 
		ВладелецОбъекта =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеОбъект.Владелец, "ВладелецФайла");
		ОснованиеОбъект = ВладелецОбъекта.ПолучитьОбъект();
	КонецЕсли;
	
	Описание.Вид = СтрШаблон(НСтр("ru = '%1'"), ОснованиеОбъект.ВидДокумента);
	Описание.Контрагент = ОснованиеОбъект.Контрагент;
	Описание.СуммаДокумента = ОснованиеОбъект.Сумма;
	Описание.Дата = 
		?(ЗначениеЗаполнено(ОснованиеОбъект.ДатаРегистрации), ОснованиеОбъект.ДатаРегистрации, ОснованиеОбъект.ДатаСоздания);
	Описание.Номер = 
		?(ЗначениеЗаполнено(ОснованиеОбъект.РегистрационныйНомер), ОснованиеОбъект.РегистрационныйНомер, ОснованиеОбъект.Код);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Описание.Организация = ОснованиеОбъект.Организация;
	Иначе
		Описание.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
		
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ПризнакФизЛица = Истина;
	КонецЕсли;

КонецПроцедуры

// Возвращает, возможно ли корректировка данного вида ЭД непосредственно, т.е. без создания отдельного документа.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокуметовЭДО - Вид документа, для которого необходимо выполнить проверку.
//
Функция ВидДокументаКорректируетсяНепосредственно(ВидДокумента) Экспорт
	
	МассивТиповДокументов = Новый Массив;
	
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ЗаказТовара);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КаталогТоваров);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПрайсЛист);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СчетНаОплату);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара);
	
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктВзаимозачета);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверки);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Ведомость);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ГарантийноеПисьмо);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Договор);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ДополнительноеСоглашение);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС11);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС2);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.КС3);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Отчет);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПлатежноеПоручение);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.ПриложениеКАкту);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Спецификация);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Уведомление);
	МассивТиповДокументов.Добавить(Перечисления.ТипыДокументовЭДО.Прочее);
	
	ТипДокументаВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
	
	Возврат (МассивТиповДокументов.Найти(ТипДокументаВида) <> Неопределено);
	
КонецФункции

Процедура ЗагрузитьОтветнуюПодписьВФайлДО(СообщениеОбъект, ОтветныеПодписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АктуальныеДокументыЭДО.ОбъектУчета КАК ВерсияФайла,
		|	ВнутренниеДокументы.Ссылка КАК Документ
		|ИЗ
		|	РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|				ПО Файлы.ВладелецФайла = ВнутренниеДокументы.Ссылка
		|			ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|		ПО АктуальныеДокументыЭДО.ОбъектУчета = ВерсииФайлов.Ссылка
		|ГДЕ
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СообщениеОбъект.ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписанныеДанные = Новый Массив;
		
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СообщениеОбъект.ЭлектронныйДокумент, "Контрагент");
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ВерсияФайла);
		Для Каждого СвойстваПодписи Из ОтветныеПодписи.ПодписиОсновныхДанных Цикл
			Если ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи) Тогда
				
				СвойстваПодписи.Вставить("УстановившийПодпись", Неопределено);
				СвойстваПодписи.Вставить("ПодписьВерна", Истина);
				
				Элемент = Новый Структура;
				Элемент.Вставить("ПодписанныйОбъект", Выборка.ВерсияФайла);
				Элемент.Вставить("СвойстваПодписи", СвойстваПодписи);
				Элемент.Вставить("Контрагент", Контрагент);
				ПодписанныеДанные.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнутренниеДокументы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Документ);
			Блокировка.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанные);
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				Для Каждого Элемент Из ПодписанныеДанные Цикл
					СтрокаКонтрагента = ДокументОбъект.Стороны.Найти(Элемент.Контрагент, "Сторона");
					Если Не СтрокаКонтрагента = Неопределено Тогда
						ПодписантОтКонтрагента = ОбменСКонтрагентамиДОСлужебный.НайтиДобавитьКонтактноеЛицоИзСертификата(
							Элемент.Контрагент, Элемент.СвойстваПодписи.Сертификат);
						ДатаПодписанияКонтрагентом = Элемент.СвойстваПодписи.ДатаПроверкиПодписи;
						
						СтрокаКонтрагента.Подписан = Истина;
						СтрокаКонтрагента.ДатаПодписи = ДатаПодписанияКонтрагентом;
						СтрокаКонтрагента.Подписал = ПодписантОтКонтрагента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			ДокументОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось прикрепить ответные подписи к документу ""%1"" (%2). Причина: %3'"), 
				Выборка.Документ, 
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение ТекстСообщения;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


// Выполняет необходимые действия после подписания документа.
//
// Параметры:
//	ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - Файл ЭД, который необходимо обработать.
//
Процедура ПослеПодписанияДокументаКонтрагентом(ФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодписанныеДанные = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайлаДокумента,
		|	ВЫРАЗИТЬ(СостоянияЭД.СсылкаНаОбъект КАК Справочник.ВерсииФайлов).Владелец.ВладелецФайла КАК Документ,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.ЭлектронныйДокумент
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &ФайлЭД");
	Запрос.УстановитьПараметр("ФайлЭД", ФайлЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() 
			Или Не ЗначениеЗаполнено(Выборка.ВерсияФайлаДокумента) Или Не ЗначениеЗаполнено(Выборка.Документ) Тогда
			
		Возврат;
	КонецЕсли;
	
	СоответствиеМассивовДО = Новый Соответствие;
	ПодписиДО = ПодготовитьМассивЭПКСравнению(
		ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ВерсияФайлаДокумента), СоответствиеМассивовДО);
	
	СоответствиеМассивовЭД = Новый Соответствие;
	ПодписиЭД = ПодготовитьМассивЭПКСравнению(
		ЭлектроннаяПодпись.УстановленныеПодписи(ФайлЭД), СоответствиеМассивовЭД);

	ПодписиДляДобавления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодписиЭД, ПодписиДО);
	
	Если Не ПодписиДляДобавления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавляемаяПодпись Из ПодписиДляДобавления Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Выборка.ВерсияФайлаДокумента);
		Элемент.Вставить("СвойстваПодписи", СоответствиеМассивовЭД[ДобавляемаяПодпись]);
		Элемент.Вставить("Контрагент", Выборка.Контрагент);
		ПодписанныеДанные.Добавить(Элемент);
	КонецЦикла;
		
	Если ПодписанныеДанные.Количество() Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
		
		Попытка			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнутренниеДокументы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Документ);
			Блокировка.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанные);	
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();			
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				Для Каждого Элемент Из ПодписанныеДанные Цикл
					СтрокаКонтрагента = ДокументОбъект.Стороны.Найти(Элемент.Контрагент, "Сторона");
					Если Не СтрокаКонтрагента = Неопределено Тогда
						ПодписантОтКонтрагента = ОбменСКонтрагентамиДОСлужебный.НайтиДобавитьКонтактноеЛицоИзСертификата(
							Элемент.Контрагент, Элемент.СвойстваПодписи.Сертификат);
						ДатаПодписанияКонтрагентом = Элемент.СвойстваПодписи.ДатаПодписи;				
						
						СтрокаКонтрагента.Подписан = Истина;
						СтрокаКонтрагента.ДатаПодписи = ДатаПодписанияКонтрагентом;
						СтрокаКонтрагента.Подписал = ПодписантОтКонтрагента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);					
			ДокументОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось прикрепить ответные подписи к документу ""%1"" (%2). Причина: %3'"), 
				Выборка.Документ, 
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение ТекстСообщения;				
		КонецПопытки;
	КонецЕсли;
			
КонецПроцедуры

// Возвращает необходимо ли добавить сообщение ЭДО в очередь приема
//
// Параметры:
//  СообщениеЭДО - ДокументОбъект.СообщенияЭДО - Сообщение, по которому необходимо провести проверку
// 
// Возвращаемое значение:
//  Булево - Истина - если необходимо добавить в очередь, Ложь - в противном случае
Функция НеобходимоДобавитьВОчередь(СообщениеЭДО) Экспорт
	
	ТипРегламента = СообщениеЭДО.ТипЭлементаРегламента;
	Статус = СообщениеЭДО.Статус;
	
	Если ТипРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И Статус = Перечисления.СтатусыСообщенийЭДО.Получен Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает массив видов внутренних документов для которых доступна отправка по ЭДО
// 
// Возвращаемое значение:
//   Массив из Справочкик.ВидыВнутреннихДокументов - Массив видов внутренних документов,
//                                                   для которых доступна отправка по ЭДО
Функция ВидыДокументовДляОтправкиПоЭДО() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	НЕ ВидыВнутреннихДокументов.ПометкаУдаления
		|	И ВидыВнутреннихДокументов.ВестиУчетСторон";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	
КонецФункции

// Проверяет, является ли выбранный внутренний документ документом аннулирования по ЭДО
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - проверяемый документ ДО.
//  ДанныеАннулирования - Структура из:
//      * Документ - В данное поле запишется аннулируемый документ ДО
//      * ЭД - В данное поле запишется аннулируемый ЭД
//      * ФайлЭДАннулирования - В данное поле запишется файл Предложения Об Аннулировании
//      * НаправлениеЭД - В данное поле запишется направление предложкния об аннулировании
//      * СостояниеЭДО - В данное поле запишется состояние Предложения Об Аннулировании
// 
// Возвращаемое значение:
//  Булево - Является ли переданный документ документом аннулирования ЭДО
// 
Функция ЭтоДокументАннулированияЭДО(Документ, ДанныеАннулирования = Неопределено) Экспорт
	
	// Аннулирование по ЭДО добавим позже
	Возврат Ложь;
	
КонецФункции

#Область ФормированиеПредставленияДокумента

Функция ЗапуститьФормированиеПредставленияФайлаДО(ДанныеДляВизуализации, ИдентификаторФормы, ПараметрыВизуализации) Экспорт
	
	Если ТипЗнч(ДанныеДляВизуализации) <> Тип("Структура") Тогда
		ОписаниеПроблемы = НСтр("ru = 'Переданы неверны данные для визуализации электронного документа.'");
		ВызватьИсключение ОписаниеПроблемы;
	КонецЕсли;
	
	Файл = Неопределено;
	ВерсияФайла = Неопределено;
	
	ДанныеДляВизуализации.Свойство("Файл", Файл);
	ДанныеДляВизуализации.Свойство("ВерсияФайла", ВерсияФайла);
	
	Если Не ЗначениеЗаполнено(Файл) И Не ЗначениеЗаполнено(ВерсияФайла) Тогда
		
		ОписаниеПроблемы = НСтр("ru = 'В данных для визуализации электронного документа нет ссылки на файл.'");
		ВызватьИсключение ОписаниеПроблемы;
		
	ИначеЕсли Не ЗначениеЗаполнено(Файл) Тогда
		
		Файл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияФайла, "Владелец");
		
	ИначеЕсли Не ЗначениеЗаполнено(ВерсияФайла) Тогда
		
		ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
		
	КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(Файл, ВерсияФайла);
	
	СведенияОФайле = ОбменСКонтрагентамиДОВызовСервера.СведенияОЭДИзФайла(
		ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	
	Если ТипЗнч(СведенияОФайле) <> Тип("Структура") Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не удалось получить сведения о электронном документе из файла.'");
		ВызватьИсключение ОписаниеПроблемы;
	КонецЕсли;
	
	ВидДокумента = СведенияОФайле.ВидДокументаЭДО;
	ДвоичныеДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	
	// Пока визуализируем без файла ответа. Добавим позже
	ДвоичныеДанныеФайлаОтвета = Неопределено;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения",
		ВидДокумента,  ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета, ПараметрыВизуализации);
	
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсЭДО

Процедура ЕстьЭДО(ДокументДО, Форма) Экспорт
	
	Форма.ЕстьЭДО = Ложь;
	Форма.ПодписанЭДО = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается
			И ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		ПараметрыЭДО = ОбменСКонтрагентамиДОВызовСервера.ПараметрыДокументаПоЭДО(ДокументДО);
		
		ЗаполнитьТаблицуСертификатов(ДокументДО, ПараметрыЭДО, Форма);
		
		Если ЗначениеЗаполнено(ПараметрыЭДО) Тогда
			Форма.ЕстьЭДО = Истина;
			
			Форма.ТипДокументаЭДО = ПараметрыЭДО.ТипДокументаЭДО;
			Форма.НаправлениеИсходящий = (ПараметрыЭДО.Направление = Перечисления.НаправленияЭДО.Исходящий);
			Форма.СостояниеПоЭДО = ПараметрыЭДО.СостояниеДО;
			Форма.ПодписанЭДО = ПараметрыЭДО.Подписан;
			Форма.ТребуетсяОтветнаяПодписьЭДО = ПараметрыЭДО.ТребуетсяПодтверждение;
			Форма.ДоступнаКорректировкаЭД = ПараметрыЭДО.ДоступнаКорректировкаЭД;
			
		КонецЕсли;
		
		Если Форма.ЕстьЭДО Тогда
			Форма.ТипДокументаЭДО =
				?(Не ЗначениеЗаполнено(Форма.ТипДокументаЭДО),
				Перечисления.ТипыДокументовЭДО.Прочее,
				Форма.ТипДокументаЭДО);
		КонецЕсли;
		
		// Аннулирование добавим позже
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьКомандЭДО(ДокументДО, Форма, ЭлементыДействий) Экспорт
	
	Для Каждого Элемент Из ЭлементыДействий Цикл
		УстановитьВидимостьДоступностьЭлементаПоДействию(Элемент.Ключ, ЭлементыДействий, Ложь, Ложь);
	КонецЦикла;
	
	Если Не Форма.ЕстьЭДО Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СинхронизацияЭДО.ЕстьПравоВыполненияОбмена() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ПараметрыДокументаПоЭДО(ДокументДО);
	
	Если ПараметрыПоЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.НаправлениеИсходящий Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПоЭДО.ЭлектронныйДокумент) Тогда
			ДействияДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
				ПараметрыПоЭДО.Состояние,
				ПараметрыПоЭДО.ЭлектронныйДокумент);
			
			Если ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.Утвердить)
				ИЛИ ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.Подписать) Тогда
				
				УстановитьВидимостьДоступностьЭлементаПоДействию(
					Перечисления.ДействияПоЭДО.Утвердить, ЭлементыДействий,
					Истина, Истина);
			КонецЕсли;
			
			Если ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.Отклонить)
				ИЛИ ЕстьДействиеВВозможных(ДействияДляДокумента, Перечисления.ДействияПоЭДО.ОтклонитьПодписание) Тогда
				
				УстановитьВидимостьДоступностьЭлементаПоДействию(
					Перечисления.ДействияПоЭДО.Отклонить, ЭлементыДействий,
					Истина, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СостояниеДО = ПараметрыПоЭДО.СостояниеДО;
		
		Если Не Форма.ПодписанЭДО И СостояниеДО <> Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
			
			УстановитьВидимостьДоступностьЭлементаПоДействию(
				Перечисления.ДействияПоЭДО.Сформировать, ЭлементыДействий,
				Истина, Истина);
			
		КонецЕсли;
		
		Если СостояниеДО = Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи Тогда
			УстановитьВидимостьДоступностьЭлементаПоДействию(
				Перечисления.ДействияПоЭДО.ВернутьВРаботу, ЭлементыДействий,
				Истина, Истина);
			УстановитьВидимостьДоступностьЭлементаПоДействию(
				Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, ЭлементыДействий,
				Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыЭДПоСсылке(Знач Источник, ПараметрыЭД, ФорматCML = Ложь)
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВерсииФайлов") Тогда 
		Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Владелец.ВладелецФайла");
	КонецЕсли;
	
	ВариантыФормированияУниверсальныхДокументов = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов();
	
	ПараметрыЭД.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Контрагент");
	
	ПараметрыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ВидДокумента, Организация");	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ПараметрыЭД.Организация = ПараметрыИсточника.Организация;
	Иначе
		ПараметрыЭД.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	ТипВходящегоЭД = ТипВходящегоЭД(Источник);
	
	Если ТипВходящегоЭД <> Неопределено Тогда
		
		ПараметрыЭД.Тип = ТипВходящегоЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Входящий;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		ПараметрыЭД.Организация,
		ПараметрыЭД.Контрагент, 
		ПараметрыИсточника.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		ТипДокумента = Неопределено;
		Если ТипЗнч(НастройкиОтправки) <> Тип("Структура") Тогда
			ТипДокумента = Неопределено;
		Иначе
			НастройкиОтправки.Свойство("ТипДокумента", ТипДокумента);
			Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
				ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.Тип = ТипДокумента;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Исходящий;
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Обязательно;
			
		Иначе
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Запрещено;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЭДПоОбъекту(Знач Источник, ПараметрыЭД, ФорматCML = Ложь)
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда 
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Владелец, "ВладелецФайла");		
		Если ЗначениеЗаполнено(ВладелецФайла)
			И ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			ЗаполнитьПараметрыЭДПоСсылке(ВладелецФайла, ПараметрыЭД, ФорматCML);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыФормированияУниверсальныхДокументов = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов();
	
	ПараметрыЭД.Контрагент = Источник.Контрагент;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ПараметрыЭД.Организация = Источник.Организация;
	Иначе
		ПараметрыЭД.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	ТипВходящегоЭД = ТипВходящегоЭД(Источник.Ссылка);
	
	Если ТипВходящегоЭД <> Неопределено Тогда
		
		ПараметрыЭД.Тип = ТипВходящегоЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Входящий;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		ПараметрыЭД.Организация,
		ПараметрыЭД.Контрагент, 
		Источник.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		ТипДокумента = Неопределено;
		Если ТипЗнч(НастройкиОтправки) <> Тип("Структура") Тогда
			ТипДокумента = Неопределено;
		Иначе
			НастройкиОтправки.Свойство("ТипДокумента", ТипДокумента);
			Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
				ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.Тип = ТипДокумента;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.Направление        = Перечисления.НаправленияЭДО.Исходящий;
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Обязательно;
			
		Иначе
			
			ПараметрыЭД.ФормированиеУниверсальногоДокумента = 
				ВариантыФормированияУниверсальныхДокументов.Запрещено;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьМассивЭПКСравнению(МассивЭП, СоответствиеМассивов)
	
	МассивДляСравнения = Новый Массив;
	
	Для Каждого Элемент Из МассивЭП Цикл
		СоответствиеМассивов.Вставить(Элемент.Подпись, Элемент);
		МассивДляСравнения.Добавить(Элемент.Подпись);
	КонецЦикла;
	
	Возврат МассивДляСравнения;
	
КонецФункции

// Возвращает вид входящего электронного документа, связанного с текущим документом ДО
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы - Внутренний документ ДО
//              для которого необходимо определить вид входящего ЭД
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыДокументовЭДО - Вид входящего ЭД, если таковой имеется,
//       Неопределено - если входящих ЭД по документу нет.
Функция ТипВходящегоЭД(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|			ПО АктуальныеДокументыЭДО.ВидЭлектронногоДокумента = ВидыДокументовЭДО.Ссылка
		|		ПО ФайлыДокумента.ТекущаяВерсия = АктуальныеДокументыЭДО.ОбъектУчета
		|ГДЕ
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТипДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляСинхронизацииСостояния(Источник)
	
	ОбъектыУчета = Источник.ВыгрузитьКолонку("СсылкаНаОбъект");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК ДокументДО,
		|	АктуальныеДокументыЭДО.ОбъектУчета КАК ВерсияФайла,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА АктуальныеДокументыЭДО.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)
		|	КОНЕЦ КАК Направление,
		|	СостояниеДокументовПоЭДО.СостояниеВерсииДокументаПоЭДО КАК СостояниеЗаписанное,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО КАК СостояниеДокументовПоЭДО
		|			ПО Файлы.ВладелецФайла = СостояниеДокументовПоЭДО.ДокументДО
		|		ПО АктуальныеДокументыЭДО.ОбъектУчета = Файлы.ТекущаяВерсия
		|ГДЕ
		|	АктуальныеДокументыЭДО.ОбъектУчета В(&ОбъектыУчета)";
	
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДляСинхронизации = Новый Массив;
	
	Для Каждого Запись Из Источник.ЭтотОбъект Цикл
		СтруктураПоиска = Новый Структура("ВерсияФайла", Запись.СсылкаНаОбъект);
		
		Выборка.НайтиСледующий(СтруктураПоиска);
		
		Если Не ЗначениеЗаполнено(Выборка.ДокументДО)
			Или ТипЗнч(Выборка.ДокументДО) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ДанныеСостояния = Новый Структура;
		ДанныеСостояния.Вставить("ДокументДО", Выборка.ДокументДО);
		ДанныеСостояния.Вставить("Контрагент", Выборка.Контрагент);
		ДанныеСостояния.Вставить("Направление", Выборка.Направление);
		ДанныеСостояния.Вставить("СостояниеЭДО", Запись.СостояниеЭДО);
		ДанныеСостояния.Вставить("СостояниеЗаписанное", Выборка.СостояниеЗаписанное);
		ДанныеСостояния.Вставить("ТребуетсяПодтверждение", Выборка.ТребуетсяПодтверждение);
		
		ДанныеДляСинхронизации.Добавить(ДанныеСостояния);
		
	КонецЦикла;
	
	Возврат ДанныеДляСинхронизации;
	
КонецФункции

Функция ЭтоНоваяПодпись(УстановленныеПодписи, СвойстваПодписи)
	
	Если НЕ ЗначениеЗаполнено(УстановленныеПодписи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СвойстваУстановленнойПодписи Из УстановленныеПодписи Цикл
		Если СвойстваУстановленнойПодписи.Подпись = СвойстваПодписи.Подпись Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область ИнтерфейсЭДО

Процедура УстановитьВидимостьДоступностьЭлементаПоДействию(Действие, ЭлементыДействий, Видимость, Доступность)
	
	ЭлементыДляДействия = ЭлементыДействий.Получить(Действие);
	
	Если ЭлементыДляДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементыДляДействия) <> Тип("Массив") Тогда
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементыДляДействия);
	Иначе
		МассивЭлементов = ЭлементыДляДействия;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Элемент.Видимость = Видимость;
		Элемент.Доступность = Доступность;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДействиеВВозможных(ВозможныеДействия, Действие)
	
	Возврат ВозможныеДействия.Получить(Действие) <> Неопределено;
	
КонецФункции

#Область РаботаСТаблицейСертификатовЭДО

Процедура ЗаполнитьТаблицуСертификатов(ДокументДО, ПараметрыЭДО, Форма)
	
	ЗаполнитьДоступностьСертификатовПоЭДО(ДокументДО, ПараметрыЭДО, Форма);
	
	ЗаполнитьДоступностьСертификатовНаСервере(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьДоступностьСертификатовПоЭДО(ДокументДО, ПараметрыЭДО, Форма)
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенДляЭДО = Ложь;
	КонецЦикла;
	
	Если ПараметрыЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДУчетнойЗаписи = Неопределено;
	
	Если ПараметрыЭДО.ЕстьЭД И ЗначениеЗаполнено(ПараметрыЭДО.ЭлектронныйДокумент) Тогда
		
		ИДУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыЭДО.ЭлектронныйДокумент, "ИдентификаторОрганизации");
		
	Иначе
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументДО, "Организация, Контрагент");
		
		ВидДокументаПрочее = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.Прочее);
		
		ВидДокументаЭДО = ?(ЗначениеЗаполнено(ПараметрыЭДО.ВидДокументаЭДО),
			ПараметрыЭДО.ВидДокументаЭДО,
			ВидДокументаПрочее);
		
		КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправки.Отправитель = РеквизитыДокумента.Организация;
		КлючНастроекОтправки.Получатель = РеквизитыДокумента.Контрагент;
		КлючНастроекОтправки.ВидДокумента = ВидДокументаЭДО;
		
		НастройкаОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);
		
		Если НастройкаОтправки <> Неопределено Тогда
			ИДУчетнойЗаписи = НастройкаОтправки.ИдентификаторОтправителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИДУчетнойЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСертификатов = ВыборкаСертификатовПоУчетнойЗаписи(ИДУчетнойЗаписи);
	
	Пока ВыборкаСертификатов.Следующий() Цикл
		
		ОтборСертификата = Новый Структура("Отпечаток", ВыборкаСертификатов.Отпечаток);
		СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
		
		Если СтрокиСуществующие.Количество() = 0 Тогда
			
			НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
			НоваяСтрока.Отпечаток = ВыборкаСертификатов.Отпечаток;
			НоваяСтрока.ДоступенДляЭДО = Истина;
			
		Иначе
			
			Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
				СтрокаСуществующая.ДоступенДляЭДО = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаСертификатовПоУчетнойЗаписи(ИДУчетнойЗаписи)
	
	ОтборСертификатов = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	ОтборСертификатов.УчетныеЗаписи = "&Идентификаторы";
	ОтборСертификатов.ТолькоДействительные = Истина;
	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей(
		"СертификатыУчетныхЗаписей", ОтборСертификатов));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СертификатыУчетныхЗаписей.Сертификат КАК Сертификат,
		|	СертификатыУчетныхЗаписей.Сертификат.Отпечаток КАК Отпечаток
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Идентификаторы", ИДУчетнойЗаписи);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура ЗаполнитьДоступностьСертификатовНаСервере(Форма)
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенНаСервере = Ложь;
	КонецЦикла;
	
	Если Не ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатов", Ложь);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСертификатовКриптографии = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	ВсеСертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе();
	
	Для Каждого Сертификат Из ВсеСертификаты Цикл
		
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		
		ОтборСертификата = Новый Структура("Отпечаток", Отпечаток);
		СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
		
		Если СтрокиСуществующие.Количество() = 0 Тогда
			
			НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
			НоваяСтрока.Отпечаток = Отпечаток;
			НоваяСтрока.ДоступенНаСервере = Истина;
			
		Иначе
			
			Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
				СтрокаСуществующая.ДоступенНаСервере = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
