//@strict-types

#Область СлужебныеПроцедурыИФункции

// Возвращает параметры просмотра электронного документа.
// 
// Параметры:
// 	ОбъектУчета - Структура - параметры объекта учета.
// Возвращаемое значение:
// 	см. ЭлектронныеДокументыЭДОСлужебный.ПараметрыПросмотраЭлектронногоДокументаОбъектаУчета
Функция ПараметрыПросмотраЭлектронногоДокументаОбъектаУчета(Знач ОбъектУчета, ДополнительныеДанные = Неопределено) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаОбъектаУчета(ОбъектУчета, ДополнительныеДанные);
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
// 	ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
// 	НастройкиОтправки - см. НастройкиЭДО.НастройкиОтправки
// 	ДополнительныеДанные - Произвольные - Дополнительные данные документа.
// Возвращаемое значение:
// 	см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра
Функция ПодготовитьДанныеДляПросмотра(Знач ОбъектУчета, Знач НастройкиОтправки, ДополнительныеДанные = Неопределено) Экспорт
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	Возврат ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, НастройкиОтправки, ДополнительныеДанные);
	
КонецФункции

// Возвращает параметры открытия страницы опроса.
// 
// Возвращаемое значение:
//  Строка - параметры открытия страницы опроса.
//
Функция ПараметрыОткрытияСтраницыОпроса() Экспорт

	ШаблонКонфигурации = НСтр("ru = '%1 (%2)'");
	Конфигурация = СтрШаблон(ШаблонКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	
	СтрокаВозврата = "?conf=" + КодироватьСтроку(Конфигурация, СпособКодированияСтроки.КодировкаURL);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации <> Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата + "&login="
			+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	
	Возврат СтрокаВозврата;

КонецФункции

Функция ЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	Возврат ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение, "ЭлектронныйДокумент").ЭлектронныйДокумент;
КонецФункции	

Функция ЕстьПравоЧтенияДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
КонецФункции

Функция ЕстьПравоОбработкиДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
КонецФункции

Функция ЕстьПравоНастройкиОбмена() Экспорт
	Возврат НастройкиЭДО.ЕстьПравоНастройкиОбмена();
КонецФункции

Функция ОтложеннаяОтправкаЭлектронныхДокументов() Экспорт
	Возврат НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
КонецФункции

Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(ВидДокумента);
КонецФункции

Процедура ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент);
КонецПроцедуры

Процедура ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий) Экспорт
	ИнтеграцияЭДО.ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий);	
КонецПроцедуры

Функция ИспользуетсяЭДОИВнутреннийЭДО() Экспорт	
	Возврат НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() И НастройкиЭДО.ИспользуютсяВнутренниеДокументы();	
КонецФункции

Функция СообщениеОтправителя(ЭлектронныйДокумент) Экспорт
	Возврат ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
КонецФункции

Функция КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета) Экспорт	
	Возврат ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);	
КонецФункции

Функция НастройкиОтправки(КлючНастроекОтправки) Экспорт	
	Возврат НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);	
КонецФункции

Функция СостояниеОбъектаУчетаУстановлено(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.СостояниеОбъектаУчетаУстановлено(ОбъектУчета);	
КонецФункции


#Область ФормаСтатусовЭлектронныхДокументов

Функция ПараметрыПросмотраСтатусовЭлектронныхДокументов(ПараметрыОбъектовУчета) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПросмотраСтатусовЭлектронныхДокументов(ПараметрыОбъектовУчета);
	
КонецФункции

Функция СтатусыЭлектронныхДокументовОбъектаУчета(ПараметрыОбъектовУчета) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.СтатусыЭлектронныхДокументовОбъектаУчета(ПараметрыОбъектовУчета);
	
КонецФункции

#КонецОбласти

#Область Переформирование

Функция ПараметрыПереформированияДокумента(Сообщение) Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента(Сообщение);
КонецФункции

Функция ПереформироватьДокумент(Параметры, КонтекстДиагностики) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(Параметры.ЭлектронныйДокумент);
	
		Если Параметры.ТребуетсяФормированиеДокумента = Истина Тогда
			НаборДействий = Новый Соответствие;
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	
			ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
			ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
			ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета.Добавить(Параметры.ОбъектУчета);
			
			Если Параметры.Свойство("Настройки") Тогда
				ПараметрыВыполненияДействийПоЭДО.НастройкиОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.Настройки);
			КонецЕсли;
				
			Если Параметры.Свойство("ДопДанные") Тогда
				ПараметрыВыполненияДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.ДопДанные);
			КонецЕсли;
			
			Результат = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);
	
			Если ЗначениеЗаполнено(Результат.ОшибкиФормирования) Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
	
				АктуальныйЭлектронныйДокумент = ИнтеграцияЭДО.АктуальныйЭлектронныйДокументОбъектаУчета(
						Параметры.ОбъектУчета, Параметры.ВидСообщения);
	
				ЭлектронныеДокументыЭДО.ДобавитьДокументВПакет(Параметры.ИдентификаторПакета,
					АктуальныйЭлектронныйДокумент, КонтекстДиагностики);
	
			КонецЕсли;		
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
			ЭлектронныеДокументыЭДО.УдалитьДокументИзПакета(Параметры.ИдентификаторПакета, Параметры.ЭлектронныйДокумент);
		КонецЕсли;
	
		Если Параметры.Свойство("ДопДанные") Тогда
			Параметры.ПараметрыДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.ДопДанные);
		КонецЕсли;
		
		Если Параметры.Свойство("Комментарий") Тогда
			ПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
			ПараметрыДействия.Комментарий = Параметры.Комментарий;
			Для Каждого Действие Из Параметры.ПараметрыДействийПоЭДО.НаборДействий Цикл
				Параметры.ПараметрыДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
					Действие.Ключ, ПараметрыДействия);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыДействийПоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ПараметрыДействийПоЭДО);
		Результат = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыДействийПоЭДО, КонтекстДиагностики);	
		
		Если ЗначениеЗаполнено(Результат.ОшибкиФормирования) Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение);
КонецФункции

Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПредставлениеСообщения(Сообщение, СообщениеОтвета);
	
КонецФункции

Функция ПредставлениеДокумента(ЭлектронныйДокумент) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
	
КонецФункции

Функция ВыполнитьДействияПоЭДО(Параметры, КонтекстДиагностики = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(Параметры, КонтекстДиагностики);
	
КонецФункции

#КонецОбласти

#Область РаботаСПакетами

Процедура УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	ЭлектронныеДокументыЭДО.УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);

КонецПроцедуры	
	
Функция ДобавитьДокументВПакет(ИдентификаторПакета, Документ, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда	
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыЭДО.ДобавитьДокументВПакет(ИдентификаторПакета, Документ, КонтекстДиагностики);
		
КонецФункции	

Функция СоздатьПакетДокументов(ДокументыПакета, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда	
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыЭДО.СоздатьПакетДокументов(ДокументыПакета, КонтекстДиагностики);
	
КонецФункции

Функция ДокументыПакета(ИдентификаторПакета) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ДокументыПакета(ИдентификаторПакета);
	
КонецФункции

Функция СоздатьПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла) Экспорт
		
	Если ПараметрыФормирования.Свойство("Номер") И 
		ПараметрыФормирования.Свойство("Дата") И
		ПараметрыФормирования.Свойство("Сумма") И
		(ЗначениеЗаполнено(ПараметрыФормирования.Номер)
		Или ЗначениеЗаполнено(ПараметрыФормирования.Дата)
		Или ЗначениеЗаполнено(ПараметрыФормирования.Сумма)) Тогда
			
		Содержание = ЭлектронныеДокументыЭДО.НовоеСодержаниеСообщения();	
		Содержание.НомерДокумента = ПараметрыФормирования.Номер;
		Содержание.ДатаДокумента = ПараметрыФормирования.Дата;
		Содержание.СуммаДокумента = ПараметрыФормирования.Сумма;
		Содержание.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;		
		
		ПараметрыФормирования.Вставить("СодержаниеДокумента", Содержание);
		
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыЭДО.СоздатьПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла);
	
КонецФункции	
	
#КонецОбласти

Функция ДоступныеКомандыПечатиОбъекта(Объект) Экспорт
	
	Команды =  ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(Объект.Метаданные());
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Команды);
	
КонецФункции

Функция ПечатныеФормыДокументов(КомандаПечатиВФайл, ОбъектУчета, ТипФайлаТабличногоДокумента) Экспорт
	
	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента);
	
	РезультатПечати = УправлениеПечатью.НапечататьВФайл(КомандаПечатиВФайл, МассивОбъектовУчета, НастройкиСохранения);
	Если Не ЗначениеЗаполнено(РезультатПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатПечати);
	
КонецФункции

Функция КомандаПечатиОбъекта(Объект, Идентификатор) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.КомандаПечатиОбъекта(Объект, Идентификатор)
	
КонецФункции

Функция НайтиСоздатьВидВнутреннегоДокумента(Объект, Команда) Экспорт
	
	Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект)); 
	Возврат ЭлектронныеДокументыЭДО.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);
				
КонецФункции

Функция СуществуюНастройкиВнутреннегоЭДО(Организация, ВидДокумента) Экспорт
	Возврат ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО(Организация, ВидДокумента);	
КонецФункции

Функция ЕстьАктуальныеЭлектронныеДокументы(ОбъектыУчета, ВидВнутреннегоДокумента) Экспорт
	
	АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ОбъектыУчета);					
	Возврат ЗначениеЗаполнено(АктуальныеЭлектронныеДокументы.Найти(ВидВнутреннегоДокумента, "ВидДокумента"));
	
КонецФункции

Функция ОписаниеФайловДокументаПакета(ОписаниеФайла) Экспорт
	
	ДанныеПакета = Новый Структура;
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатРаспаковки = СинхронизацияЭДО.РаспаковатьФайлТранспортногоКонтейнера(ОписаниеФайла,
		КонтекстДиагностики);
		
	ДанныеФайлаКартинок = РезультатРаспаковки.Картинки;
	ДанныеПакета.Вставить("ДанныеФайлаКартинок", ДанныеФайлаКартинок);
	
	Для Каждого Документ Из РезультатРаспаковки.Метаданные.Документы Цикл
		ДанныеОсновногоФайла = Документ.ОписаниеДанных;
		ДанныеФайлаДопДанных = Документ.ОписаниеДополнительныхДанных;
	КонецЦикла;
	
	ДанныеПакета.Вставить("ДанныеОсновногоФайла", ДанныеОсновногоФайла);
	ДанныеПакета.Вставить("ДанныеФайлаДопДанных", ДанныеФайлаДопДанных);
	
	Возврат ДанныеПакета;
	
КонецФункции

Функция КонтрагентыДляОтправкиПриглашений(МассивСсылокНаОбъекты) Экспорт
	
	Если ИнтеграцияЭДО.ЭтоКонтрагент(МассивСсылокНаОбъекты[0]) Тогда
		
		Возврат МассивСсылокНаОбъекты;
		
	Иначе
		
		СоответствиеКонтрагентов = ИнтеграцияЭДО.СвязанныеКонтрагенты(МассивСсылокНаОбъекты);
		
		МассивКонтрагентов = Новый Массив;
		
		Для Каждого СтрокаСоответствия Из СоответствиеКонтрагентов Цикл
			МассивКонтрагентов.Добавить(СтрокаСоответствия.Значение);
		КонецЦикла;
		
		Возврат МассивКонтрагентов;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти