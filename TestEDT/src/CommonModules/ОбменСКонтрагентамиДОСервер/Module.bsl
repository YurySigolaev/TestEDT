
// Обработчик регламентного задания.
// Формирует документы 1С:Документооборот из входящих электронных документов и исходящие электронные 
// документы из документов 1С:Документооборот
Процедура СформироватьОбъекты1СДокументооборотИЭДО() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПоддержкаЭДО, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка по ЭДО будет добавлена позже
	
	// Формирование документов 1С:Документооборот на основании ЭД.
	СформироватьДокументыДОНаОснованииВходящихЭД();
	
КонецПроцедуры

Функция ПолучитьОписаниеСостоянияЭДО(ДокументДО, ЭтоАннулирование = Ложь, ВнешниеДанныеСостоянияЭДО = Неопределено) Экспорт
	
	ОписаниеСостоянияЭДО = Новый Структура(
		"СостояниеСНашейСтороны, СостояниеСоСтороныКонтрагента, ДатаУстановкиСостояния,
		|СостояниеСНашейСтороныЦвет, СостояниеСоСтороныКонтрагентаЦвет", 
		"", "", Дата(1, 1, 1), "", "");
	
	Если ВнешниеДанныеСостоянияЭДО = Неопределено Тогда
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ДокументДО);
	Иначе
		ДанныеСостоянияЭДО = ВнешниеДанныеСостоянияЭДО;
	КонецЕсли;
	
	СостояниеЭДО = ДанныеСостоянияЭДО.Состояние;
	Направление = ?(Не ЗначениеЗаполнено(ДанныеСостоянияЭДО.Направление), 
		Перечисления.НаправленияЭДО.Исходящий, 
		ДанныеСостоянияЭДО.Направление);
		
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если Не ЗначениеЗаполнено(СостояниеЭДО) Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Подписан Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяОтправка Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается отправка'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Отправлен Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Отправлен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается результат проверки'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли Перечисления.СостоянияВерсийЭДДО.ИсходящийОтклоненКонтрагентом(СостояниеЭДО) Тогда
			
			Если ЭтоАннулирование Тогда
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Отказано в аннулировании'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			Иначе
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Требуется корректировка'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается корректировка'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			КонецЕсли;
			
		ИначеЕсли Перечисления.СостоянияВерсийЭДДО.ОбменВыполненУспешно(СостояниеЭДО) Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Закрыт принудительно'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ошибка отправки документа'");
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороныЦвет = "b22222";
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяПодтверждениеАннулирования Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяАннулировать Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Аннулирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СостояниеЭДО) 
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Получен
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаПодписи
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаУтверждении Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Требуется проверка'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытСОтклонением
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяУточнение
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяИсправление Тогда
			
			Если ЭтоАннулирование Тогда
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Отказано в аннулировании'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			Иначе
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается исправление'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Требуется исправление'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			КонецЕсли;
			
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Подписан
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Отправлен Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли Перечисления.СостоянияВерсийЭДДО.ОбменВыполненУспешно(СостояниеЭДО) Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Закрыт принудительно'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ошибка приема документа'");
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороныЦвет = "b22222";
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяПодтверждениеАннулирования Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяАннулировать Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Аннулирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеСостоянияЭДО;
	
КонецФункции

#Область РассылкаУведомленийОПроблемахЭДО

// Обработчик регламентного задания РассылкаУведомленийОПроблемахЭДО.
// Создает уведомления по ошибкам обмена ЭДО, записанным в регистр "ОшибкиЭДОКИсправлению"
Процедура ОтправитьУведомленияОПроблемахЭДО() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаУведомленийОПроблемахЭДО, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РазослатьОзнакомленияОПроблемах(
		РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ОтправкаПоЭДО),
		Ложь);
	РазослатьОзнакомленияОПроблемах(
		РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ПриемПоЭДО),
		Истина);
	
КонецПроцедуры

// Создает уведомления о проблемах обмена ЭДО и ставит в очередь к рассылке указанным получателям
// 
// Параметры:
//  МассивПолучателей - Массив из Пользователь - Массив пользователей, которые должны получить сообщения о проблеме
//  ЭтоПроблемыПриема - Булево - Указывает, рассылаются ли уведомления о проблемах приема документов, либо о проблемах отправки.
//                    Истина - Рассылать уведомления о проблемах приема документов по ЭДО
//                    Ложь - Рассылать уведомления о проблемах отправки документов по ЭДО
// 
Процедура РазослатьОзнакомленияОПроблемах(МассивПолучателей, ЭтоПроблемыПриема)
	
	Если МассивПолучателей.Количество() = 0 Тогда
		Если ЭтоПроблемыПриема Тогда
			ОписаниеСообщения =
				НСтр("ru = 'Рассылка уведомлений о проблемах приема по ЭДО не проводилась, поскольку нет получателей.'");
		Иначе
			ОписаниеСообщения =
				НСтр("ru = 'Рассылка уведомлений о проблемах отправки по ЭДО не проводилась, поскольку нет получателей.'");
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОтправкиУведомленийЭДО(),
			УровеньЖурналаРегистрации.Информация, , ,
			ОписаниеСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоПроблемыПриема Тогда
		ОписаниеСообщения =
			НСтр("ru = 'Начало рассылки уведомлений о проблемах приема документов по ЭДО'");
	Иначе
		ОписаниеСообщения =
			НСтр("ru = 'Начало рассылки уведомлений о проблемах отправки документов по ЭДО'");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОтправкиУведомленийЭДО(),
		УровеньЖурналаРегистрации.Информация, , ,
		ОписаниеСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОшибкиЭДОКИсправлению.ПредметОшибки КАК ПредметОшибки,
		|	ОшибкиЭДОКИсправлению.ОписаниеПроблемы КАК ОписаниеПроблемы,
		|	ВЫБОР
		|		КОГДА ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Справочник.ВнутренниеДокументы
		|			ТОГДА "" (Внутренний документ)""
		|		КОГДА ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО
		|			ТОГДА "" (Входящий электронный документ)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТипПредметаОшибки
		|ИЗ
		|	РегистрСведений.ОшибкиЭДОКИсправлению КАК ОшибкиЭДОКИсправлению
		|ГДЕ
		|	НЕ ОшибкиЭДОКИсправлению.УведомлениеОтправлено
		|	И %УсловиеОперации%";
	
	Если ЭтоПроблемыПриема Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"%УсловиеОперации%",
			"ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"%УсловиеОперации%",
			"ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Справочник.ВнутренниеДокументы");
	КонецЕсли;
	
	СозданоУведомлений = 0;
	
	ВыборкаНегруппируемых = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНегруппируемых.Следующий() Цикл
		
		СозданоУведомлений = СозданоУведомлений + 1;
		
		СтрокиОписания = Новый Массив;
		
		Если ЭтоПроблемыПриема Тогда
			СтрокиОписания.Добавить(НСтр("ru ='При приеме по ЭДО документа произошли ошибки'"));
		Иначе
			СтрокиОписания.Добавить(НСтр("ru ='При отправке по ЭДО документа произошли ошибки'"));
		КонецЕсли;
		
		СтрокиОписания.Добавить(
			СтрШаблон(НСтр("ru = 'Предмет ошибки: %1%2.'"),
				РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ВыборкаНегруппируемых.ПредметОшибки),
				ВыборкаНегруппируемых.ТипПредметаОшибки));
		
		СтрокиОписания.Добавить(Символы.ПС);
		
		СтрокиОписания.Добавить(ВыборкаНегруппируемых.ОписаниеПроблемы);
		
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.ОшибкиЭДОКИсправлению.УстановитьОтправленностьУведомления(
				ВыборкаНегруппируемых.ПредметОшибки);
			
			Для Каждого Получатель Из МассивПолучателей Цикл
				РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
					СтрСоединить(СтрокиОписания, Символы.ПС),
					Получатель,
					ВыборкаНегруппируемых.ПредметОшибки);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			СозданоУведомлений = СозданоУведомлений - 1;
			
			Если ЭтоПроблемыПриема Тогда
				ОписаниеПроблемы = СтрШаблон(
					НСтр("ru = 'При отправке уведомления о ошибке приема ЭДО документа %1 возникли ошибки'"),
						ВыборкаНегруппируемых.ПредметОшибки)
					+ Символы.ПС + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Иначе
				ОписаниеПроблемы = СтрШаблон(
					НСтр("ru = 'При отправке уведомления о ошибке отправки ЭДО документа %1 возникли ошибки'"),
						ВыборкаНегруппируемых.ПредметОшибки)
					+ Символы.ПС + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОтправкиУведомленийЭДО(),
				УровеньЖурналаРегистрации.Ошибка, ,
				ВыборкаНегруппируемых.ПредметОшибки,
				ОписаниеПроблемы);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЭтоПроблемыПриема Тогда
		ОписаниеРезультата =
			СтрШаблон(
				НСтр("ru = 'Завершена рассылка уведомлений о проблемах при приеме документов по ЭДО.'")
					+ Символы.ПС
					+ НСтр("ru = 'Создано %1 уведомлений.'"),
				СозданоУведомлений);
	Иначе
		ОписаниеРезультата =
			СтрШаблон(
				НСтр("ru = 'Завершена рассылка уведомлений о проблемах при отправке документов по ЭДО.'")
					+ Символы.ПС
					+ НСтр("ru = 'Создано %1 уведомлений.'"),
				СозданоУведомлений);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОтправкиУведомленийЭДО(),
		УровеньЖурналаРегистрации.Информация, , ,
		ОписаниеРезультата);
КонецПроцедуры

#КонецОбласти

#Область ПостановкаДокумента1СДокументооборотВОчередьНаОтправку

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ,
			КонтрагентыГотовыеКЭДО = Неопределено,
			НаправлениеЭД = Неопределено,
			ПроверятьПодписанДокумент = Истина,
			УстановитьСостояниеПодписан = Ложь,
			ВыводитьСообщение = Истина) Экспорт
	
	Если КонтрагентыГотовыеКЭДО = Неопределено Тогда
		Если Не ДокументГотовКФормированиюЭД(
				Документ, 
				ВыводитьСообщение, 
				КонтрагентыГотовыеКЭДО, 
				ПроверятьПодписанДокумент,
				НаправлениеЭД) Тогда
				
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КонтрагентыГотовыеКЭДО) Тогда
		Для Каждого КонтрагентГотовыйКЭДО Из КонтрагентыГотовыеКЭДО Цикл
			Если УстановитьСостояниеПодписан Тогда
				ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
					Документ, 
					КонтрагентГотовыйКЭДО,
					Перечисления.СостоянияВерсийЭДДО.Подписан,
					НаправлениеЭД);
			КонецЕсли;
						
			ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
				Документ, 
				КонтрагентГотовыйКЭДО,
				Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку,
				НаправлениеЭД);
		КонецЦикла; 
		
		Если НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
			РегистрыСведений.ОчередьОтправкиДокументовЭДО.ПоставитьВОчередь(Документ);
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ФормированиеДокументов1СДокументооборотНаОснованииОбъектовЭДО

// Создание документов ДО на основании входящих ЭД
//
// Параметры:
//  Параметры - Структура, Неопределено - Параметры создания документов ДО на основании входящих ЭД.
//      * ЭДДляОбработки - Массив - Содержит массив элементов типа СправочникСсылка.ЭДПрисоединенныеФайлы,
//                                  если передан, то обработаются только эти файлы ЭД.
//                                  Если не передан, то происходит обработка всей очереди.
//
// Возвращаемое значение:
//  Структура:
//      * КоличествоКСозданию - Число - Количество документов к созданию внутренних документов ДО
//      * КоличествоСоздано - Число - Количество документов, созданных в результате работы
//      * КоличествоСозданоСОшибками - Число - Количество документов, созданных с ошибками
//      * Ошибки - Массив из Строка - Массив строк описания ошибок, возникших в результате создания документов.
Функция СформироватьДокументыДОНаОснованииВходящихЭД(Параметры = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияКПриему = Неопределено;
	
	Если Параметры <> Неопределено Тогда
		Если Параметры.Свойство("ЭДДляОбработки") Тогда
			СообщенияКПриему = Параметры.ЭДДляОбработки;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСобытия = ИмяСобытияСозданияДокументовДОНаОснованииЭД();
	
	Комментарий = Нстр("ru = 'Начато создание документов 1С:Документооборот на основании ЭД.'");
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
		
	СозданоДокументов = 0;
	СозданоСОшибками = 0;
	КСозданиюДокументов = 0;
	Ошибки = Новый Массив;
	
	Выборка = ВыборкаВходящихСообщенийДляОбработки(СообщенияКПриему);
	
	КСозданиюДокументов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатСоздания = СоздатьДокументПоСообщениюЭДО(
			Выборка.СообщениеЭДО,
			Выборка.ЭлектронныйДокумент,
			Выборка.ОсновнойФайл);
		
		Если РезультатСоздания.Успех Тогда
			СозданоДокументов = СозданоДокументов + 1;
			
			Если РезультатСоздания.Ошибки.Количество() > 0 Тогда
				СозданоСОшибками = СозданоСОшибками + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатСоздания.Ошибки);
		
	КонецЦикла;
	
	Комментарий = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияДокументовДОПоВходящимЭД(
			КСозданиюДокументов,
			СозданоДокументов,
			СозданоСОшибками);
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	СтруктураВозврата.Вставить("КоличествоКСозданию", КСозданиюДокументов);
	СтруктураВозврата.Вставить("КоличествоСоздано", СозданоДокументов);
	СтруктураВозврата.Вставить("КоличествоСозданоСОшибками", СозданоСОшибками);
	СтруктураВозврата.Вставить("Ошибки", Ошибки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Создает документ 1С:Документооборот на основании сообщения ЭДО.
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО - Сообщение ЭДО к приему.
//  ВходящийЭД - ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электроннный документ.
//                         Если не указан, то будет выбран ЭД указанный в сообщении ЭДО.
//  ФайлЭД - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы - ссылка на файл электроннного документа.
//                         Если не указан, то будет обрабатываться основной файл сообщения.
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция создания документа
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание проблемы, возникшей при создании документа.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция СоздатьДокументПоСообщениюЭДО(СообщениеЭДО, ВходящийЭД = Неопределено, ФайлЭД = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	ПопыткаОбработки =
		РегистрыСведений.ОчередьПриемаСообщенийЭДО.ДобавитьПопыткуОбработки(СообщениеЭДО);
	
	РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(ВходящийЭД);
	
	ДанныеВыполненияОперации = НовыеДанныеСозданияДокументаДО(ВходящийЭД, СообщениеЭДО, ФайлЭД, ПопыткаОбработки);
	
	НачатьТранзакцию();
	Попытка
		
		РезультатПолученияДанных = ПолучитьДанныеДляСозданияДокументаДО(ДанныеВыполненияОперации);
		
		Если Не РезультатПолученияДанных.Успех Тогда
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.Ошибки,
				РезультатПолученияДанных.Ошибки);
			
			ОбработатьОшибкуСозданияДокументаДО(
				ДанныеВыполненияОперации,
				СтруктураВозврата.Ошибки);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтруктураВозврата.Ошибки,
			РезультатПолученияДанных.Ошибки);
		
		РезультатСоздания = СоздатьДокументДО(ДанныеВыполненияОперации);
		
		Если Не РезультатСоздания.Успех Тогда
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.Ошибки,
				РезультатСоздания.Ошибки);
			
			ОбработатьОшибкуСозданияДокументаДО(
				ДанныеВыполненияОперации,
				СтруктураВозврата.Ошибки);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтруктураВозврата.Ошибки,
			РезультатСоздания.Ошибки);
		
		РезультатВыполненияДопОпераций = ВыполнитьОперацииПослеСозданияДокументаДО(ДанныеВыполненияОперации);
		
		Если Не РезультатВыполненияДопОпераций.Успех Тогда
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.Ошибки,
				РезультатВыполненияДопОпераций.Ошибки);
			
			ОбработатьОшибкуСозданияДокументаДО(
				ДанныеВыполненияОперации,
				СтруктураВозврата.Ошибки);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтруктураВозврата.Ошибки,
			РезультатВыполненияДопОпераций.Ошибки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеПроблемы = Нстр("ru = 'При создании документа возникли ошибки:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		ОбработатьОшибкуСозданияДокументаДО(
			ДанныеВыполненияОперации,
			СтруктураВозврата.Ошибки);
		
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует структуру реквизитов документа 1С:Документооборот на основании электроннного документа
// и помещает ее в св-во "РеквизитыДокументаПоЭД" данных выполнения операции.
//
// Параметры:
//  ДанныеВыполненияОперации - Структура данных по выполнению операции создания документа ДО по входящему ЭД.
//      См. НовыеДанныеСозданияДокументаДО().
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание возникшей проблемы.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция ПолучитьДанныеДляСозданияДокументаДО(ДанныеВыполненияОперации)
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	Если Не ВозможноЗагрузитьСообщениеПоДанным(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РеквизитыДокумента = ИменаПередаваемыхРеквизитов();
	РеквизитыДокумента.Вставить("ТребуетсяПодтверждение");
	РеквизитыДокумента.Вставить("Файлы", Новый Массив);
	
	ДанныеВыполненияОперации.РеквизитыДокумента = РеквизитыДокумента;
	
	Если Не ПолучитьДанныеИзФайлаЭД(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ОпределитьПараметрыПоПравиламУчета(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗаполнитьРеквизитыДокумента(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗаполнитьСтроковыеПоляПоШаблону(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗаполнитьСтороныДокумента(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеРеквизитов(ДанныеВыполненияОперации, СтруктураВозврата.Ошибки) Тогда
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ВозможноЗагрузитьСообщениеПоДанным(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ВходящийЭД = ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД;
	СообщениеЭДО = ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО;
	ФайлЭД = ДанныеВыполненияОперации.ДанныеЭД.ФайлЭД;
	
	Если ТипЗнч(СообщениеЭДО) <> Тип("ДокументСсылка.СообщениеЭДО") Тогда
		
		ОписаниеПроблемы = Нстр("ru = 'Попытка загрузки сообщения ЭДО неизвестного типа.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		Ошибки.Добавить(Ошибка);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЭДО,
		"Направление, ЭлектронныйДокумент, ОсновнойФайл");
	
	Если РеквизитыСообщения.Направление <> Перечисления.НаправленияЭДО.Входящий Тогда
		
		ОписаниеПроблемы =
			Нстр("ru = 'Сообщение ЭДО не является входящим. Загрузка возможна только для входящих сообщений.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		Ошибки.Добавить(Ошибка);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВходящийЭД) Тогда
		
		ВходящийЭД = РеквизитыСообщения.ЭлектронныйДокумент;
		
		Если Не ЗначениеЗаполнено(ВходящийЭД) Тогда
			
			ОписаниеПроблемы =
				Нстр("ru = 'Сообщение не относится ни к одному электронному документу.'");
			
			Ошибка = Новый Структура;
			Ошибка.Вставить("Описание", ОписаниеПроблемы);
			Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
			Ошибка.Вставить("Критическая", Истина);
			
			Ошибки.Добавить(Ошибка);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД = ВходящийЭД;
		
	КонецЕсли;
	
	Если ТипЗнч(ВходящийЭД) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		ОписаниеПроблемы =
			Нстр("ru = 'Сообщение относится не к входящему документу.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		Ошибки.Добавить(Ошибка);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлЭД) Тогда
		
		ФайлЭД = РеквизитыСообщения.ОсновнойФайл;
		
		Если Не ЗначениеЗаполнено(ФайлЭД) Тогда
			
			ОписаниеПроблемы =
				Нстр("ru = 'К сообщению не привязан файл электронного документа'");
			
			Ошибка = Новый Структура;
			Ошибка.Вставить("Описание", ОписаниеПроблемы);
			Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
			Ошибка.Вставить("Критическая", Истина);
			
			Ошибки.Добавить(Ошибка);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ДанныеВыполненияОперации.ДанныеЭД.ФайлЭД = ФайлЭД;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеИзФайлаЭД(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ВходящийЭД = ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД;
	ФайлЭД = ДанныеВыполненияОперации.ДанныеЭД.ФайлЭД;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВходящийЭД,
		"ВидДокумента, Организация, Контрагент");
	РеквизитыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ФайлЭД,
		"ВладелецФайла, Наименование, Расширение");
	
	Попытка
		ДвоичныеДанныеФайлаЭД = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлЭД);
	Исключение
		
		ОписаниеПроблемы = Нстр("ru = 'Не удалось получить двоичные данные присоединенного файла по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		Ошибки.Добавить(Ошибка);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СсылкаНаДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭД,
		Новый УникальныйИдентификатор);
	
	СтруктураРазбораЭД = ОбменСКонтрагентамиДОВызовСервера.СведенияОЭДИзФайла(СсылкаНаДвоичныеДанные);
	ИмяФайлаПоЭД = "";
	Если ТипЗнч(СтруктураРазбораЭД) = Тип("Структура")
		И СтруктураРазбораЭД.Свойство("ИмяСоздания")
		И ЗначениеЗаполнено(СтруктураРазбораЭД.ИмяСоздания) Тогда
		
		ИмяФайлаПоЭД = СтруктураРазбораЭД.ИмяСоздания;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = СсылкаНаДвоичныеДанные;
	ЗаполнитьЗначенияСвойств(СведенияОФайле, ФайлЭД);
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ИмяБезРасширения = ?(ИмяФайлаПоЭД = "", РеквизитыФайлаЭД.Наименование, ИмяФайлаПоЭД);
	СведенияОФайле.РасширениеБезТочки = РеквизитыФайлаЭД.Расширение;
	
	ПодписантОтКонтрагента = Неопределено;
	ДатаПодписанияКонтрагентом = Неопределено;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлЭД);
	Если УстановленныеПодписи.Количество() > 0 Тогда
		СвойстваПодписи = УстановленныеПодписи[УстановленныеПодписи.ВГраница()];
		
		ПодписантОтКонтрагента = 
			ОбменСКонтрагентамиДОСлужебный.НайтиДобавитьКонтактноеЛицоИзСертификата(
				РеквизитыЭД.Контрагент,
				СвойстваПодписи.Сертификат);
		ДатаПодписанияКонтрагентом = СвойстваПодписи.ДатаПодписи;
	КонецЕсли;
	
	СведенияОФайле.Вставить("МассивДанныхОПодписях", УстановленныеПодписи);
	
	ДанныеДляЗаполнения = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента;
	ДанныеДляЗаполнения.Вставить("СтруктураРазбораЭД", СтруктураРазбораЭД);
	ДанныеДляЗаполнения.Вставить("ПодписантОтКонтрагента", ПодписантОтКонтрагента);
	ДанныеДляЗаполнения.Вставить("ДатаПодписанияКонтрагентом", ДатаПодписанияКонтрагентом);
	ДанныеДляЗаполнения.Вставить("ВидДокументаЭДО", РеквизитыЭД.ВидДокумента);
	ДанныеДляЗаполнения.Вставить("Организация", РеквизитыЭД.Организация);
	ДанныеДляЗаполнения.Вставить("Контрагент", РеквизитыЭД.КОнтрагент);
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	РеквизитыДокумента.Файлы.Добавить(СведенияОФайле);
	
	РеквизитыДокумента.Вставить(
		"ДоступнаНепосредственнаяКорректировка",
		ОбменСКонтрагентамиДОСлужебный.ВидДокументаКорректируетсяНепосредственно(
			РеквизитыЭД.ВидДокумента));
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьПараметрыПоПравиламУчета(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента;
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	
	ПараметрыДокументаПоВидуЭДО = 
		РегистрыСведений.ПравилаУчетаВидовЭДДО.ПараметрыДокументаПоВидуЭДО(
			ДанныеДляЗаполнения.ВидДокументаЭДО,
			ДанныеДляЗаполнения.Организация,
			ДанныеДляЗаполнения.Контрагент);
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ПараметрыДокументаПоВидуЭДО);
	
	Если Делопроизводство.ИспользоватьВидыВнутреннихДокументов() 
		И Не ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
		
		ВходящийЭД = ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД;
		
		ОписаниеПроблемы = СтрШаблон(
			Нстр("ru = 'Для ЭД не удалось определить вид документа 1С:Документооборот.'")
			+ Символы.ПС
			+ НСтр("ru = 'Проверьте корректность указания вида документов для вида ЭДО %1 в настройках ЭДО по контрагенту %2.'"),
			РеквизитыДокумента.ВидДокумента,
			ДанныеДляЗаполнения.Контрагент);
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		Ошибки.Добавить(Ошибка);
		
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ПараметрыДокументаПоВидуЭДО", ПараметрыДокументаПоВидуЭДО);
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРеквизитыДокумента(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	СтруктураРазбораЭД = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента.СтруктураРазбораЭД;
	ПараметрыДокументаПоВидуЭДО = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента.ПараметрыДокументаПоВидуЭДО;
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	
	Если СтруктураРазбораЭД <> Неопределено Тогда
		
		Если СтруктураРазбораЭД.Свойство("СуммаДокумента")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаДокумента) Тогда
			
			РеквизитыДокумента.Сумма = СтруктураРазбораЭД.СуммаДокумента;
		КонецЕсли;
		
		Если СтруктураРазбораЭД.Свойство("Валюта")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.Валюта) Тогда
			
			РеквизитыДокумента.Валюта = СтруктураРазбораЭД.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыПоПравилу = Новый Структура("Папка, Ответственный, ВопросДеятельности");
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭДО.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыДокументаПоВидуЭДО.Шаблон,
			"Папка, Ответственный, ВопросДеятельности");
		
		ЗаполнитьЗначенияСвойств(РеквизитыПоПравилу, РеквизитыШаблона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭДО.Папка) Тогда
		РеквизитыПоПравилу.Папка = ПараметрыДокументаПоВидуЭДО.Папка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭДО.Ответственный) Тогда
		РеквизитыПоПравилу.Ответственный = ПараметрыДокументаПоВидуЭДО.Ответственный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭДО.ВопросДеятельности) Тогда
		РеквизитыПоПравилу.ВопросДеятельности = ПараметрыДокументаПоВидуЭДО.ВопросДеятельности;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, РеквизитыПоПравилу);
	РеквизитыДокумента.ДатаСоздания = ТекущаяДатаСеанса();
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьСтроковыеПоляПоШаблону(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	ДанныеДляЗаполнения = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента;
	ПараметрыДокументаПоВидуЭДО = ДанныеДляЗаполнения.ПараметрыДокументаПоВидуЭДО;
	
	ВходящийЭД = ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД;
	СообщениеЭДО = ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО;
	ФайлЭД = ДанныеВыполненияОперации.ДанныеЭД.ФайлЭД;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходящийЭД,
		"ВидДокумента, ДатаДокумента, НомерДокумента, Дата, Номер, СуммаДокумента,
		|Организация, Контрагент");
	
	ПараметрыЗаполненияСтроковыхПолей =
		ПараметрыЗаполненияСтроковыхПолей(РеквизитыЭД, ВходящийЭД, СообщениеЭДО, ФайлЭД);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Сумма) Тогда
		ПараметрыЗаполненияСтроковыхПолей.Сумма = РеквизитыДокумента.Сумма;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Валюта) Тогда
		ПараметрыЗаполненияСтроковыхПолей.Валюта = РеквизитыДокумента.Валюта;
	КонецЕсли;
	
	ПараметрыЗаполненияСтроковыхПолей.Шаблон = ПараметрыДокументаПоВидуЭДО.Шаблон;
	ПараметрыЗаполненияСтроковыхПолей.Ответственный = ПараметрыДокументаПоВидуЭДО.Ответственный;
	ПараметрыЗаполненияСтроковыхПолей.Папка = ПараметрыДокументаПоВидуЭДО.Папка;
	ПараметрыЗаполненияСтроковыхПолей.ВопросДеятельности = ПараметрыДокументаПоВидуЭДО.ВопросДеятельности;
	
	РезультатЗаполненияНаименования = ЗаполнитьСтроковыеПараметрыПоШаблону(
		ПараметрыДокументаПоВидуЭДО.ШаблонНаименования,
		ПараметрыЗаполненияСтроковыхПолей,
		"ДеревоПараметровСозданияДокумента");
	
	РезультатЗаполненияСодержания = ЗаполнитьСтроковыеПараметрыПоШаблону(
		ПараметрыДокументаПоВидуЭДО.ШаблонСодержания,
		ПараметрыЗаполненияСтроковыхПолей,
		"ДеревоПараметровСозданияДокумента");
	
	Наименование = "";
	Содержание = "";
	
	Если Не РезультатЗаполненияНаименования.Успех Тогда
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось заполнить наименование по шаблону по причине:'")
			+ Символы.ПС
			+ РезультатЗаполненияНаименования.Описание
			+ Символы.ПС
			+ НСтр("ru = 'Документу будет присвоено стандартное наименование.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Ложь);
		
		Ошибки.Добавить(Ошибка);
		
	Иначе
		Наименование = РезультатЗаполненияНаименования.ЗаполненнаяСтрока;
	КонецЕсли;
	
	Если Не РезультатЗаполненияСодержания.Успех Тогда
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось заполнить содержание по шаблону по причине:'")
			+ Символы.ПС
			+ РезультатЗаполненияСодержания.Описание;
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Ложь);
		
		Ошибки.Добавить(Ошибка);
		
	Иначе
		Содержание = РезультатЗаполненияСодержания.ЗаполненнаяСтрока;
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Тогда
		ОписаниеПроблемы =
			НСтр("ru = 'Не заполнено наименование, документу будет присвоено стандартное наименование.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Ложь);
		
		Ошибки.Добавить(Ошибка);
		
		Наименование = СтрШаблон(
			НСтр("ru = 'Документ ЭДО (%1) №%2 от %3'"),
			ДанныеДляЗаполнения.ВидДокументаЭДО,
			РеквизитыЭД.НомерДокумента,
			Формат(РеквизитыЭД.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("Заголовок", Наименование);
	РеквизитыДокумента.Вставить("Содержание", Содержание);
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьСтороныДокумента(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента;
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	
	Стороны = Новый ТаблицаЗначений;
	Стороны.Колонки.Добавить("Сторона");
	Стороны.Колонки.Добавить("КонтактноеЛицо");
	Стороны.Колонки.Добавить("ДатаПодписи");
	Стороны.Колонки.Добавить("Подписан");
	Стороны.Колонки.Добавить("Подписал");
	
	Сторона = Стороны.Добавить();
	Сторона.Сторона = ДанныеДляЗаполнения.Организация;
	
	Сторона = Стороны.Добавить();
	Сторона.Сторона = ДанныеДляЗаполнения.Контрагент;
	Сторона.ДатаПодписи = ДанныеДляЗаполнения.ДатаПодписанияКонтрагентом;
	Сторона.Подписан = Истина;
	Сторона.Подписал = ДанныеДляЗаполнения.ПодписантОтКонтрагента;
	
	РеквизитыДокумента.Стороны = Стороны;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьЗаполнениеРеквизитов(ДанныеВыполненияОперации, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	ДанныеДляЗаполнения = ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента;
	
	ОбязательноеУказаниеОтветственного =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыДокумента.ВидДокумента,
			"ОбязательноеУказаниеОтветственного");
	
	ОбязательныеДляЗаполненияРеквизиты = Новый Массив;
	Если ОбязательноеУказаниеОтветственного Тогда
		ОбязательныеДляЗаполненияРеквизиты.Добавить("Ответственный");
	КонецЕсли;
	ОбязательныеДляЗаполненияРеквизиты.Добавить("Папка");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ОбязательныеДляЗаполненияРеквизиты.Добавить("ВопросДеятельности");
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	СписокНезаполненныхРеквизитов = Новый Массив;
	
	Для каждого ИмяРеквизита Из ОбязательныеДляЗаполненияРеквизиты Цикл
		Если Не ЗначениеЗаполнено(РеквизитыДокумента[ИмяРеквизита]) Тогда
			ЕстьОшибки = Истина;
			СписокНезаполненныхРеквизитов.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		ТекстНезаполненныхРеквизитов = СписокНезаполненныхРеквизитов[0];
		КоличествоНезаполненныхРеквизитов = СписокНезаполненныхРеквизитов.Количество();
		
		Для Индекс = 1 По КоличествоНезаполненныхРеквизитов - 2 Цикл
			ТекстНезаполненныхРеквизитов = ТекстНезаполненныхРеквизитов +
				", " + СписокНезаполненныхРеквизитов[Индекс];
		КонецЦикла;
		
		Если КоличествоНезаполненныхРеквизитов > 1 Тогда
			ТекстНезаполненныхРеквизитов = ТекстНезаполненныхРеквизитов +
				" и " + СписокНезаполненныхРеквизитов[КоличествоНезаполненныхРеквизитов - 1];
		КонецЕсли;
		
		ОписаниеПроблемы = СтрШаблон(
			Нстр("ru = 'Не удалось определить следующие реквизиты внутреннего документа: %1'")
			+ Символы.ПС
			+ НСтр("ru = 'Проверьте корректность указания этих реквизитов для вида %2 в настройках ЭДО по контрагенту %3.'"),
			ТекстНезаполненныхРеквизитов,
			ДанныеДляЗаполнения.ВидДокументаЭДО,
			ДанныеДляЗаполнения.Контрагент);
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		Ошибки.Добавить(Ошибка);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Формирует документ 1C:Документооборот по входящему ЭД и записывает его в ДанныеВыполненияОперации.ДанныеДокументаДО.Документ
//
// Параметры:
//  ДанныеВыполненияОперации - Структура данных по выполнению операции создания документа ДО по входящему ЭД.
//      См. НовыеДанныеСозданияДокументаДО().
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание возникшей проблемы.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция СоздатьДокументДО(ДанныеВыполненияОперации)
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокумента;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Делопроизводство.ИспользоватьВидыВнутреннихДокументов() 
			И Не ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
			
		ОписаниеПроблемы =
			НСтр("ru = 'Не указан вид документа. Проверьте корректность настроек обмена ЭДО.'");
	
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Документ = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
	Документ.Источник = Справочники.ИсточникиДанных.ЭДО;
			
	Документ.Заполнить(РеквизитыДокумента);
	Документ.Записать();
	
	Для Каждого СведенияОФайле Из РеквизитыДокумента.Файлы цикл
		
		Файл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			Документ.Ссылка,
			СведенияОФайле);
		
		ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
		
		Если СведенияОФайле.МассивДанныхОПодписях.Количество() Тогда
			СведенияОПодписи = Новый Массив;
			Для Каждого Элемент Из СведенияОФайле.МассивДанныхОПодписях Цикл
				СведенияОПодписи.Добавить(
					Новый Структура("ПодписанныйОбъект, СвойстваПодписи", Файл, Элемент));
			КонецЦикла;
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(СведенияОПодписи);
		КонецЕсли;
		
		ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(
			ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД,
			ДанныеВыполненияОперации.ДанныеДляЗаполненияДокумента.ВидДокументаЭДО,
			ВерсияФайла);
		
	КонецЦикла;
	
	ДанныеВыполненияОперации.ДанныеДокументаДО.Документ = Документ.Ссылка;
	
	СтруктураВозврата.Успех = Истина;
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет запись в регистры, необходимые для обработки созданного документа ДО.
// 
// Параметры:
//  ДанныеВыполненияОперации - Структура данных по выполнению операции создания документа ДО по входящему ЭД.
//      См. НовыеДанныеСозданияДокументаДО().
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание возникшей проблемы.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция ВыполнитьОперацииПослеСозданияДокументаДО(ДанныеВыполненияОперации)
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	ДокументДО = ДанныеВыполненияОперации.ДанныеДокументаДО.Документ;
	СообщениеЭДО = ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО;
	ВходящийЭД = ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД;
	
	Попытка
		РегистрыСведений.ОчередьПриемаСообщенийЭДО.УдалитьЗапись(СообщениеЭДО);
	Исключение
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось удалить сообщение ЭДО из очереди приема по причине:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	ОтветственныйЗаДокумент =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументДО,
			"Ответственный");
	Если Не ЗначениеЗаполнено(ОтветственныйЗаДокумент) Тогда
		Попытка
			РегистрыСведений.ПроверкаЗагруженныхДанных.УстановитьПризнакПроверки(
				ДокументДО,
				Ложь);
		Исключение
			ОписаниеПроблемы =
				НСтр("ru = 'Не удалось установить признак проверки документа по причине:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
			Ошибка = Новый Структура;
			Ошибка.Вставить("Описание", ОписаниеПроблемы);
			Ошибка.Вставить("ПредметОшибки", ВходящийЭД);
			Ошибка.Вставить("Критическая", Истина);
			
			СтруктураВозврата.Ошибки.Добавить(Ошибка);
			
			Возврат СтруктураВозврата;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
КонецФункции

Функция ИменаПередаваемыхРеквизитов() Экспорт
	
	СтруктураИменПередаваемыхРеквизитов = Новый Структура;
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВидДокумента");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КонтактноеЛицо");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Стороны");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаСоздания");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Сумма");
	СтруктураИменПередаваемыхРеквизитов.Вставить("СуммаНДС");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Валюта");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЛистов");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоПриложений");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЭкземпляров");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ЛистовВПриложениях");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Папка");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Ответственный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВопросДеятельности");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаНачалаДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаОкончанияДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Бессрочный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ПорядокПродления");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ИдентификаторДокументаДО");
	
	Возврат СтруктураИменПередаваемыхРеквизитов;
	
КонецФункции

// Инициализует структуру данных выполнения операции создания документа ДО по входящему ЭД.
//
// Параметры:
//  ВходящийЭД - ДокументСслыка.ЭлектронныйДокументВходящий - ссылка на электронынй документ
//  СообщениеЭДО - ДокументСслыка.СообщениеЭДО - ссылка на сообщение ЭДО по которому необходимо создать документ
//  ФайлЭД - СправочникСслыкаСообщениеЭДОПрисоединенныеФайлы - ссылка на файл ЭД
//  ПопыткаОбработки - Число - Текущая попытка обработки документа в очереди приема сообщений ЭДО
// 
Функция НовыеДанныеСозданияДокументаДО(ВходящийЭД, СообщениеЭДО, ФайлЭД, ПопыткаОбработки)
	
	ДанныеВыполненияОперации = Новый Структура;
	
	//Общие
	ДанныеВыполненияОперации.Вставить("Описание",         "");
	ДанныеВыполненияОперации.Вставить("ПопыткаОбработки", ПопыткаОбработки);
	
	//Данные документа ДО
	ДанныеДокументаДО = Новый Структура;
	ДанныеДокументаДО.Вставить("Документ",           Неопределено);
	ДанныеДокументаДО.Вставить("ПрисоединенныйФайл", Неопределено);
	
	ДанныеВыполненияОперации.Вставить("ДанныеДокументаДО", ДанныеДокументаДО);
	
	//Данные ЭД
	ДанныеЭД = Новый Структура;
	ДанныеЭД.Вставить("ВходящийЭД",   ВходящийЭД);
	ДанныеЭД.Вставить("СообщениеЭДО", СообщениеЭДО);
	ДанныеЭД.Вставить("ФайлЭД",       ФайлЭД);
	
	ДанныеВыполненияОперации.Вставить("ДанныеЭД", ДанныеЭД);
	
	//Данные, заполняемые по ходу выполнения операции
	ДанныеВыполненияОперации.Вставить("РеквизитыДокумента", Неопределено);
	ДанныеВыполненияОперации.Вставить("ДанныеДляЗаполненияДокумента", Новый Структура);
	
	Возврат ДанныеВыполненияОперации;
КонецФункции

// Возвращает выборку из результатов запроса Электронных документов для создания документов ДО
//
// Параметры:
//  СообщенияКПриему - Массив из ДокументСсылка.СообщениеЭДО - сообщения к приему
// 
// Возвращаемое значение:
//  Выборка - Выборка из результата запроса с полями:
//      * СообщениеЭДО - ДокументСсылка.СообщениеЭДО - Сообщение.
//      * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Входящий ЭД.
//      * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы - Присоединенный файл ЭД.
Функция ВыборкаВходящихСообщенийДляОбработки(СообщенияКПриему = Неопределено)
		
	Если ТипЗнч(СообщенияКПриему) = Тип("Массив")
		И СообщенияКПриему.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка КАК СообщениеЭДО,
			|	СообщенияЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	СообщенияЭДО.ОсновнойФайл КАК ОсновнойФайл
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщенияЭДО
			|ГДЕ
			|	СообщенияЭДО.Ссылка В(&СообщенияКПриему)
			|	И НЕ СообщенияЭДО.ПометкаУдаления
			|	И НЕ СообщенияЭДО.Состояние В (&ИсключенныеСосотояния)
			|	И СообщенияЭДО.ТипЭлементаРегламента В(&ТипыПервичныхЭД)";
		
		Запрос.УстановитьПараметр("СообщенияКПриему", СообщенияКПриему);
		
		ИсключенныеСостоянияЭДО = Новый Массив;
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.Аннулирован);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи);
		Запрос.УстановитьПараметр("ИсключенныеСосотояния", ИсключенныеСостоянияЭДО);
		
		ТипыПервичныхЭД = Новый Массив;
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка КАК СообщениеЭДО,
			|	СообщенияЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	СообщенияЭДО.ОсновнойФайл КАК ОсновнойФайл
			|ИЗ
			|	РегистрСведений.ОчередьПриемаСообщенийЭДО КАК Очередь
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщенияЭДО
			|		ПО Очередь.СообщениеЭДО = СообщенияЭДО.Ссылка
			|ГДЕ
			|	НЕ СообщенияЭДО.ПометкаУдаления
			|	И Очередь.КоличествоПопытокОбработки < 3
			|	И НЕ СообщенияЭДО.Состояние В (&ИсключенныеСосотояния)
			|	И СообщенияЭДО.ТипЭлементаРегламента В(&ТипыПервичныхЭД)";
		
		ИсключенныеСостоянияЭДО = Новый Массив;
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.Аннулирован);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
		ИсключенныеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи);
		Запрос.УстановитьПараметр("ИсключенныеСосотояния", ИсключенныеСостоянияЭДО);
		
		ТипыПервичныхЭД = Новый Массив;
		ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
		Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
						
		Выборка = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	Возврат Выборка;
КонецФункции

// Обрабатывает ошибки, возникшие при создании документа 1С:Документооборот по данным входящих ЭД.
// Если количество попыток обработки меньше трех, то происходить запись ошибок в ЖР.
// Если количество попыток обработки три и больше - происходит удаление ЭД из очереди приема,
// установка ЭД и файлу ЭД статуса "ОшибкаПередачи" и добавление ошибки в список к исправлению.
// 
// Парамтеры:
//  ДанныеВыполненияОперации - Структура - Данные выполнения операции, см. НовыеДанныеСозданияДокументаДО()
//  Ошибки - Массив из Структура:
//      * Описание - Строка - Описание возникшей проблемы.
//      * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//      * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                               создать документ ДО по обрабатываему ЭД.
// 
Процедура ОбработатьОшибкуСозданияДокументаДО(ДанныеВыполненияОперации, Ошибки)
	
	СтрокиОшибок = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		СтрокиОшибок.Добавить(Ошибка.Описание);
	КонецЦикла;
	
	ОписаниеПроблемы = СтрСоединить(СтрокиОшибок, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСозданияДокументовДОНаОснованииЭД(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.НайтиПоТипу(ТипЗнч(ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО)),
		ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО,
		СтрШаблон(НСтр("ru = 'При создании документа 1С:Документооборот по входящему ЭД %1 возникли проблемы:'"),
			ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД)
			+ Символы.ПС
			+ ОписаниеОшибки());
	
	Если ДанныеВыполненияОперации.ПопыткаОбработки > 2 Тогда
		
		НачатьТранзакцию();
		Попытка
			РегистрыСведений.ОшибкиЭДОКИсправлению.ДобавитьЗаписьОбОшибке(
				ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД,
				ОписаниеПроблемы);
			
			РегистрыСведений.ОчередьПриемаСообщенийЭДО.УдалитьЗапись(
				ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО);
			
			УстановитьСтатусЭДОшибка(ДанныеВыполненияОперации);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось удалить ЭД из очереди приема сообщений ЭДО.'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Не удалось удалить сообщение ЭДО %1 из очереди приема и сделать запись о ошибке приема по причине:'"),
					ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО)
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусЭДОшибка(ДанныеВыполненияОперации)
	
	ВходящийЭД = ДанныеВыполненияОперации.ДанныеЭД.ВходящийЭД;
	
	ДокументОбъект = ВходящийЭД.ПолучитьОбъект();
	ДокументОбъект.Остановлен = Истина;
	ДокументОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ОшибкаПередачиБлокирующая;
	ДокументОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.СостоянияДокументовЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронныйДокумент = ВходящийЭД;
	МенеджерЗаписи.Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи;
	МенеджерЗаписи.СостояниеДополнение = "";
	МенеджерЗаписи.ДатаИзменения = ТекущаяДатаСеанса();
	МенеджерЗаписи.Комментарий = НСтр("ru = 'Ошибка создания документа 1С:Документооборот'");
	МенеджерЗаписи.Записать();
	
	СообщениеЭДО = ДанныеВыполненияОперации.ДанныеЭД.СообщениеЭДО;
	СообщениеОбъект = СообщениеЭДО.ПолучитьОбъект();
	СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.НеПолучен;
	СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	СообщениеОбъект.Записать();
	
КонецПроцедуры


#Область ПараметрыЗаполненияСтроковыхПолей

// Возвращает структуру параметров строковых полей
//
// Возвращаемое значение:
//  Структура - Структура параметров, доступных для заполнения строковых полей
Функция ПараметрыЗаполненияСтроковыхПолей(РеквизитыЭД, ВходящийЭД, СообщениеЭДО, ФайлЭД)

	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ВидДокументаЭДО",    РеквизитыЭД.ВидДокумента);
	ПараметрыЗаполнения.Вставить("ДатаДокумента",      РеквизитыЭД.ДатаДокумента);
	ПараметрыЗаполнения.Вставить("НомерДокумента",     РеквизитыЭД.НомерДокумента);
	ПараметрыЗаполнения.Вставить("ДатаЭД",             РеквизитыЭД.Дата);
	ПараметрыЗаполнения.Вставить("НомерЭД",            РеквизитыЭД.Номер);
	ПараметрыЗаполнения.Вставить("Организация",        РеквизитыЭД.Организация);
	ПараметрыЗаполнения.Вставить("Контрагент",         РеквизитыЭД.Контрагент);
	ПараметрыЗаполнения.Вставить("Сумма",              РеквизитыЭД.СуммаДокумента);
	ПараметрыЗаполнения.Вставить("Валюта",             Неопределено);
	ПараметрыЗаполнения.Вставить("Шаблон",             Неопределено);
	ПараметрыЗаполнения.Вставить("Ответственный",      Неопределено);
	ПараметрыЗаполнения.Вставить("Папка",              Неопределено);
	ПараметрыЗаполнения.Вставить("ВопросДеятельности", Неопределено);
	
	ПараметрыЗаполнения.Вставить("ВходящийЭД",         ВходящийЭД);
	ПараметрыЗаполнения.Вставить("СообщениеЭДО",       СообщениеЭДО);
	ПараметрыЗаполнения.Вставить("ФайлЭД",             ФайлЭД);
	
	Возврат ПараметрыЗаполнения;

КонецФункции // ЗаполнитьСтруктуруПараметровЗаполненияСтроковыхПолей()

// Возвращает дерево параметров для заполнения строковых полей
// 
// Параметры:
//  ИмяМакета - Строка - Имя макета, содержащего описание параметров заполнения строковых полей.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево, содержащее в себе доступные параметры для вывода. Колонки:
//      Представление - Строка - то, как пользователь увидит параметр
//      ПредставлениеПолное - Строка - полный путь до параметра для пользователя
//      ИмяПоля - Строка - Имя поля структуры параметров
//      ПолучатьЗапросом - Булево - Необходимо ли получать данный параметр запросом 
//      ИмяТаблицы - Строка - имя таблицы для построения запроса
//      КлючТаблицы - Строка - имя поля, по которому наложено условие на отбор из таблицы
//      ЗначениеКлючаТаблицы - Строка - имя поля структуры парметров, по значению которого будет наложено условие
//                             см. ПараметрыЗаполненияСтроковыхПолей()
//      ДоступноДляВыбора - Булево - Доступен ли данный параметр для выбора
Функция ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета = "ДеревоПараметровСозданияДокумента") Экспорт
	
	Макет = РегистрыСведений.ПравилаУчетаВидовЭДДО.ПолучитьМакет(ИмяМакета);
	ОбластьЗаголовоков = Макет.Область("C1:C13");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЗаголовоков);
	Построитель.Выполнить();
	
	ВыборкаДанныхМакета = Построитель.Результат.Выбрать();
	
	ДеревоПараметров = Новый ДеревоЗначений;
	
	ДеревоПараметров.Колонки.Добавить("КодСтроки");
	ДеревоПараметров.Колонки.Добавить("Представление");
	ДеревоПараметров.Колонки.Добавить("ПредставлениеПолное");
	ДеревоПараметров.Колонки.Добавить("ИмяПоля");
	ДеревоПараметров.Колонки.Добавить("ПолучатьЗапросом");
	ДеревоПараметров.Колонки.Добавить("ИмяТаблицы");
	ДеревоПараметров.Колонки.Добавить("КлючТаблицы");
	ДеревоПараметров.Колонки.Добавить("ЗначениеКлючаТаблицы");
	ДеревоПараметров.Колонки.Добавить("ДоступноДляВыбора");
	
	Пока ВыборкаДанныхМакета.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДанныхМакета.ИмяФункциональнойОпции)
			И Не ПолучитьФункциональнуюОпцию(ВыборкаДанныхМакета.ИмяФункциональнойОпции) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Родитель = ДеревоПараметров.Строки.Найти(
			ВыборкаДанныхМакета.КодСтрокиРодителя,
			"КодСтроки",
			Истина);
		
		Если Родитель = Неопределено Тогда
			СтрокаДерева = ДеревоПараметров.Строки.Добавить();
		Иначе
			СтрокаДерева = Родитель.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			СтрокаДерева,
			ВыборкаДанныхМакета,
			"КодСтроки, Представление, ПредставлениеПолное, ИмяПоля");
		
		Если НРег(ВыборкаДанныхМакета.ДоступноДляВыбора) <> "да" Тогда
			СтрокаДерева.ДоступноДляВыбора = Ложь;
			Продолжить;
		Иначе
			СтрокаДерева.ДоступноДляВыбора = Истина;
		КонецЕсли;
		
		Если НРег(ВыборкаДанныхМакета.ПолучатьЗапросом) <> "да" Тогда
			СтрокаДерева.ПолучатьЗапросом = Ложь;
		Иначе
			
			СтрокаДерева.ПолучатьЗапросом = Истина;
			ЗаполнитьЗначенияСвойств(
				СтрокаДерева,
				ВыборкаДанныхМакета,
				"ИмяТаблицы, КлючТаблицы, ЗначениеКлючаТаблицы");
			
		КонецЕсли;
		
		Если НРег(ВыборкаДанныхМакета.ДобавитьРеквизиты) = "да" Тогда
			
			ДобавитьРеквизитыВСтрокуДереваЗаполненияСтроковыхПолей(
				СтрокаДерева,
				ВыборкаДанныхМакета.ИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоПараметров;
	
КонецФункции // ПолучитьДеревоЗаполненияСтроковыхПолей()

// Добавляет в дочерние строки реквизиты объекта метаданных
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева, к которой нужно добавить дочерние строки с реквизитам,
//                 см. ДеревоПараметровЗаполненияСтроковыхПолей()
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных конфигурации, реквизиты которого нужно добавить к выбору
//  ИмяТаблицы - Строка - Имя таблицы для построения запроса
Процедура ДобавитьРеквизитыВСтрокуДереваЗаполненияСтроковыхПолей(СтрокаДерева, ИмяОбъектаМетаданных);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		
		НовСтрДерева = СтрокаДерева.Строки.Добавить();
		НовСтрДерева.Представление				= Реквизит.Представление();
		НовСтрДерева.ПредставлениеПолное		= СтрокаДерева.ПредставлениеПолное + "|" + Реквизит.Имя;
		НовСтрДерева.ИмяПоля					= Реквизит.Имя;
		НовСтрДерева.ПолучатьЗапросом			= Истина;
		НовСтрДерева.ИмяТаблицы					= ИмяОбъектаМетаданных;
		НовСтрДерева.КлючТаблицы				= "Ссылка";
		НовСтрДерева.ЗначениеКлючаТаблицы		= СтрокаДерева.ИмяПоля;
		НовСтрДерева.ДоступноДляВыбора			= Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет параметры из шаблона
//
// Параметры:
//  ШаблонСтроковогоПоля - Строка - Строка, содержащая шаблон для подстановки параметров.
//      Параметры выделяются квадратными скобками [ и ], не могут иметь вложенной структуры, параметр не может быть пустым.
//
// Возвращаемое значение:
//  Структура - Описание результата выделения параметров:
//      Успех - Булево - определяет, успешно ли завершена операция выделения параметров
//      Описание - Строка - строковое описание результата выполнения операции
//      МассивПараметров - Массив - массив строк, которые выделены как параметры в шаблоне, т.е. заключены в квадратные скобки [].
Функция ПараметрыВШаблонеСтроковогоПоля(ШаблонСтроковогоПоля) Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, МассивПараметров, Описание");
	
	МассивПараметровВСтроке = Новый Массив;
	
	Индекс = 1;
	ПоложениеОткрывающейСкобки = 0;
	ПоложениеЗакрывающейСкобки = 0;
	СкобкаОткрыта = Ложь;
	
	ДлинаСтроки = СтрДлина(ШаблонСтроковогоПоля);
	
	Пока Индекс <= ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ШаблонСтроковогоПоля, Индекс, 1);
		
		Если ТекущийСимвол = "[" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				ПоложениеОткрывающейСкобки = Индекс;
				СкобкаОткрыта = Истина;
				
			Иначе
				
				ПроблемныйУчастокТекста = Сред(
					ШаблонСтроковогоПоля,
					ПоложениеОткрывающейСкобки,
					Индекс - ПоложениеОткрывающейСкобки + 1);
				
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание = СтрШаблон(
					НСтр("ru = 'На участке ""%1"" отсутсвует закрывающая скобка ""]""'"),
					ПроблемныйУчастокТекста);
				
				Возврат СтруктураВозврата;
			
			КонецЕсли;
			
		ИначеЕсли ТекущийСимвол = "]" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				ПроблемныйУчастокТекста = Сред(
					ШаблонСтроковогоПоля,
					?(ПоложениеЗакрывающейСкобки = 0, 1, ПоложениеЗакрывающейСкобки),
					Индекс - ПоложениеЗакрывающейСкобки + 1);
				
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание = СтрШаблон(
					НСтр("ru = 'На участке ""%1"" отсутствует открывающая скобка ""[""'"),
					ПроблемныйУчастокТекста);
				
				Возврат СтруктураВозврата;
				
			Иначе
			
				ПоложениеЗакрывающейСкобки = Индекс;
				СкобкаОткрыта = Ложь;
				
				Если ПоложениеЗакрывающейСкобки - ПоложениеОткрывающейСкобки <= 1 Тогда
					
					НачСимволПроблемногоУчастка = 
						?(ПоложениеОткрывающейСкобки > 5,
						ПоложениеОткрывающейСкобки - 5,
						1);
					КонСимволПроблемногоУчастка =
						?(ДлинаСтроки - ПоложениеЗакрывающейСкобки > 5,
						ПоложениеЗакрывающейСкобки + 5,
						ДлинаСтроки);
					
					ПроблемныйУчастокТекста = Сред(
						ШаблонСтроковогоПоля,
						НачСимволПроблемногоУчастка,
						КонСимволПроблемногоУчастка - НачСимволПроблемногоУчастка + 1);
					
					СтруктураВозврата.Успех = Ложь;
					СтруктураВозврата.Описание = СтрШаблон(
						НСтр("ru = 'На участке ""%1"" присутствует пустой параметр'"),
						ПроблемныйУчастокТекста);
					
					Возврат СтруктураВозврата;
					
				КонецЕсли;
				
				СтрокаПараметра = Сред(
					ШаблонСтроковогоПоля,
					ПоложениеОткрывающейСкобки + 1,
					ПоложениеЗакрывающейСкобки - ПоложениеОткрывающейСкобки - 1);
				
				МассивПараметровВСтроке.Добавить(СтрокаПараметра);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если СкобкаОткрыта Тогда
		ПроблемныйУчастокТекста = Сред(
			ШаблонСтроковогоПоля,
			ПоложениеОткрывающейСкобки);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = СтрШаблон(
			НСтр("ru = 'На участке ""%1"" отсутсвует закрывающая скобка ""]""'"),
			ПроблемныйУчастокТекста);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Операция выделения параметров завершена успешно'");
	СтруктураВозврата.МассивПараметров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПараметровВСтроке);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет заполнение шаблона строки по строковым параметрам, описанным в функции ДеревоПараметровЗаполненияСтроковыхПолей()
// 
// Параметры:
//  ШаблонСтроки - Строка - Строка, содержащая шаблон для подстановки параметров.
//      Параметры выделяются квадратными скобками [ и ], не могут иметь вложенной структуры, параметр не может быть пустым,
//      все параметры должны быть описаны в дереве возвращаемом функцией ДеревоПараметровЗаполненияСтроковыхПолей()
//  ПараметрыЗаполненияСтроковыхПолей - Структура, содержащая значения для подстановки параметров,
//                                      см. ПараметрыЗаполненияСтроковыхПолей()
//  ИмяМакета - Строка - Имя макета, содержащего описание параметров заполнения строковых полей.
// 
// Возвращаемое значение:
//  Структура - результат заполнения
//      * Успех - Булево - Указывает, завершилась ли операция заполнения успехом.
//      * ЗаполненнаяСтрока - Строка, Неопределено - В случае успеха возвращает строку с заполненными параметрами, в случае неудачи - Неопределено.
//      * Описание - Строка - Описание результата выполнения операции, в случае неудачи - описание ошибки.
Функция ЗаполнитьСтроковыеПараметрыПоШаблону(ШаблонСтроки, ПараметрыЗаполненияСтроковыхПолей,
	ИмяМакета = "ДеревоПараметровСозданияДокумента")
	
	СтруктураВозврата = Новый Структура("Успех, ЗаполненнаяСтрока, Описание");
	
	РазборПараметров = ПараметрыВШаблонеСтроковогоПоля(ШаблонСтроки);
	
	Если Не РазборПараметров.Успех Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, РазборПараметров);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Соответствие;
	
	ТаблицаДляСоставленияЗапросов = Новый ТаблицаЗначений;
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ИмяТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("КлючТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ЗначениеКлючаТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ОписанияПолучаемыхПараметров");
	
	ДеревоПараметров = ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета);
	
	Для каждого ИмяПараметра Из РазборПараметров.МассивПараметров Цикл
		
		ОписаниеПараметра = ДеревоПараметров.Строки.Найти(ИмяПараметра, "ПредставлениеПолное", Истина);
		
		Если ОписаниеПараметра = Неопределено Тогда
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание = СтрШаблон(
				НСтр("ru = 'Параметр [%1] не найден в возможных параметрах заполнения.'") +
				Символы.ПС +
				НСтр("ru = 'Пожалуйста проверьте корректность указания этого параметра,'") + 
				Символы.ПС +
				НСтр("ru = 'при необходимости перетащите его из дерева доступных параметров'"),
				ИмяПараметра);
			
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		Если Не ОписаниеПараметра.ПолучатьЗапросом Тогда
			
			ЗначенияПараметров.Вставить(
				ИмяПараметра,
				ПараметрыЗаполненияСтроковыхПолей[ОписаниеПараметра.ИмяПоля]);
			
		Иначе
			
			ОтборСтрокТаблицы = Новый Структура("ИмяТаблицы, КлючТаблицы, ЗначениеКлючаТаблицы");
			ЗаполнитьЗначенияСвойств(ОтборСтрокТаблицы, ОписаниеПараметра);
			
			СтрокиТаблицы = ТаблицаДляСоставленияЗапросов.НайтиСтроки(ОтборСтрокТаблицы);
			
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаТаблицыДляЗапроса = СтрокиТаблицы[0];
			Иначе
				СтрокаТаблицыДляЗапроса = ТаблицаДляСоставленияЗапросов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДляЗапроса, ОтборСтрокТаблицы);
				СтрокаТаблицыДляЗапроса.ОписанияПолучаемыхПараметров = Новый Массив;
			КонецЕсли;
			
			ОписаниеПолученияПараметра = Новый Структура;
			
			ОписаниеПолученияПараметра.Вставить("Представление", ИмяПараметра);
			ОписаниеПолученияПараметра.Вставить("ИмяПоля", ОписаниеПараметра.ИмяПоля);
			
			СтрокаТаблицыДляЗапроса.ОписанияПолучаемыхПараметров.Добавить(ОписаниеПолученияПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗначенияПараметровВСоответствиеПоЗапросу(
		ЗначенияПараметров,
		ТаблицаДляСоставленияЗапросов,
		ПараметрыЗаполненияСтроковыхПолей);
	
	ЗаполненнаяСтрока = ШаблонСтроки;
	
	Для каждого Параметр Из ЗначенияПараметров Цикл
		
		СтрокаДляПодстановки = "";
		ТипЗначения = ТипЗнч(Параметр.Значение);
		
		Если ТипЗначения = Тип("Дата") Тогда
			СтрокаДляПодстановки = Формат(Параметр.Значение, "ДФ=dd.MM.yyyy")
		Иначе
			СтрокаДляПодстановки = Строка(Параметр.Значение);
		КонецЕсли;
		
		ЗаполненнаяСтрока = СтрЗаменить(
			ЗаполненнаяСтрока,
			"[" + Параметр.Ключ + "]",
			СтрокаДляПодстановки);
		
	КонецЦикла;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Строка заполнена успешно'");
	СтруктураВозврата.ЗаполненнаяСтрока = ЗаполненнаяСтрока;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ЗаполнитьСтрокуПоШаблону()

// Добавляет значения параметров в соответствие, получаемые из запроса
//
// Параметры:
//  ЗначенияПараметров - Соответствие - Соответствие, в которое будут добавлены значения параметров
//      Ключ - Строка - полное представление параметра,
//      Значение - Произвольный - Значение параметра
//  ТаблицаДляЗапроса - ТаблицаЗначений - Таблица, по которой будет строится запрос на получение значений параметров. Колонки:
//      * ИмяТаблицы - Строка - Имя таблица базы данных для построения запроса.
//      * КлючТаблицы - Строка - Имя поля таблицы, по которому будет производится отбор
//      * ЗначениеКлючаТаблицы - Строка - Имя поля в структуре параметров, по которому будет производиться отбор
//      * ОписанияПолучаемыхПараметров - Массив - МассивСтруктур, содержащих описание параметров, получаемых из запроса.
//          Описание структур параметров:
//              * Представление - Строка - Полное представление параметра
//              * ИмяПоля - Строка - Имя поля в таблице запроса.
//  ПараметрыЗаполненияСтроковыхПолей - Структура - Структура, содержащая значения параметров для подстановки.
//
Процедура ДобавитьЗначенияПараметровВСоответствиеПоЗапросу(ЗначенияПараметров, ТаблицаДляЗапроса,
		ПараметрыЗаполненияСтроковыхПолей)
	
	Если ТаблицаДляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	НомерЗапроса = 0;
	
	Для каждого СтрокаДляЗапроса Из ТаблицаДляЗапроса Цикл
		
		НомерЗапроса = НомерЗапроса + 1;
		
		ТекстЗапроса = ТекстЗапроса +
			?(ТекстЗапроса = "",
			"",
			"
			|;
			|//////////////////////////////////
			|") +
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1";
		
		КоличествоПолей = СтрокаДляЗапроса.ОписанияПолучаемыхПараметров.Количество();
		
		МассивДобавленныхПолей = Новый Массив;
		
		Для Индекс = 0 По КоличествоПолей - 1 Цикл
			ПолучаемоеПоле = СтрокаДляЗапроса.ОписанияПолучаемыхПараметров[Индекс];
			ИмяПоля = ПолучаемоеПоле.ИмяПоля;
			
			Если МассивДобавленныхПолей.Найти(ИмяПоля) = Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
					|	Таблица." + ИмяПоля + " КАК " + ИмяПоля + ?(Индекс = КоличествоПолей - 1, "", ",");
				
				МассивДобавленныхПолей.Добавить(ИмяПоля);
				
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	" + СтрокаДляЗапроса.ИмяТаблицы + " КАК Таблица
			|
			|ГДЕ
			|	Таблица." + СтрокаДляЗапроса.КлючТаблицы + " = &Параметр" + НомерЗапроса;
		
		Запрос.УстановитьПараметр("Параметр" + НомерЗапроса,
			ПараметрыЗаполненияСтроковыхПолей[СтрокаДляЗапроса.ЗначениеКлючаТаблицы]);
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Индекс = 0 По ТаблицаДляЗапроса.Количество() - 1 Цикл
		
		ТаблицаРезультатаЗапроса = МассивРезультатов[Индекс].Выгрузить();;
		СтрокаЗапроса = ТаблицаДляЗапроса[Индекс];
		
		Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда
			
			Для каждого ОписаниеПараметра Из СтрокаЗапроса.ОписанияПолучаемыхПараметров Цикл
				ЗначенияПараметров.Вставить(
					ОписаниеПараметра.Представление,
					ТаблицаРезультатаЗапроса[0][ОписаниеПараметра.ИмяПоля]);
			КонецЦикла;
			
		Иначе
			
			Для каждого ОписаниеПараметра Из СтрокаЗапроса.ОписанияПолучаемыхПараметров Цикл
				ЗначенияПараметров.Вставить(ОписаниеПараметра.Представление, Неопределено);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеОбъектовЭДОНаОснованииДокументов1СДокументооборот

// Формирует исходящие ЭД по внутренним документам, стоящим в очереди на отправку.
//
// Возвращаемое значение:
//  Структура:
//      * КоличествоКОбработке - Число - Количество документов, необходимых к обработке, т.е. к созданию ЭД
//      * КоличествоСозданных - Число - Количество документов, созданных в результате выполнения
//      * КоличествоОтправленных - Число - Количество документов, отправленных оператору в результате выполнения
//      * КоличествоПодготовленных - Число - Количество документов, подготовленных к отправке в результате работы.
//      * НемедленнаяОтправка - Булево - Указывает, используется ли в настройках системы немедленная отправка документов.
Функция СформироватьЭДПоГотовымДокументамДО() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);

	ИмяСобытия = ИмяСобытияСозданияЭДНаОснованииДокументовДО();
	
	Комментарий = Нстр("ru = 'Начато создание ЭД на основании документов 1С:Документооборот.'");
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	
	СтруктураВозврата.Вставить("КоличествоКОбработке",     0);
	СтруктураВозврата.Вставить("КоличествоСозданных",      0);
	СтруктураВозврата.Вставить("КоличествоОтправленных",   0);
	СтруктураВозврата.Вставить("КоличествоПодготовленных", 0);
	СтруктураВозврата.Вставить("НемедленнаяОтправка",      Истина);
	
	ДанныеДляОтправки = ДокументыКОтправкеПоЭДО();
	
	СтруктураВозврата.КоличествоКОбработке = ДанныеДляОтправки.Количество();
	
	Для Каждого СтрокаКОтправке Из ДанныеДляОтправки Цикл
		
		ДанныеДляСоздания = Новый Структура(
			"Документ, ФайлДляОтправки, ВерсияДляОтправки, СформированныйЭД");
		
		ЗаполнитьЗначенияСвойств(ДанныеДляСоздания, СтрокаКОтправке);
		
		Результат = СформироватьЭДПоДокументуДО(ДанныеДляСоздания);
		
		Если Результат.Успех И Результат.НемедленнаяОтправка Тогда
			СтруктураВозврата.КоличествоОтправленных =
				СтруктураВозврата.КоличествоОтправленных + 1;
			СтруктураВозврата.КоличествоСозданных =
				СтруктураВозврата.КоличествоСозданных + 1;
		ИначеЕсли Результат.Успех И Не Результат.НемедленнаяОтправка Тогда
			СтруктураВозврата.КоличествоПодготовленных =
				СтруктураВозврата.КоличествоПодготовленных + 1;
			СтруктураВозврата.КоличествоСозданных =
				СтруктураВозврата.КоличествоСозданных + 1;
			СтруктураВозврата.НемедленнаяОтправка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Комментарий = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияЭДПоДокументамДО(
		СтруктураВозврата.КоличествоКОбработке,
		СтруктураВозврата.КоличествоСозданных,
		СтруктураВозврата.КоличествоПодготовленных,
		СтруктураВозврата.КоличествоОтправленных,
		СтруктураВозврата.НемедленнаяОтправка);
		
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает внутренние документы, которые необходимо отправить по ЭДО.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
// 
Функция ДокументыКОтправкеПоЭДО()
	
	// В запросе в конце группируем по документу, выбирая максимум из ссылочных данных.
	//   Если в конечном запросе для одного документа до группировки было более одной строки - это поймает
	//   проверка в ф-ии ВозможностьСозданияЭД(). Если запись одна - то результат от группировки не зависит.
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ
			|	ОчередьОтправкиДокументовЭДО.Документ КАК Документ
			|ПОМЕСТИТЬ втДокументыВОчереди
			|ИЗ
			|	РегистрСведений.ОчередьОтправкиДокументовЭДО КАК ОчередьОтправкиДокументовЭДО
			|ГДЕ
			|	ОчередьОтправкиДокументовЭДО.КоличествоПопытокОбработки < 3
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втДокументыВОчереди.Документ КАК Документ,
			|	МАКСИМУМ(Файлы.Ссылка) КАК ФайлДляОтправки,
			|	МАКСИМУМ(Файлы.ТекущаяВерсия) КАК ВерсияДляОтправки
			|ИЗ
			|	втДокументыВОчереди КАК втДокументыВОчереди
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|			ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
			|		ПО втДокументыВОчереди.Документ = Файлы.ВладелецФайла
			|			И (НЕ Файлы.ПометкаУдаления)
			|ГДЕ
			|	СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	втДокументыВОчереди.Документ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует исходящий ЭД по внутреннему документу ДО
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * СформированныйЭД - ДокументСсылка.ЭлектронныйДокументИсходящий - Сформированный ЭД, заполняется в дальнейшем
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, успешно ли завершилась отправка документа
//      * НемедленнаяОтправка - Булево - Указывает, проводилась ли немедленная отправка документа
// 
Функция СформироватьЭДПоДокументуДО(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура("Успех, НемедленнаяОтправка");
	
	ПопыткаОбработки = 
		РегистрыСведений.ОчередьОтправкиДокументовЭДО.ДобавитьПопыткуОбработки(ДанныеДляСоздания.Документ);
	
	РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(ДанныеДляСоздания.Документ);
	
	РезультатПроверки = ВозможностьСозданияЭД(ДанныеДляСоздания);
	
	НачатьТранзакцию();
	Попытка
		
		Если Не РезультатПроверки.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				РезультатПроверки.Описание,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		Если Не РезультатПроверки.Свойство("ПараметрыОтправки")
			ИЛИ ТипЗнч(РезультатПроверки.ПараметрыОтправки) <> Тип("Структура") Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'Не удалось получить параметры отправки документа.'");
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				ОписаниеПроблемы,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		РезультатПроверкиФайла = ПроверитьСоответствиеФайлаПараметрамОтправки(
			ДанныеДляСоздания, РезультатПроверки.ПараметрыОтправки);
		
		Если Не РезультатПроверкиФайла.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				РезультатПроверкиФайла.ОписаниеОшибки,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		НастройкиОтправки = РезультатПроверкиФайла.НастройкиОтправки;
		
		ДанныеДляСоздания.Вставить("НастройкиОтправки", НастройкиОтправки);
		
		Если ЗначениеЗаполнено(НастройкиОтправки.Формат) Тогда
			
			ДокументЭДО = СформироватьФормализованныйЭД(ДанныеДляСоздания);
			
		Иначе
			
			ДокументЭДО = СформироватьПроизвольныйЭД(ДанныеДляСоздания);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументЭДО) Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'Не удалось сформировать ЭД.'");
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				ОписаниеПроблемы,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		ДанныеДляСоздания.Вставить("ДокументЭДО", ДокументЭДО);
		
		РезультатКопированияПодписей = СкопироватьПодписиВФайлЭД(ДанныеДляСоздания);
		
		Если Не РезультатКопированияПодписей.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'При копировании подписей для отправки по ЭДО возникли ошибки:'")
				+ Символы.ПС
				+ РезультатКопированияПодписей.Описание;
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				ОписаниеПроблемы,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		ОтправитьЭДОператору(ДанныеДляСоздания);
		
		РегистрыСведений.ОчередьОтправкиДокументовЭДО.УдалитьИзОчереди(ДанныеДляСоздания.Документ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеПроблемы =
			НСтр("ru = 'При отправке документа по ЭДО произошла ошибка:'")
			+ Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработатьОшибкуФормированияЭД(
			ДанныеДляСоздания,
			ОписаниеПроблемы,
			ПопыткаОбработки);
		
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.НемедленнаяОтправка = Не НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет возможность создания ЭД на основании документа ДО и возвращает результат проверки с описанием ошибок
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * СформированныйЭД - ДокументСсылка.ЭлектронныйДокументИсходящий - Сформированный ЭД, заполняется в дальнейшем
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, завершилась ли проверка успешно, возможно ли формировант ЭД.
//      * Описание - Строка - Описание возникшей ошибки.
Функция ВозможностьСозданияЭД(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура(
		"Успех, Описание, ПараметрыОтправки");
	
	ПараметрыПроверки = Новый Структура;
	
	ТаблицыПроверки = ТаблицыДляПроверкиВозможностиФормирования(ДанныеДляСоздания.Документ);
	
	Организации = ТаблицыПроверки.Организации;
	
	Если Организации.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.
				|Пожалуйста, проверьте корректность заполнения таблицы сторон и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", Организации[0].Организация);
	КонецЕсли;
	
	Если ТаблицыПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Для организации документа нет учетных записей ЭДО.
				|Пожалуйста, проверьте наличие учетных записей ЭДО и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Контрагенты = ТаблицыПроверки.Контрагенты;
	
	Если Контрагенты.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В таблицы сторон не указан контрагент, которому необходимо отправить документ.
				|Пожалуйста, проверьте корректность заполнения таблицы сторон и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", Контрагенты[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", Контрагенты[0].Контрагент);
		ПараметрыПроверки.Вставить("ВидДокумента", Контрагенты[0].ВидДокумента);
	КонецЕсли;
	
	НастройкиОтправкиДО = ТаблицыПроверки.НастройкиОтправкиДО;
	
	Если НастройкиОтправкиДО.Количество() = 0
		Или ТаблицыПроверки.НастройкиОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			СтрШаблон(
				НСтр("ru = 'Не найдены настройки отправки по ЭДО документов вида %1 от организации %2 контрагенту %3.
					|Пожалуйста, проверьте настройки отправки ЭДО и повторите отправку.'"),
				ПараметрыПроверки.Организация,
				ПараметрыПроверки.Контрагент,
				ПараметрыПроверки.ВидДокумента);
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", НастройкиОтправкиДО[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", НастройкиОтправкиДО[0].Контрагент);
	КонецЕсли;
	
	ДействующиеНастройкиОтправки = ТаблицыПроверки.ДействующиеНастройкиОтправки;
	
	Если ДействующиеНастройкиОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			СтрШаблон(
				НСтр("ru = 'Приглашение к обмену между организацией %1 и контрагентом %2 не принято.
					|Пожалуйста, проверьте статус приглашения к обмену ЭДО и повторите отправку.'"),
				ПараметрыПроверки.Организация,
				ПараметрыПроверки.Контрагент);
		
		Возврат СтруктураВозврата;
	Иначе
		СтрокаНастроек = ДействующиеНастройкиОтправки[0];
		
		ПараметрыПроверки.Вставить("Организация",                     СтрокаНастроек.Организация);
		ПараметрыПроверки.Вставить("Контрагент",                      СтрокаНастроек.Контрагент);
		
		ПараметрыПроверки.Вставить("ИдентификаторОрганизации",        СтрокаНастроек.ИдентификаторОрганизации);
		ПараметрыПроверки.Вставить("ИдентификаторКонтрагента",        СтрокаНастроек.ИдентификаторКонтрагента);
		ПараметрыПроверки.Вставить("МаршрутПодписания",               СтрокаНастроек.МаршрутПодписания);
		ПараметрыПроверки.Вставить("ВыгружатьДополнительныеСведения", СтрокаНастроек.ВыгружатьДополнительныеСведения);
		ПараметрыПроверки.Вставить("СпособОбмена",                    СтрокаНастроек.СпособОбмена);
		ПараметрыПроверки.Вставить("ВидДокументаЭДО",                 СтрокаНастроек.ВидДокументаЭДО);
		ПараметрыПроверки.Вставить("ТребуетсяИзвещениеОПолучении",    СтрокаНастроек.ТребуетсяИзвещениеОПолучении);
		ПараметрыПроверки.Вставить("ТребуетсяОтветнаяПодпись",        СтрокаНастроек.ТребуетсяОтветнаяПодпись);
		ПараметрыПроверки.Вставить("Формат",                          СтрокаНастроек.Формат);
	КонецЕсли;
	
	ФайлыДокумента = ТаблицыПроверки.ФайлыДокумента;
	
	Если ФайлыДокумента.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В документе нет файла для отправки.
				|Пожалуйста, проверьте наличие актуального файла и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	ИначеЕсли ФайлыДокумента.Количество() > 1 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В документе более одного файла для отправки. Отправлять по ЭДО можно только один файл.
				|Пожалуйста, удалите лишние файлы и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Файл", ФайлыДокумента[0].Файл);
		ПараметрыПроверки.Вставить("ВерсияФайла", ФайлыДокумента[0].ТекущаяВерсия);
	КонецЕсли;
	
	ПодписиФайлов = ТаблицыПроверки.ПодписиФайлов;
	
	Если ПодписиФайлов.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Не найдены электронные подписи, установленные на файл документа.
				|Пожалуйста, проверьте наличие подписей на файле документа и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ПодписиФайлов Цикл
		
		Если Не СтрокаЭП.ПодписьВерна Или Не СтрокаЭП.СертификатДействителен Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание =
				НСтр("ru = 'Среди подписей файла есть неверные подписи или подписи с недействительным сертификатом.
					|Пожалуйста, проверьте действительность подписей и повторите отправку.'");
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыПроверки.ОтпечаткиДляОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Среди подписей файла нет тех, которые разрешены к обмену ЭДО.
				|Пожалуйста, проверьте список сертификатов, используемых для обмена в учетной записи ЭДО.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Отправитель",                     ПараметрыПроверки.Организация);
	ПараметрыОтправки.Вставить("Получатель",                      ПараметрыПроверки.Контрагент);
	
	ПараметрыОтправки.Вставить("ИдентификаторОтправителя",        ПараметрыПроверки.ИдентификаторОрганизации);
	ПараметрыОтправки.Вставить("ИдентификаторПолучателя",         ПараметрыПроверки.ИдентификаторКонтрагента);
	ПараметрыОтправки.Вставить("МаршрутПодписания",               ПараметрыПроверки.МаршрутПодписания);
	ПараметрыОтправки.Вставить("ВыгружатьДополнительныеСведения", ПараметрыПроверки.ВыгружатьДополнительныеСведения);
	ПараметрыОтправки.Вставить("СпособОбмена",                    ПараметрыПроверки.СпособОбмена);
	ПараметрыОтправки.Вставить("ВидДокумента",                    ПараметрыПроверки.ВидДокументаЭДО);
	ПараметрыОтправки.Вставить("ТребуетсяИзвещениеОПолучении",    ПараметрыПроверки.ТребуетсяИзвещениеОПолучении);
	ПараметрыОтправки.Вставить("ТребуетсяОтветнаяПодпись",        ПараметрыПроверки.ТребуетсяОтветнаяПодпись);
	ПараметрыОтправки.Вставить("Формат",                          ПараметрыПроверки.Формат);
	
	СтруктураВозврата.ПараметрыОтправки = ПараметрыОтправки;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПроверитьСоответствиеФайлаПараметрамОтправки(ДанныеДляСоздания, ПараметрыОтправки)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	
	НастройкиОтправки = НовыеНастройкиОтправкиОбъекта();
	
	НастройкиОтправки.ОбъектУчета = ДанныеДляСоздания.ВерсияДляОтправки;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтправки, ПараметрыОтправки, ,
		"Формат, ВидДокумента");
	
	СтруктураВозврата.Вставить("НастройкиОтправки", НастройкиОтправки);
	
	ВидДокументаВНастройках = ПараметрыОтправки.ВидДокумента;
	ТипДокументаВНастройках = ?(ЗначениеЗаполнено(ВидДокументаВНастройках),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаВНастройках, "ТипДокумента"),
		Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ФорматВНастройках = ПараметрыОтправки.Формат;
	
	ФорматыЭД = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов();
	
	Если ЗначениеЗаполнено(ВидДокументаВНастройках) Тогда
		ОтборФормата = Новый Структура("ВидДокумента", ВидДокументаВНастройках);
		СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);
		
		НеформализованныйДокументВНастройках = (СтрокиФормата.Количество() = 0);
	Иначе
		НеформализованныйДокументВНастройках = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФорматВНастройках) Тогда
		
		ОтборФормата = Новый Структура("ИдентификаторФормата", ФорматВНастройках);
		
		СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);
		
		Если СтрокиФормата.Количество() = 0 Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не найден формат ""%1"", указанный для отправки. Проверьте настройки отправки ЭДО.'"),
				ФорматВНастройках);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		НайденДействующийФормат = Ложь;
		НайденВидДокумента = Ложь;
		
		ПредставлениеФормата = СтрокиФормата[0].ПредставлениеФормата;
		
		Для Каждого СтрокаФормата Из СтрокиФормата Цикл
			Если СтрокаФормата.Действует Тогда
				НайденДействующийФормат = Истина;
				
				Если СтрокаФормата.ВидДокумента = ВидДокументаВНастройках Тогда
					НайденВидДокумента = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденДействующийФормат Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Формат документов %1 не действует. Измените формат в настройках отправки.'"),
				ПредставлениеФормата);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если Не НайденВидДокумента Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Формат документов %1 нельзя использовать с видом документов %2.
					|Проверьте настройки отправки документов.'"),
				ПредставлениеФормата,
				ВидДокументаВНастройках);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		ДанныеДляСоздания.ФайлДляОтправки,
		ДанныеДляСоздания.ВерсияДляОтправки);
	
	Если ДанныеФайлаИДвоичныеДанные = Неопределено Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные файла для отправки.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДанныеЭДФайла = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные);
	
	ПолучитьСообщенияПользователю(Истина);
	
	// Документ неформализованный
	Если НеформализованныйДокументВНастройках
		Или ТипЗнч(ДанныеЭДФайла) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ФорматВНастройках) Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Файл не соответствует формату %1.'"),
				ПредставлениеФормата);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		СтруктураВозврата.Успех = Истина;
		
		СтруктураВозврата.НастройкиОтправки.Формат = "";
		
		Если ЗначениеЗаполнено(ВидДокументаВНастройках) Тогда
			
			СтруктураВозврата.НастройкиОтправки.ВидДокумента = ВидДокументаВНастройках;
			СтруктураВозврата.НастройкиОтправки.ТипДокумента = ТипДокументаВНастройках;
			
		Иначе
			
			ВидДокументаПрочее = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
				Перечисления.ТипыДокументовЭДО.Прочее);
			
			СтруктураВозврата.НастройкиОтправки.ВидДокумента = ВидДокументаПрочее;
			СтруктураВозврата.НастройкиОтправки.ТипДокумента = 
				Перечисления.ТипыДокументовЭДО.Прочее;
			
		КонецЕсли;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ТипДокументаВФайле = ДанныеЭДФайла.НовыйЭД.ВидЭД;
	ФорматВФайле = ДанныеЭДФайла.НовыйЭД.ВерсияФормата;
	
	ОтборФормата = Новый Структура("ИдентификаторФормата", ФорматВФайле);
	СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);
	
	Если СтрокиФормата.Количество() = 0 Тогда
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки =
			НСтр("ru = 'Файл неизвестного формата. Проверьте приложенный файл.'");
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ПредставлениеФорматаФайла = СтрокиФормата[0].ПредставлениеФормата;
	
	Если ЗначениеЗаполнено(ФорматВНастройках)
		И ФорматВНастройках <> ФорматВФайле Тогда
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Формат файла документа (%1) не соответствует формату в настройках (%2).'"),
			ПредставлениеФорматаФайла,
			ПредставлениеФормата);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипДокументаВНастройках)
		И ТипДокументаВФайле <> ТипДокументаВНастройках Тогда
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Тип электронного документа файла (%1) не соответствует виду документа в настройках (%2).'"),
			ТипДокументаВФайле,
			ТипДокументаВНастройках);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	СтруктураВозврата.НастройкиОтправки.Формат = ФорматВФайле;
	
	Если ЗначениеЗаполнено(ВидДокументаВНастройках) Тогда
		
		СтруктураВозврата.НастройкиОтправки.ВидДокумента = ВидДокументаВНастройках;
		
	Иначе
		
		ВидДокументаПоФайлу = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокументаВФайле);
		
		СтруктураВозврата.НастройкиОтправки.ВидДокумента = ВидДокументаПоФайлу;
		
	КонецЕсли;
	
	СтруктураВозврата.НастройкиОтправки.ТипДокумента = ТипДокументаВФайле;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция НовыеНастройкиОтправкиОбъекта()
	
	НастройкиОтправки = Новый Структура;
	
	НастройкиОтправки.Вставить("ОбъектУчета",                     Справочники.ВерсииФайлов.ПустаяСсылка());
	НастройкиОтправки.Вставить("Направление",                     Перечисления.НаправленияЭДО.Исходящий);
	НастройкиОтправки.Вставить("Отправитель",                     Справочники.Организации.ПустаяСсылка());
	НастройкиОтправки.Вставить("Получатель",                      Справочники.Контрагенты.ПустаяСсылка());
	НастройкиОтправки.Вставить("Договор",                         "");
	НастройкиОтправки.Вставить("ТипДокумента",                    Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	НастройкиОтправки.Вставить("ВидДокумента",                    Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	НастройкиОтправки.Вставить("Формат",                          "");
	НастройкиОтправки.Вставить("МаршрутПодписания",               Справочники.МаршрутыПодписания.ПустаяСсылка());
	НастройкиОтправки.Вставить("СпособОбмена",                    Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	НастройкиОтправки.Вставить("ИдентификаторОтправителя",        "");
	НастройкиОтправки.Вставить("ИдентификаторПолучателя",         "");
	НастройкиОтправки.Вставить("ТребуетсяОтветнаяПодпись",        Истина);
	НастройкиОтправки.Вставить("ТребуетсяИзвещениеОПолучении",    Истина);
	НастройкиОтправки.Вставить("ВыгружатьДополнительныеСведения", Истина);
	НастройкиОтправки.Вставить("ОбменБезПодписи",                 Ложь);
	НастройкиОтправки.Вставить("Формировать",                     Истина);
	НастройкиОтправки.Вставить("ВерсияФорматаУстановленаВручную", Истина);
	НастройкиОтправки.Вставить("ЗаполнениеКодаТовара",            "");
	
	Возврат НастройкиОтправки;
	
КонецФункции

Функция СформироватьФормализованныйЭД(ДанныеДляСоздания)
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета.Добавить(
		ДанныеДляСоздания.ВерсияДляОтправки);
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	ПараметрыВыполненияДействийПоЭДО.НастройкиОбъектов.Вставить(
		ДанныеДляСоздания.ВерсияДляОтправки,
		ДанныеДляСоздания.НастройкиОтправки);
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);
	
	Если РезультатФормирования.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Сформировать] = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать формализованный ЭД.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|ГДЕ
		|	АктуальныеДокументыЭДО.ОбъектУчета = &ОбъектУчета";
	Запрос.УстановитьПараметр("ОбъектУчета", ДанныеДляСоздания.ВерсияДляОтправки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьПроизвольныйЭД(ДанныеДляСоздания)
	
	НастройкиОтправки = ДанныеДляСоздания.НастройкиОтправки;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", НастройкиОтправки.Отправитель);
	ПараметрыФормирования.Вставить("Контрагент", НастройкиОтправки.Получатель);
	ПараметрыФормирования.Вставить("Договор", НастройкиОтправки.Договор);
	ПараметрыФормирования.Вставить("ОбъектыУчета", 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляСоздания.ВерсияДляОтправки));
	ПараметрыФормирования.Вставить("ВидДокумента", НастройкиОтправки.ВидДокумента);
	
	РеквизитыДокументаДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляСоздания.Документ,
		"ДатаРегистрации, РегистрационныйНомер, Сумма");
	
	СодержаниеДокумента = ФорматыЭДО.НовоеОписаниеФайлаДокумента();
	СодержаниеДокумента.ТипДокумента = НастройкиОтправки.ТипДокумента;
	СодержаниеДокумента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	
	Если ЗначениеЗаполнено(РеквизитыДокументаДО.ДатаРегистрации) Тогда
		СодержаниеДокумента.НомерДокумента = РеквизитыДокументаДО.ДатаРегистрации;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыДокументаДО.РегистрационныйНомер) Тогда
		СодержаниеДокумента.ДатаДокумента = РеквизитыДокументаДО.РегистрационныйНомер;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыДокументаДО.Сумма) Тогда
		СодержаниеДокумента.СуммаДокумента = РеквизитыДокументаДО.Сумма;
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("СодержаниеДокумента", СодержаниеДокумента);
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		ДанныеДляСоздания.ФайлДляОтправки,
		ДанныеДляСоздания.ВерсияДляОтправки);
	
	Если Не ЗначениеЗаполнено(ДанныеФайлаИДвоичныеДанные) Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось получить данные файла для отправки.'");
		
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение);
	ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
	ИмяФайла = СтрЗаменить(ИмяФайла, " ", "_");
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыФайла.Вставить("АдресХранилища",
		ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	
	ДокументЭДО = ЭлектронныеДокументыЭДО.СоздатьПроизвольныйДокумент(
		ПараметрыФормирования, ПараметрыФайла);
	
	Возврат ДокументЭДО;
	
КонецФункции

Функция СкопироватьПодписиВФайлЭД(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Истина);
	СтруктураВозврата.Вставить("Описание", "");
	
	ФайлЭД = Неопределено;
	СообщениеЭДО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ДокументЭДО,
			|	СообщениеЭДО.Ссылка КАК СообщениеЭДО,
			|	СообщениеЭДО.ОсновнойФайл КАК ФайлЭД
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка = &ДокументЭДО
			|	И СообщениеЭДО.Состояние = &Состояние";
	Запрос.УстановитьПараметр("ДокументЭДО", ДанныеДляСоздания.ДокументЭДО);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСообщенийЭДО.Подписание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СообщениеЭДО = Выборка.СообщениеЭДО;
		ФайлЭД = Выборка.ФайлЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СообщениеЭДО)
		Или Не ЗначениеЗаполнено(ФайлЭД) Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Для созданного документа ЭДО не найдено сообщение с файлом, готовые к подписанию.
				|Проверьте содержимое отправляемого файла и повторите отправку.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ДанныеДляСоздания.Вставить("СообщениеЭДО", СообщениеЭДО);
	ДанныеДляСоздания.Вставить("ФайлЭД", ФайлЭД);
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеДляСоздания.ВерсияДляОтправки);
	
	Если УстановленныеПодписи.Количество() = 0 Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Не найдены подписи, установленные на файл для отправки. Проверье подписание файла и повторите отправку.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ПодписанныеДокументы = Новый Массив;
	
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		
		Сертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(Подпись.Сертификат);
		
		ОписаниеПодписанногоДокумента = Новый Структура;
		ОписаниеПодписанногоДокумента.Вставить("Ссылка", СообщениеЭДО);
		ОписаниеПодписанногоДокумента.Вставить("ВыбранныйСертификат", Сертификат);
		ОписаниеПодписанногоДокумента.Вставить("СвойстваПодписи", Подпись);
		ОписаниеПодписанногоДокумента.Вставить("ПрисоединенныйФайл", ФайлЭД);
		ОписаниеПодписанногоДокумента.Вставить("ОбновитьДанные", Ложь);
		ОписаниеПодписанногоДокумента.Вставить("Данные", Неопределено);
		
		ПодписанныеДокументы.Добавить(ОписаниеПодписанногоДокумента);
		
	КонецЦикла;
	
	НаборДействий = Новый Соответствие;
	НаборДействий.Вставить(Перечисления.ДействияПоЭДО.Подписать, Ложь);
	
	ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(
		ДанныеДляСоздания.ДокументЭДО);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ИтогДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО();
	
	РезультатВыполнения = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДОПослеПодписания(
		ПодписанныеДокументы,
		ПараметрыВыполненияДействийЭДО,
		КонтекстДиагностики,
		ИтогДействийПоЭДО);
	
	Если РезультатВыполнения.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Подписать] = 0  Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось скопировать подписи файла и выполнить процедуры после подписания.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОтправитьЭДОператору(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Истина);
	СтруктураВозврата.Вставить("Описание", "");
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
		НаборДействий, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке);
	
	Если Не НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов() Тогда
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
			НаборДействий, Перечисления.ДействияПоЭДО.Отправить);
	КонецЕсли;
	
	ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(
		ДанныеДляСоздания.ДокументЭДО);
	
	ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийЭДО);
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает ошибку, возникную в ходе формирования и отправки ЭД на основании документа ДО.
// Если количество попыток обработки менее трех, то происходит запись в журнал регистрации.
// Если количество попыток обработки три и более, то происходит удаление документа из очереди отправки ЭДО,
// состояние документа переводится в статус "ОшибкаПередачи", а также записывается ошибка в регистр ошибок ЭДО
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * ДокументЭДО - ДокументСсылка.ЭлектронныйДокументЭДОИсходящий - Сформированный ЭД, заполняется в дальнейшем
//      * СообщениеЭДО - ДокументСсылка.СообщениеЭДО - сообщение ЭДО, заполняется в дальнейшем
//      * ФайлЭД - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы - файл ЭД, заполняется в дальнейшем
//  Описание - Строка - Описание возникшей ошибки.
//  ПопыткаОбрабокти - Число - Текущая попытка обработки документа
// 
Процедура ОбработатьОшибкуФормированияЭД(ДанныеДляСоздания, Описание, ПопыткаОбработки)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСозданияЭДНаОснованииДокументовДО(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВнутренниеДокументы,
		ДанныеДляСоздания.Документ,
		СтрШаблон(НСтр("ru = 'При отправке документа %1 по ЭДО возникли поблемы:'"),
				ДанныеДляСоздания.Документ)
			+ Символы.ПС
			+ Описание);
	
	Если ПопыткаОбработки > 2 Тогда
		
		НачатьТранзакцию();
		Попытка
			РегистрыСведений.ОшибкиЭДОКИсправлению.ДобавитьЗаписьОбОшибке(
				ДанныеДляСоздания.Документ,
				Описание);
			
			РегистрыСведений.ОчередьОтправкиДокументовЭДО.УдалитьИзОчереди(ДанныеДляСоздания.Документ);
			
			СостояниеДокумента = РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(
					ДанныеДляСоздания.Документ);
			
			ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
				ДанныеДляСоздания.Документ,
				СостояниеДокумента.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи,
				Перечисления.НаправленияЭДО.Исходящий);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось удалить документ из очереди отправки сообщений ЭДО.'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Не удалось удалить документ %1 из очереди отправки сообщений ЭДО и сделать запись о ошибке отправки по причине:'"),
					ДанныеДляСоздания.Документ)
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВозможностиСозданияЭД

// Определяет готовность документа документооборота к ЭДО.
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы  - Ссылка на документ.
//  ВыводитьСообщение - Булево - Признак выводить ли сообщения о не выполнении условий.
//  КонтрагентыГотовыеКЭДО - Массив из Справочник.Контрагенты - Заполняется массивом контрагентов
//                                                с которыми возможен обмен по ЭДО данным документом.
//  ПроверятьПодписанДокумент - Булево - Проверять подписание документа в таблице сторон.
//  НаправлениеЭД - Перечисление.НаправленияЭД - Направление ЭД. Если не задано, то считается исходящим документом.
// 
// Возвращаемое значение:
//  Булево - признак готовности.
//
Функция ДокументГотовКФормированиюЭД(Документ, ВыводитьСообщения = Ложь,
	КонтрагентыГотовыеКЭДО = Неопределено, ПроверятьПодписаниеДокумента = Истина,
	НаправлениеЭД = Неопределено) Экспорт
	
	ЭтоВходящийДокумент = Ложь;
	Если НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ЭтоВходящийДокумент = Истина;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД"),
			ВыводитьСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицыДляПроверки = ТаблицыДляПроверкиВозможностиФормирования(Документ, НаправлениеЭД);
	
	Если ТаблицыДляПроверки.Организации.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьПодписаниеДокумента
		И (Не ЗначениеЗаполнено(ТаблицыДляПроверки.Организации[0].Подписант)
		Или ТаблицыДляПроверки.Организации[0].Подписан <> Истина) Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Документ не подписан с нашей стороны.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ТаблицыДляПроверки.Организации[0].Организация;
	
	Если ТаблицыДляПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'У организации %1 нет учетных записей ЭДО.'"), Организация),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.Контрагенты.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В таблице сторон не указаны контрагенты.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Контрагент = ТаблицыДляПроверки.Контрагенты[0].Контрагент;
	ВидДокумента = ТаблицыДляПроверки.Контрагенты[0].ВидДокумента;
	
	Если ЭтоВходящийДокумент Тогда
		
		Если ТаблицыДляПроверки.НастройкиПриемаДО.Количество() = 0
			Или ТаблицыДляПроверки.НастройкиПриема.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Нет правил приема документов вида %1 от контрагента %2'"),
					ВидДокумента, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ИДКонтрагента = ТаблицыДляПроверки.НастройкиПриема[0].ИдентификаторКонтрагента;
		ИДОрганизации = ТаблицыДляПроверки.НастройкиПриема[0].ИдентификаторОрганизации;
		
		Если (ЗначениеЗаполнено(ИДКонтрагента) Или ЗначениеЗаполнено(ИДОрганизации))
			И ТаблицыДляПроверки.ДействующиеНастройкиПриема.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Соглашение по обмену документами между %1 и %2 не действует.'"),
					Организация, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ТаблицыДляПроверки.НастройкиОтправкиДО.Количество() = 0
			Или ТаблицыДляПроверки.НастройкиОтправки.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Нет правил отправки документов вида %1 контрагенту %2.'"),
					ВидДокумента, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если ТаблицыДляПроверки.ДействующиеНастройкиОтправки.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Соглашение по обмену документами между %1 и %2 не действует.'"),
					Организация, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ФайлыДокумента.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В документе нет файла для отправки.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	ИначеЕсли ТаблицыДляПроверки.ФайлыДокумента.Количество() > 1 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В документе более одного файла для отправки. Отправлять по ЭДО можно только один файл.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ПодписиФайлов.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Нет подписей файла документа.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ТаблицыДляПроверки.ПодписиФайлов Цикл
		
		Если Не СтрокаЭП.ПодписьВерна Или Не СтрокаЭП.СертификатДействителен Тогда
			СообщитьОНевозможностиФормирования(Документ,
				НСтр("ru = 'Среди подписей файла есть неверные подписи или подписи с недействительным сертификатом.'"),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыДляПроверки.ОтпечаткиДляОтправки.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Среди подписей файла нет тех, которые разрешены к обмену ЭДО.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоВходящийДокумент Тогда
		
		Если (ЗначениеЗаполнено(ИДКонтрагента) Или ЗначениеЗаполнено(ИДОрганизации)) Тогда
			
			КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				ТаблицыДляПроверки.ДействующиеНастройкиПриема.ВыгрузитьКолонку("Контрагент"));
			
		Иначе
			
			КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				ТаблицыДляПроверки.НастройкиПриема.ВыгрузитьКолонку("Контрагент"));
			
		КонецЕсли;
		
	Иначе
		
		КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			ТаблицыДляПроверки.ДействующиеНастройкиОтправки.ВыгрузитьКолонку("Контрагент"));
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьОНевозможностиФормирования(Документ, Причина, ВыводитьСообщения)
	
	Если Не ВыводитьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = 
		СтрШаблон(НСтр("ru = 'Документ %1 не может быть отправленным по ЭДО, поскольку:'"), Документ)
		+ Символы.ПС
		+ Причина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Возвращает таблицы для проверки возможности формирования ЭД по документу ДО.
// 
// Параметры:
//  Документ - Справочник.ВнутренниеДокументы - Ссылка на документ ДО для которого необходимо проверить
//                                              возможность обмена по ЭДО.
//  НаправлениеЭД - Перечисление.НаправленияЭД - Направление обмена ЭДО. Если не указано, то считается
//                                               что идет проверка на возможность отправки по ЭДО.
// 
// Возвращаемое значение:
//  Структура - таблицы для проверки:
//      * Организации - ТаблицаЗначений:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация документа.
//          * ВидДокумента - Справочник.ВидыВнутреннихДокументов - Вид документа ДО.
//          * Подписан - Булево - Стоит ли отметка о нашем подписании в таблице сторон.
//          * Подписант - Справочник.Пользователи - Подписант с нашей стороны.
//      * УчетныеЗаписиЭДО - ТаблицаЗначений:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация документа.
//          * ИдентификаторЭДО - Строка - Идентификатор ЭДО организации.
//      * Контрагенты - ТаблицаЗначений:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация документа.
//          * Контрагент - Справочник.Контрагенты - Контрагент документа.
//          * ВидДокумента - Справочник.ВидыВнутреннихДокументов - Вид документа ДО.
//      * НастройкиОтправкиДО - ТаблицаЗначений - Присутствует только если
//                                                направление ЭД - исходящий или не задано.:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки ДО.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки ДО.
//          * ВидЭД - Перечисление.ВидыЭД - Вид ЭД указанный в настройках отправки.
//      * НастройкиОтправки - ТаблицаЗначений - Присутствует только если
//                                                направление ЭД - исходящий или не задано.:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для отправки документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//      * ДействующиеНастройкиОтправки - ТаблицаЗначений - Присутствует только если
//                                                направление ЭД - исходящий или не задано.:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для отправки документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//          * Статус - Перечисление.СтатусыПриглашений - Статус соглашения об обмене ЭДО.
//      * НастройкиПриемаДО - ТаблицаЗначений - Присутствует только если направление ЭД - входящий:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ВидЭД - Перечисление.ВидыЭД - Вид ЭД настройки.
//      * НастройкиПриема - ТаблицаЗначений - Присутствует только если направление ЭД - входящий:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для получения документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//      * ДействующиеНастройкиПриема - ТаблицаЗначений - Присутствует только если направление ЭД - входящий:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для получения документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//          * Статус - Перечисление.СтатусыПриглашений - Статус соглашения об обмене ЭДО.
//      * ФайлыДокумента - ТаблицаЗначений:
//          * Файл - Справочник.Файлы - Файл документа.
//          * ТекущаяВерсия - Справочник.ВерсииФайлов - Текущая версия файла.
//      * ПодписиФайлов - ТаблицаЗначений:
//          * Файл - Справочник.Файлы - Файл документа.
//          * ТекущаяВерсия - Справочник.ВерсииФайлов - Текущая версия файла.
//          * Отпечаток - Строка - Отпечаток сертификата подписи.
//          * ПодписьВерна - Булево - Указывает, верна ли подпись файла.
//          * СертификатДействителен - Булево - Указывает, действителен ли сертификат подписи файла.
//      * ОтпечаткиДляОтправки - ТаблицаЗначений:
//          * Файл - Справочник.Файлы - Файл документа.
//          * ТекущаяВерсия - Справочник.ВерсииФайлов - Текущая версия файла.
//          * Отпечаток - Строка - Отпечаток сертификата подписи.
Функция ТаблицыДляПроверкиВозможностиФормирования(Документ, НаправлениеЭД = Неопределено)
	
	ПолучатьНастройкиОтправки = Истина;
	ПолучатьНастройкиПриема = Ложь;
	
	Если НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ПолучатьНастройкиОтправки = Ложь;
		ПолучатьНастройкиПриема = Истина;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументыСтороны.Ссылка КАК Документ,
		|	ВнутренниеДокументыСтороны.Сторона КАК Организация,
		|	ВнутренниеДокументыСтороны.Ссылка.ВидДокумента КАК ВидДокумента,
		|	ВнутренниеДокументыСтороны.Подписан КАК Подписан,
		|	ВнутренниеДокументыСтороны.Подписал КАК Подписант
		|ПОМЕСТИТЬ ДокументСОрганизацией
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
		|ГДЕ
		|	ВнутренниеДокументыСтороны.Ссылка = &Документ
		|	И ВнутренниеДокументыСтороны.НомерСтроки = 1
		|	И ВнутренниеДокументыСтороны.Сторона ССЫЛКА Справочник.Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ПОМЕСТИТЬ УчетныеЗаписиЭДООрганизации
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументСОрганизацией.Организация = УчетныеЗаписиЭДО.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	ВнутренниеДокументыСтороны.Сторона КАК Контрагент,
		|	ДокументСОрганизацией.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ДокументСоСторонами
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
		|		ПО ДокументСОрганизацией.Документ = ВнутренниеДокументыСтороны.Ссылка
		|ГДЕ
		|	ВнутренниеДокументыСтороны.Сторона ССЫЛКА Справочник.Контрагенты";
	
	Если ПолучатьНастройкиОтправки Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|"
			+
			"ВЫБРАТЬ
			|	ДокументСоСторонами.Документ КАК Документ,
			|	ДокументСоСторонами.Организация КАК Организация,
			|	ДокументСоСторонами.Контрагент КАК Контрагент,
			|	НастройкиОтправкиДО.ВидДокументаЭДО КАК ВидДокументаЭДО,
			|	НастройкиОтправкиДО.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
			|	НастройкиОтправкиДО.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
			|	НастройкиОтправкиДО.Формат КАК Формат
			|ПОМЕСТИТЬ НастройкиОтправкиДО
			|ИЗ
			|	ДокументСоСторонами КАК ДокументСоСторонами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДО
			|		ПО ДокументСоСторонами.Организация = НастройкиОтправкиДО.Отправитель
			|			И ДокументСоСторонами.Контрагент = НастройкиОтправкиДО.Получатель
			|			И ДокументСоСторонами.ВидДокумента = НастройкиОтправкиДО.ВидДокумента
			|ГДЕ
			|	НастройкиОтправкиДО.Отправлять
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиОтправкиДО.Документ КАК Документ,
			|	НастройкиОтправкиДО.Организация КАК Организация,
			|	НастройкиОтправкиДО.Контрагент КАК Контрагент,
			|	НастройкиОтправки.ИдентификаторОтправителя КАК ИдентификаторОрганизации,
			|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторКонтрагента,
			|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
			|	НастройкиОтправки.СпособОбменаЭД КАК СпособОбмена,
			|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
			|	НастройкиОтправкиДО.ВидДокументаЭДО КАК ВидДокументаЭДО,
			|	НастройкиОтправкиДО.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
			|	НастройкиОтправкиДО.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
			|	НастройкиОтправкиДО.Формат КАК Формат
			|ПОМЕСТИТЬ НастройкиОтправки
			|ИЗ
			|	НастройкиОтправкиДО КАК НастройкиОтправкиДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
			|		ПО НастройкиОтправкиДО.Организация = НастройкиОтправки.Отправитель
			|			И НастройкиОтправкиДО.Контрагент = НастройкиОтправки.Получатель
			|			И (НастройкиОтправкиДО.ВидДокументаЭДО = НастройкиОтправки.ВидДокумента
			|				ИЛИ НастройкиОтправкиДО.ВидДокументаЭДО = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиОтправки.Документ КАК Документ,
			|	НастройкиОтправки.Организация КАК Организация,
			|	НастройкиОтправки.Контрагент КАК Контрагент,
			|	НастройкиОтправки.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	НастройкиОтправки.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ПриглашенияКОбмену.Статус КАК Статус,
			|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
			|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
			|	НастройкиОтправки.СпособОбмена КАК СпособОбмена,
			|	НастройкиОтправки.ВидДокументаЭДО КАК ВидДокументаЭДО,
			|	НастройкиОтправки.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
			|	НастройкиОтправки.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
			|	НастройкиОтправки.Формат КАК Формат
			|ПОМЕСТИТЬ ДействующиеНастройкиОтправки
			|ИЗ
			|	НастройкиОтправки КАК НастройкиОтправки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
			|		ПО НастройкиОтправки.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации
			|			И НастройкиОтправки.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента
			|ГДЕ
			|	ПриглашенияКОбмену.Статус В(&СтатусыДействующегоПриглашения)";
	КонецЕсли;
	
	Если ПолучатьНастройкиПриема Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|"
			+
			"ВЫБРАТЬ
			|	ДокументСоСторонами.Документ КАК Документ,
			|	ДокументСоСторонами.Организация КАК Организация,
			|	ДокументСоСторонами.Контрагент КАК Контрагент,
			|	ПравилаУчетаВидовЭДДО.ВидДокументаЭДО КАК ВидДокументаЭДО
			|ПОМЕСТИТЬ НастройкиПолученияДО
			|ИЗ
			|	ДокументСоСторонами КАК ДокументСоСторонами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
			|		ПО ДокументСоСторонами.Организация = ПравилаУчетаВидовЭДДО.Организация
			|			И ДокументСоСторонами.Контрагент = ПравилаУчетаВидовЭДДО.Контрагент
			|			И ДокументСоСторонами.ВидДокумента = ПравилаУчетаВидовЭДДО.ВидДокумента
			|ГДЕ
			|	ПравилаУчетаВидовЭДДО.Принимать
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПолученияДО.Документ КАК Документ,
			|	НастройкиПолученияДО.Организация КАК Организация,
			|	НастройкиПолученияДО.Контрагент КАК Контрагент,
			|	НастройкиПолучения.ИдентификаторОтправителя КАК ИдентификаторКонтрагента,
			|	НастройкиПолучения.ИдентификаторПолучателя КАК ИдентификаторОрганизации
			|ПОМЕСТИТЬ НастройкиПолучения
			|ИЗ
			|	НастройкиПолученияДО КАК НастройкиПолученияДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолучения
			|		ПО НастройкиПолученияДО.Организация = НастройкиПолучения.Получатель
			|			И НастройкиПолученияДО.Контрагент = НастройкиПолучения.Отправитель
			|			И НастройкиПолученияДО.ВидДокументаЭДО = НастройкиПолучения.ВидДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПолучения.Документ КАК Документ,
			|	НастройкиПолучения.Организация КАК Организация,
			|	НастройкиПолучения.Контрагент КАК Контрагент,
			|	НастройкиПолучения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	НастройкиПолучения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ПриглашенияКОбмену.Статус КАК Статус
			|ПОМЕСТИТЬ ДействующиеНастройкиПолучения
			|ИЗ
			|	НастройкиПолучения КАК НастройкиПолучения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
			|		ПО НастройкиПолучения.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации
			|			И НастройкиПолучения.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента
			|ГДЕ
			|	ПриглашенияКОбмену.Статус В(&СтатусыДействующегоПриглашения)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		+ 
		"
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.СертификатДействителен КАК СертификатДействителен
		|ПОМЕСТИТЬ ПодписиФайловДокумента
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ФайлыДокумента.ТекущаяВерсия = ЭлектронныеПодписи.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДООрганизации.Документ КАК Документ,
		|	УчетныеЗаписиЭДООрганизации.Организация КАК Организация,
		|	УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ СертификатыДляОбменаЭДО
		|ИЗ
		|	УчетныеЗаписиЭДООрганизации КАК УчетныеЗаписиЭДООрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ПО УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодписиФайловДокумента.Файл КАК Файл,
		|	ПодписиФайловДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	СертификатыДляОбменаЭДО.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ ПодписиПоДоступнымСертификатам
		|ИЗ
		|	ПодписиФайловДокумента КАК ПодписиФайловДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыДляОбменаЭДО КАК СертификатыДляОбменаЭДО
		|		ПО ПодписиФайловДокумента.Отпечаток = СертификатыДляОбменаЭДО.Отпечаток
		|ГДЕ
		|	ПодписиФайловДокумента.ПодписьВерна
		|	И ПодписиФайловДокумента.СертификатДействителен";
	
	НеобходимыеТаблицы = Новый Структура;
	НеобходимыеТаблицы.Вставить("Организации",                      "ДокументСОрганизацией");
	НеобходимыеТаблицы.Вставить("УчетныеЗаписиЭДО",                 "УчетныеЗаписиЭДООрганизации");
	НеобходимыеТаблицы.Вставить("Контрагенты",                      "ДокументСоСторонами");
	
	Если ПолучатьНастройкиОтправки Тогда
		НеобходимыеТаблицы.Вставить("НастройкиОтправкиДО",          "НастройкиОтправкиДО");
		НеобходимыеТаблицы.Вставить("НастройкиОтправки",            "НастройкиОтправки");
		НеобходимыеТаблицы.Вставить("ДействующиеНастройкиОтправки", "ДействующиеНастройкиОтправки");
	КонецЕсли;
	
	Если ПолучатьНастройкиПриема Тогда
		НеобходимыеТаблицы.Вставить("НастройкиПриемаДО",            "НастройкиПолученияДО");
		НеобходимыеТаблицы.Вставить("НастройкиПриема",              "НастройкиПолучения");
		НеобходимыеТаблицы.Вставить("ДействующиеНастройкиПриема",   "ДействующиеНастройкиПолучения");
	КонецЕсли;
	
	НеобходимыеТаблицы.Вставить("ФайлыДокумента",                   "ФайлыДокумента");
	НеобходимыеТаблицы.Вставить("ПодписиФайлов",                    "ПодписиФайловДокумента");
	НеобходимыеТаблицы.Вставить("ОтпечаткиДляОтправки",             "ПодписиПоДоступнымСертификатам");
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	" + Элемент.Значение + " КАК " + Элемент.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("СтатусыДействующегоПриглашения", Перечисления.СтатусыПриглашений.Принято);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоПакетов = РезультатыЗапроса.Количество();
	КоличествоТаблиц = НеобходимыеТаблицы.Количество();
	
	Итератор = 0;
	
	ТаблицыДляПроверки = Новый Структура;
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		Таблица = РезультатыЗапроса[КоличествоПакетов - КоличествоТаблиц + Итератор].Выгрузить();
		ТаблицыДляПроверки.Вставить(Элемент.Ключ, Таблица);
		
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Возврат ТаблицыДляПроверки;
	
КонецФункции

#КонецОбласти

#Область АннулированиеДокументов

// Аннулирование добавим позже

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Событие, Уровень, Комментарий)
	
	ЗаписьЖурналаРегистрации(Событие, Уровень, , , Комментарий);
	
КонецПроцедуры

Функция ИмяСобытияСозданияДокументовДОНаОснованииЭД()
	
	Возврат НСтр("ru = 'ЭДО.Создание документов 1С:ДО на основании ЭД'");
	
КонецФункции

Функция ИмяСобытияСозданияЭДНаОснованииДокументовДО()
	
	Возврат НСтр("ru = 'ЭДО.Создание ЭД на основании документов 1С:ДО'");
	
КонецФункции

Функция ИмяСобытияОтправкиУведомленийЭДО()
	
	Возврат НСтр("ru = 'Рассылка уведомлений о проблемах обмена ЭДО.'");
	
КонецФункции

#КонецОбласти
