
#Область ПрограммныйИнтерфейс

// Устанавливает состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДО
//  СостояниеДокументаЭДО - ПеречислениеСсылка.СостоянияВерсийЭДДО
//
Процедура УстановитьСостояниеДокументаЭДО(СсылкаНаОбъект, Контрагент, СостояниеДокументаЭДО, НаправлениеЭД = Неопределено, Комментарий = Неопределено) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(СсылкаНаОбъект, Контрагент, СостояниеДокументаЭДО, НаправлениеЭД, Комментарий);
	
КонецПроцедуры

// Возвращает состояние документа 1С:Документоборот в ЭДО.
//
// Параметры:
//  Документ - ДокументСсылка.ВнутренниеДокументы - Документ, для которого необходимо получить сведения о состоянии.
//  Дата - Дата - Дата, на которую необходимо получить сведения.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свежения о состоянии документа 1С:Документооборот в ЭДО.
//		* см. РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента
//
Функция ПолучитьСостояниеДокумента(Документ, Дата = Неопределено, Контрагент = Неопределено) Экспорт

	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(Документ, Дата, Контрагент);

КонецФункции 

// Удаляет состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДО
//
Процедура УдалитьСостояниеДокументаЭДО(СсылкаНаОбъект) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Удалить(СсылкаНаОбъект);
	
КонецПроцедуры

// Определяет готовность документа документооборота к ЭДО.
//  см ОбменСКонтрагентамиСервер.ДокументГотовКФормированиюЭД()
Функция ДокументГотовКФормированиюЭД(
			Документ, 
			ВыводитьСообщение = Ложь, 
			КонтрагентыГотовыеКЭДО = Неопределено, 
			ПроверятьПодписанДокумент = Истина,
			НаправлениеЭД = Неопределено) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменСКонтрагентамиДОСервер.ДокументГотовКФормированиюЭД(
		Документ,
		ВыводитьСообщение,
		КонтрагентыГотовыеКЭДО,
		ПроверятьПодписанДокумент,
		НаправлениеЭД);
	
КонецФункции

Функция ПараметрыДокументаПоЭДО(ДокументДО) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьЭД", Ложь);
	СтруктураВозврата.Вставить("ЭлектронныйДокумент", Неопределено);
	СтруктураВозврата.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ВидДокументаЭДО", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТипДокументаЭДО", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТребуетсяПодтверждение", Истина);
	СтруктураВозврата.Вставить("Подписан", Ложь);
	СтруктураВозврата.Вставить("СостояниеДО", Перечисления.СостоянияВерсийЭДДО.НеСформирован);
	СтруктураВозврата.Вставить("ДоступнаКорректировкаЭД", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	АктуальныеДокументыЭДО.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияДокументовЭДО.Состояние КАК Состояние,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|			ПО АктуальныеДокументыЭДО.ВидЭлектронногоДокумента = ВидыДокументовЭДО.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|			ПО АктуальныеДокументыЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		ПО ФайлыДокумента.ТекущаяВерсия = АктуальныеДокументыЭДО.ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК СостояниеДОПоЭДО
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних КАК СостояниеДокументовПоЭДОСрезПоследних
		|ГДЕ
		|	СостояниеДокументовПоЭДОСрезПоследних.ДокументДО = &Документ";
	Запрос.УстановитьПараметр("Документ", ДокументДО);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоСвязаннымДокументамЭДО = МассивРезультатов[1];
	ВыборкаСостоянийДО = МассивРезультатов[2].Выбрать();
	
	Если Не РезультатПоСвязаннымДокументамЭДО.Пустой() Тогда
		Выборка = РезультатПоСвязаннымДокументамЭДО.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата.ЕстьЭД = Истина;
		СтруктураВозврата.ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
		СтруктураВозврата.Направление = 
			?(ТипЗнч(Выборка.ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"),
				Перечисления.НаправленияЭДО.Входящий,
				Перечисления.НаправленияЭДО.Исходящий);
		СтруктураВозврата.ВидДокументаЭДО = Выборка.ВидЭлектронногоДокумента;
		СтруктураВозврата.ТипДокументаЭДО = Выборка.ТипДокумента;
		СтруктураВозврата.Состояние = Выборка.Состояние;
		СтруктураВозврата.ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение;
		СтруктураВозврата.ДоступнаКорректировкаЭД =
			ОбменСКонтрагентамиДОСлужебный.ВидДокументаКорректируетсяНепосредственно(Выборка.ВидЭлектронногоДокумента);
		
		Если ВыборкаСостоянийДО.Следующий() Тогда
			СостояниеДО = ВыборкаСостоянийДО.СостояниеДОПоЭДО;
			
			СтруктураВозврата.СостояниеДО = СостояниеДО;
			СтруктураВозврата.Подписан = Истина;
		КонецЕсли;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО,
		"Организация, Контрагент, ВидДокумента");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		РеквизитыДокумента.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		РеквизитыДокумента.Организация,
		РеквизитыДокумента.Контрагент,
		РеквизитыДокумента.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		СтруктураВозврата.ЕстьЭД = Ложь;
		СтруктураВозврата.ЭлектронныйДокумент = Неопределено;
		СтруктураВозврата.Направление = Перечисления.НаправленияЭДО.Исходящий;
		СтруктураВозврата.ВидДокументаЭДО = НастройкиОтправки.ВидДокументаЭДО;
		СтруктураВозврата.ТипДокументаЭДО = НастройкиОтправки.ТипДокумента;
		СтруктураВозврата.Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
		СтруктураВозврата.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
		СтруктураВозврата.ДоступнаКорректировкаЭД =
			ОбменСКонтрагентамиДОСлужебный.ВидДокументаКорректируетсяНепосредственно(НастройкиОтправки.ВидДокументаЭДО);
		
		Если ВыборкаСостоянийДО.Следующий() Тогда
			
			СостояниеДО = ВыборкаСостоянийДО.СостояниеДОПоЭДО;
			
			СтруктураВозврата.СостояниеДО = СостояниеДО;
			СтруктураВозврата.Подписан = Не (СостояниеДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован
				Или СостояниеДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно);
			
		Иначе
			
			СтруктураВозврата.СостояниеДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован;
			СтруктураВозврата.Подписан = Ложь;
			
		КонецЕсли;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает состояние версии документа ДО по ЭДО.
//
// Параметры:
//  ДокументДО - документ документооборота .
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по ЭДО.
// 
// Возвращаемое значение:
//  СостоянияВерсийЭДДО - ПеречислениеСсылка.СостоянияВерсийЭДДО - состояние версии документа ДО по ЭДО.
//
Функция ДанныеСостоянияДокументаПоЭДО(ДокументДО, Контрагент = Неопределено, НаДату = Неопределено, НаправлениеЭД = Неопределено) Экспорт

	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(ДокументДО, Контрагент, НаДату, НаправлениеЭД);

КонецФункции 

Функция СведенияОЭДИзФайлаДО(Файл, Версия = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Файл) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(Файл, Версия);
	
	Возврат СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	
КонецФункции

Функция СведенияОЭДИзФайла(АдресВременногоХранилищаФайла) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДатаДокумента", Неопределено);
	СтруктураВозврата.Вставить("НомерДокумента", "");
	СтруктураВозврата.Вставить("СуммаДокумента", "");
	СтруктураВозврата.Вставить("ИмяСоздания", "");
	СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТипДокументаЭДО", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ВидДокументаЭДО", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	
	ОбщиеСведения = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(
		ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
	
	Если ОбщиеСведения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОбщиеСведения);
	
	ДанныеЭДФайла = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(
		ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
	
	Если ТипЗнч(ДанныеЭДФайла) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипДокумента = ДанныеЭДФайла.НовыйЭД.ВидЭД;
	
	СтруктураВозврата.ТипДокументаЭДО = ТипДокумента;
	СтруктураВозврата.ВидДокументаЭДО = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокумента);
	
	СтруктураВозврата.ИмяСоздания = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"),
		ТипДокумента,
		ОбщиеСведения.НомерДокумента,
		Формат(ОбщиеСведения.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.CML208
		ИЛИ ДанныеЭДФайла.НовыйЭД.ВерсияФормата = Форматы.CML402 Тогда
		
		СведенияОЭД = СведенияОЭДФорматаCML(ДанныеЭДФайла);
		
	Иначе
		
		СведенияОЭД = СведенияОЭДФорматаФНС(ДанныеЭДФайла);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, СведенияОЭД);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует ЭД по подписанным документам ДО со статусом "Поставлен в очередь на отправку"
// 
// Возвращаемое значение:
//	Структура -- См. ОбменСКонтрагентамиДОСервер.СформироватьЭДПоГотовымДокументамДО()
Функция СформироватьЭДПоГотовымДокументамДО() Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СформироватьЭДПоГотовымДокументамДО();
	
КонецФункции

// Формирует внутренние документы ДО на основании входящих ЭД
// 
// Параметры:
//	ПараметрыСоздания - Структура - См. ОбменСКонтрагентамиДОСервер.СформироватьДокументыДОНаОснованииВходящихЭД()
// 
// Возвращаемое значение:
//	Структура -- См. ОбменСКонтрагентамиДОСервер.СформироватьДокументыДОНаОснованииВходящихЭД()
Функция СформироватьДокументыДОНаОснованииВходящихЭД(ПараметрыСоздания = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СформироватьДокументыДОНаОснованииВходящихЭД(ПараметрыСоздания);
	
КонецФункции

Функция ЭлектронныйДокументДокументаДО(ДокументДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|		ПО Файлы.ТекущаяВерсия = АктуальныеДокументыЭДО.ОбъектУчета
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Документ", ДокументДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПодготовитьДокументККорректировке(Документ, Контрагент, НаправлениеЭДО, УдалитьЭП, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Объект,
		|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ВнутренниеДокументы.Ссылка = (ВЫРАЗИТЬ(ЭлектронныеПодписи.Объект КАК Справочник.ВнутренниеДокументы)))
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ЭлектронныеПодписи.УникальныйИдентификатор,
		|	ЕСТЬNULL(АктуальныеДокументыЭДО.ЭлектронныйДокумент, НЕОПРЕДЕЛЕНО)
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ВерсииФайлов.Ссылка = (ВЫРАЗИТЬ(ЭлектронныеПодписи.Объект КАК Справочник.ВерсииФайлов)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|		ПО ВерсииФайлов.Ссылка = АктуальныеДокументыЭДО.ОбъектУчета
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ");
	Запрос.УстановитьПараметр("Документ", Документ);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Документ, , ИдентификаторФормы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
				
				Если УдалитьЭП Тогда
					РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(
						Выборка.Объект,
						Выборка.УникальныйИдентификатор,
						Ложь,
						ИдентификаторФормы);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Тогда
					ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(Выборка.ЭлектронныйДокумент);
				КонецЕсли;
				
			Иначе
				
				Если УдалитьЭП Тогда
					ЭлектроннаяПодпись.УдалитьПодпись(
						Выборка.Объект,
						Выборка.УникальныйИдентификатор,
						ИдентификаторФормы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		
		Для Каждого Сторона Из ДокументОбъект.Стороны Цикл
			Сторона.Подписан = Ложь;
			Сторона.Подписал = Неопределено;
			Сторона.ДатаПодписи = Неопределено;
		КонецЦикла;
		
		ДокументОбъект.Записать();
		
		ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
			Документ, Контрагент, Перечисления.СостоянияВерсийЭДДО.НеСформирован, НаправлениеЭДО);
		
		ЗафиксироватьТранзакцию();
		
		РазблокироватьДанныеДляРедактирования(Документ, ИдентификаторФормы);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(Нстр("ru = 'При подготовке документа ""%1"" к корректировке произошла ошибка:
										|%2'"),
									Документ,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЭДО.Подготовка к документа к корректировке'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ,
			КонтрагентыГотовыеКЭДО = Неопределено,
			НаправлениеЭД = Неопределено,
			ПроверятьПодписанДокумент = Истина,
			УстановитьСостояниеПодписан = Ложь,
			ВыводитьСообщение = Истина) Экспорт
		
	Возврат ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
				Документ,
				КонтрагентыГотовыеКЭДО,
				НаправлениеЭД,
				ПроверятьПодписанДокумент,
				УстановитьСостояниеПодписан,
				ВыводитьСообщение);
		
КонецФункции

// Ставит документы в очередь на отправку документов ЭДО
// 
// Параметры:
//  МассивДокументов - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо поставить в очередь на отправку
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, успешно ли завершилась операция
//      * ПоставленныеВОчередь - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО
//                               поставленных в очередь
// 
Функция ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов) Экспорт
	
	ПоставленныеВОчередь = Новый Массив;
	
	Для Каждого Документ Из МассивДокументов Цикл
		ПоставленВОчередь = ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
				Документ,
				Неопределено,
				Перечисления.НаправленияЭДО.Исходящий);
		
		Если ПоставленВОчередь Тогда
			ПоставленныеВОчередь.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", (МассивДокументов.Количество() = ПоставленныеВОчередь.Количество()));
	СтруктураВозврата.Вставить("ПоставленныеВОчередь", ПоставленныеВОчередь);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Принудительно закрывает обмен ЭДО документов ДО
// 
// Параметры:
//  МассивДокументов - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо закрыть принудительно
//  ПричинаЗакрытия - Строка - Описание причины закрытия документов.
// 
// Возвращаемое значение:
//  Структура:
//      * Ошибки - Массив из Строка - Описания ошибок, возникших в ходе выполнения операции
//      * ЗакрытыеДокументы - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО
//                            закрытых принудительно в ходе выполнения операции
//      * КоличествоОбработанныхЭД - Число - Количество ЭД, принудительно закрытых в ходе выполнения операции
// 
Функция ЗакрытьДокументыПринудительно(ДокументыДО, ПричинаЗакрытия) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("ЗакрытыеДокументы", Новый Массив);
	СтруктураВозврата.Вставить("КоличествоОбработанныхЭД", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Документ,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|		ПО Файлы.ТекущаяВерсия = АктуальныеДокументыЭДО.ОбъектУчета
		|ГДЕ
		|	Файлы.ВладелецФайла В(&ДокументыДО)";
	
	Запрос.УстановитьПараметр("ДокументыДО", ДокументыДО);
	
	ЭДДокументовДО = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Документ Из ДокументыДО Цикл
		
		Успех = Истина;
		
		СтрокиЭД = ЭДДокументовДО.НайтиСтроки(Новый Структура("Документ", Документ));
		
		МассивЭД = Новый Массив;
		
		Для Каждого СтрокаЭД Из СтрокиЭД Цикл
			Если ЗначениеЗаполнено(СтрокаЭД.ЭлектронныйДокумент)
				И МассивЭД.Найти(СтрокаЭД.ЭлектронныйДокумент) = Неопределено Тогда
				
				МассивЭД.Добавить(СтрокаЭД.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			Если МассивЭД.Количество() > 0 Тогда
				
				НаборДействий = Новый Соответствие;
				ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
					НаборДействий, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
				
				ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
				ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
				ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы = МассивЭД;
				
				ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийЭДО);
				
			КонецЕсли;
			
			СостояниеДокумента = РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(
				Документ);
			
			Если СостояниеДокумента.Состояние <> Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
				УстановитьСостояниеДокументаЭДО(
					Документ,
					СостояниеДокумента.Контрагент,
					Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно,
					СостояниеДокумента.Направление,
					ПричинаЗакрытия);
			КонецЕсли;
			
			РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(Документ);
			РегистрыСведений.ОчередьОтправкиДокументовЭДО.УдалитьИзОчереди(Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СтруктураВозврата.Ошибки.Добавить(
				СтрШаблон(НСтр("ru = 'Не удалось принудительно закрыть обмен по ЭДО документа %1 по причине:'"),
						Документ)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Успех = Ложь;
			
		КонецПопытки;
		
		Если Успех Тогда
			СтруктураВозврата.КоличествоОбработанныхЭД = СтруктураВозврата.КоличествоОбработанныхЭД + 1;
			СтруктураВозврата.ЗакрытыеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Ставит документы в очередь приема документов ЭДО
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД, которые необходимо
//                                                              поставить в очередь приема
// 
// Возвращаемое значение:
//  Структура:
//      * Ошибки - Массив из Строка - Описания ошибок, возникших в ходе выполнения операции
//      * ПоставленныеВОчередь - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД
//                               поставленных в очередь
//      * ИзмененныеЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД
//                               чей статус обмена был изменен
//      * ИзмененныеФайлыЭД - Массив из СправочникСсылка.ЭДПрисоединенныеФайлы - Массив файлов ЭД
//                               чей статус обмена был изменен
// 
Функция ПоставитьЭДВОчередьПриема(ЭД) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("ПоставленныеВОчередь", Новый Массив);
	СтруктураВозврата.Вставить("ИзмененныеЭД", Новый Массив);
	СтруктураВозврата.Вставить("ИзмененныеСообщенияЭДО", Новый Массив);
	
	Если ТипЗнч(ЭД) = Тип("Массив") Тогда
		МассивЭД = ЭД;
	Иначе
		МассивЭД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭД);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.Ссылка КАК СообщениеЭДО
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент В(&ЭлектронныеДокументы)
		|	И СообщениеЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСообщенийЭДО.НеПолучен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В(&ЭлектронныеДокументы)
		|	И ЭлектронныйДокументВходящийЭДО.Остановлен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент В(&ЭлектронныеДокументы)
		|	И СостоянияДокументовЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", МассивЭД);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СообщенияКИзменениюСтатуса = РезультатыЗапроса[0].Выгрузить();
	ЭДКВозвратуВРаботу = РезультатыЗапроса[1].Выгрузить();
	ЭДКИзменениюСостояния = РезультатыЗапроса[2].Выгрузить();
	
	Для Каждого ЭлектронныйДокумент Из МассивЭД Цикл
		ПоставленныеВОчередь = Новый Массив;
		ИзмененныеЭД = Новый Массив;
		ИзмененныеСообщения = Новый Массив;
		
		Успех = Истина;
		
		НачатьТранзакцию();
		Попытка
			
			ОтборСтрок = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
			
			СтрокиСообщений = СообщенияКИзменениюСтатуса.НайтиСтроки(ОтборСтрок);
			
			Для Каждого СтрокаСообщения Из СтрокиСообщений Цикл
				
				СообщениеЭДО = СтрокаСообщения.СообщениеЭДО;
				
				СообщениеОбъект = СообщениеЭДО.ПолучитьОбъект();
				СообщениеОбъект.Статус = Перечисления.СтатусыСообщенийЭДО.Получен;
				СообщениеОбъект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
				СообщениеОбъект.Записать();
				
				РегистрыСведений.ОчередьПриемаСообщенийЭДО.ДобавитьЗапись(СообщениеЭДО);
				
				ПоставленныеВОчередь.Добавить(СообщениеЭДО);
				ИзмененныеСообщения.Добавить(СообщениеЭДО);
				
			КонецЦикла;
			
			СтрокиКВозвратуВРаботу = ЭДКВозвратуВРаботу.НайтиСтроки(ОтборСтрок);
			
			Если СтрокиКВозвратуВРаботу.Количество() > 0 Тогда
				ЭДОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				ЭДОбъект.Остановлен = Ложь;
				ЭДОбъект.ПричинаОстановки = Перечисления.ПричиныОстановкиЭДО.ПустаяСсылка();
				ЭДОбъект.Записать();
			КонецЕсли;
			
			СтрокиКИзменениюСостояния = ЭДКИзменениюСостояния.НайтиСтроки(ОтборСтрок);
			
			Если СтрокиКИзменениюСостояния.Количество() > 0 Тогда
				МенеджерЗаписи = РегистрыСведений.СостоянияДокументовЭДО.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
				МенеджерЗаписи.Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
				МенеджерЗаписи.СостояниеДополнение = "";
				МенеджерЗаписи.ДатаИзменения = ТекущаяДатаСеанса();
				МенеджерЗаписи.Комментарий = НСтр("ru = 'Повторно поставлен в очередь приема'");
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			Если СтрокиКИзменениюСостояния.Количество() > 0
				Или СтрокиКВозвратуВРаботу.Количество() > 0 Тогда
				
				ИзмененныеЭД.Добавить(ЭлектронныйДокумент);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СтруктураВозврата.Ошибки.Добавить(
				СтрШаблон(НСтр("ru = 'Не удалось поставить ЭД %1 в очередь на прием по причине:'"),
					ЭлектронныйДокумент)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Успех = Ложь;
			
		КонецПопытки;
		
		Если Успех Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.ПоставленныеВОчередь, ПоставленныеВОчередь);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.ИзмененныеЭД, ИзмененныеЭД);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.ИзмененныеСообщенияЭДО, ИзмененныеСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет процедуры по учету аннулирования ЭДО в 1С:ДО
// 
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому инициировано аннулирование
//   ПараметрыАннулирования - Структура из:
//       * ВидДокумента - СправочникСсылка.ВидыВнутреннихДокументов - Вид документа,
//                                             по которому инициировано аннулирование
//       * Направление - Перечисление.НаправленияЭД - Направление аннулирования,
//                                Исходящий - аннулирование инициировано нами
//                                Входящий - аннулирование инициировано контрагентом
//       * УчитыватьНедействующиеДокументы - Булево - Поддерживает ли вид документов учет недействительных документов
//       * ВариантУказанияОтменяющегоДокумента - Перечисление.ВариантыУказанияОтменяющегоДокумента -
//                                               Вариант указания отменяющего документа в виде документа
//       * ОбязательноУказаниеОтменяющегоДокумента - Булево - Обязательно ли указание отменяющего документа
//       * АннулироватьОтдельнымДокументом - Булево - Для аннулирования необходим новый документ ДО
//       * ПараметрыДокументаАннулирования - Структура из:
//           * ВидДокументаАннулирования - СправочникСсылка.ВидыВнутреннихДокументов - Вид документа,
//                                            которым учитывается аннулирование ЭДО
//           * ВопросДеятельности - СправочникСсылка.ВопросыДеятельности - Вопрос деятельности документа аннулирования
//           * Ответственный - СправочникСсылка.Пользователи - Ответственный документа аннулирования
//           * Папка - СправочникСсылка.ПапкиВнутреннихДокументов - Папка документа аннулирования
//           * ШаблонНаименования - Строка - Шаблон наименования для создаваемого документа
//           * ШаблонСодержания - Строка - Шаблон содержания для создаваемого документа
// 
Функция ОбработатьАннулирование(Документ, ПараметрыАннулирования) Экспорт
	
	// Аннулирование по ЭДО добавим позже
	Возврат Неопределено;
	
КонецФункции

// Возвращает аннулируемый документ по документу аннулирования
// 
// Параметры:
//  ДокументАннулирования - СправочникСсылка.ВнутренниеДокументы - Документ аннулирования
// 
// ВозвращаемоеЗначение:
//  СправочникСсылка.ВнутренниеДокументы, Неопределено - В случае, если переданный документ
//                          является документом аннулирования, то возвращается аннулируемый документ.
//                          Неопределено - в противном случае.
Функция АннулируемыйДокумент(ДокументАннулирования) Экспорт
	
	ДанныеАннулирования = Новый Структура;
	
	ЭтоАннулирование = ОбменСКонтрагентамиДОСлужебный.ЭтоДокументАннулированияЭДО(
		ДокументАннулирования, ДанныеАннулирования);
	
	Если Не ЭтоАннулирование Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеАннулирования.Документ;
	
КонецФункции

// Возвращает данные о запущенных процессах аннулирвоания
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Документ, для которого необходимо получить данные
//                                                    по запущеннып процессам аннулированияЭДО
// 
// Возвращаемое значение:
//  Структура из:
//      * ЗапущеноАннулирование - Булево - Указывает, запущено ли аннулирование по документу
//      * АннулированиеЗавершено - Булево - Указывает, завершен ли процесс аннулирования по документу
//      * ДокументАннулирован - Булево - Указывает, аннулирован ли документ
//      * ТребуетсяСоздатьДокумент - Булево - Указывает, необходимо ли создать документ аннулирования
//      * АннулируетсяОтдельнымДокументом - Булево - Указывает, запущено ли аннулирование отдельным документом
//      * Направление - Перечисление.НаправленияЭДО - Направление аннулирования
//      * СообщениеЭДОАннулирования - ДокументСсылка.СообщениеЭДО - Сообщение ЭДО аннулирования
//      * ДокументАннулирования - СправочникСсылка.ВнутренниеДокументы - Документ аннулирования
Функция ЗапущенныеПроцессыАннулированияДокумента(Документ) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗапущеноАннулирование", Ложь);
	СтруктураВозврата.Вставить("АннулированиеЗавершено", Ложь);
	СтруктураВозврата.Вставить("ДокументАннулирован", Ложь);
	СтруктураВозврата.Вставить("ТребуетсяСоздатьДокумент", Ложь);
	СтруктураВозврата.Вставить("АннулируетсяОтдельнымДокументом", Ложь);
	СтруктураВозврата.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("СообщениеЭДОАннулирования", Документы.СообщениеЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ДокументАннулирования", Справочники.ВнутренниеДокументы.ПустаяСсылка());
	
	// Аннулирование по ЭДО добавим позже
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СертификатыПользователяПоОтпечаткам(МассивОтпечатков, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		ПользовательДляОтбора = Пользователи.ТекущийПользователь();
	Иначе
		ПользовательДляОтбора = Пользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток В(&Отпечатки)";
	Запрос.УстановитьПараметр("Пользователь", ПользовательДляОтбора);
	Запрос.УстановитьПараметр("Отпечатки", МассивОтпечатков);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сертификат");
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СведенияОЭДФорматаФНС(ДанныеЭДФайла)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	ДеревоДанных = ДанныеЭДФайла.НовыйЭД.ЗначениеРеквизита;
	
	КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", Ложь);
	
	Если КодВалюты <> Неопределено Тогда
		
		Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтруктураВозврата.Валюта = Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СведенияОЭДФорматаCML(ДанныеЭДФайла)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	ДанныеДереваРазбора = ОбменСКонтрагентамиДО.ДанныеДереваРазбораCML(ДанныеЭДФайла.ДеревоРазбора);
	
	Если ДанныеДереваРазбора = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДанныеДокумента = ДанныеДереваРазбора.Документы.Получить(ДанныеЭДФайла.НовыйЭД.ИД);
	
	Если ДанныеДокумента.Свойство("Валюта") Тогда
		
		ДанныеВалюты = ОбменСКонтрагентамиДО.ДанныеВалютыПоДаннымCML(ДанныеДереваРазбора, ДанныеДокумента.Валюта);
		
		Если ДанныеВалюты <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеВалюты.Ссылка) Тогда
				СтруктураВозврата.Валюта = ДанныеВалюты.Ссылка;
			ИначеЕсли ЗначениеЗаполнено(ДанныеВалюты.Код) Тогда
				Валюта = Справочники.Валюты.НайтиПоКоду(ДанныеВалюты.Код);
				
				Если ЗначениеЗаполнено(Валюта) Тогда
					СтруктураВозврата.Валюта = Валюта;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти
