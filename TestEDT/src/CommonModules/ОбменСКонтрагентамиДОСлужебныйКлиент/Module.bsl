
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗадатьВопросОПодготовкеДокументамККорректировке(Форма, ОбработчикЗавершения = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОЗаписи",
			ЭтотОбъект, Контекст);
	
	Если Не ЗначениеЗаполнено(Форма.Параметры.Ключ)
		Или Форма.Модифицированность Тогда
		
		ТекстВопроса = Форма.ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подготовка документа к корректировке'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьСогласиеСформироватьДокументЭДО(Объект, Отказ, Форма) Экспорт
	
	Если Форма.ЕстьЭДО Тогда
		
		СостояниеВерсииДокументаПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ДанныеСостоянияДокументаПоЭДО(Объект.Ссылка);
		Если Не ЗначениеЗаполнено(СостояниеВерсииДокументаПоЭДО) Тогда
			
			КонтрагентыГотовыеКЭДО = Неопределено;
			Если ОбменСКонтрагентамиДОВызовСервера.ДокументГотовКФормированиюЭД(Объект.Ссылка, Ложь, КонтрагентыГотовыеКЭДО) Тогда
				
				ПараметрыОбработчика = Новый Структура();
				ПараметрыОбработчика.Вставить("ЭтаФорма", Форма);
				ПараметрыОбработчика.Вставить("Объект", Объект);
				ПараметрыОбработчика.Вставить("КонтрагентыГотовыеКЭДО", КонтрагентыГотовыеКЭДО);
				
				Оповещение = Новый ОписаниеОповещения("ВопросОтправкиПоЭДОЗавершение", ЭтотОбъект, ПараметрыОбработчика);
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Документ готов к отправке по ЭДО. 
					|Поставить в очередь на отправку по ЭДО сейчас?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОбъекты1СДокументооборотИЭДО() Экспорт
	
	ТекстСостояния =
		НСтр("ru = 'Формирование документов ЭДО на основании созданных внутренних документов 1С:Документооборот.'");
	Состояние( , , ТекстСостояния);
	
	РезультатФормированияЭД = ОбменСКонтрагентамиДОВызовСервера.СформироватьЭДПоГотовымДокументамДО();
	
	ТекстРезультатаФормированияЭД =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияЭДПоДокументамДО(
			РезультатФормированияЭД.КоличествоКОбработке,
			РезультатФормированияЭД.КоличествоСозданных,
			РезультатФормированияЭД.КоличествоПодготовленных,
			РезультатФормированияЭД.КоличествоОтправленных,
			РезультатФормированияЭД.НемедленнаяОтправка);
	
	ТекстСостояния =
		НСтр("ru = 'Формирование документов 1С:Документооборот на основании входящих электронных документов.'");
	Состояние( , , ТекстСостояния);
	
	ПараметрыСозданияДОПоДаннымЭД = Новый Структура;
	ПараметрыСозданияДОПоДаннымЭД.Вставить("ВыдаватьСообщенияПоОшибкам", Истина);
	
	РезультатСозданияДокДО =
		ОбменСКонтрагентамиДОВызовСервера.СформироватьДокументыДОНаОснованииВходящихЭД(ПараметрыСозданияДОПоДаннымЭД);
	
	ТекстРезультатаСозданияДокДО =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияДокументовДОПоВходящимЭД(
			РезультатСозданияДокДО.КоличествоКСозданию,
			РезультатСозданияДокДО.КоличествоСоздано,
			РезультатСозданияДокДО.КоличествоСозданоСОшибками);
	
	ТекстСостояния = 
		ТекстРезультатаФормированияЭД +
		Символы.ПС + Символы.ПС +
		ТекстРезультатаСозданияДокДО;
	ПоказатьОповещениеПользователя(НСтр("ru = 'Завершено формирование документов ЭДО и 1С:Документооборот'"), , ТекстСостояния);
	
	Для Каждого Ошибка Из РезультатСозданияДокДО.Ошибки Цикл
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'При создании документа 1С:Документооборот по входящему ЭД %1 возникли проблемы:'"),
				Ошибка.ПредметОшибки)
				+ Символы.ПС
				+ Ошибка.Описание;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

#Область ВыполнениеДействийПоЭДО

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ, 
			КонтрагентыГотовыеКЭДО = Неопределено, 
			НаправлениеЭД, 
			ПроверятьПодписанДокумент = Истина, 
			УстановитьСостояниеПодписан = Ложь, 
			ВыводитьСообщение = Истина) Экспорт
	
	Если ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ, 
			КонтрагентыГотовыеКЭДО, 
			НаправлениеЭД, 
			ПроверятьПодписанДокумент, 
			УстановитьСостояниеПодписан, 
			ВыводитьСообщение) = Истина Тогда

		Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'");
		Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

// Ставит документы в очередь на отправку документов ЭДО и оповещает о изменении статуса ЭДО документов ДО
// 
// Параметры:
//  МассивДокументов - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо поставить в очередь на отправку
// 
// Возвращаемое значение:
//  Булево - Результат выполнения операции, истина, если операция завершилась успешно, Ложь - в противтом случае.
// 
Функция ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов) Экспорт
	
	РезультатПостановкиВОчередь =
		ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов);
	
	Если РезультатПостановкиВОчередь.ПоставленныеВОчередь.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы",
			РезультатПостановкиВОчередь.ПоставленныеВОчередь);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	КонецЕсли;
	
	Возврат РезультатПостановкиВОчередь.Успех;
	
КонецФункции

Процедура ПодписатьУтвердитьЭДНаСторонеПолучателя(ДокументДО, ОбработчикЗавершения = Неопределено) Экспорт
	
	ВходящийЭД = ОбменСКонтрагентамиДОВызовСервера.ЭлектронныйДокументДокументаДО(ДокументДО);
	
	Если Не ЗначениеЗаполнено(ВходящийЭД) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыВыполненияДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействий.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействий.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ВходящийЭД);
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ДокументДО", ДокументДО);
	ПараметрыЗавершения.Вставить("ЭлектронныйДокумент", ВходящийЭД);
	ПараметрыЗавершения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОбработчикЗавершенияОперации = Новый ОписаниеОповещения("ПодписатьУтвердитьЭДНаСторонеПолучателяЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		ОбработчикЗавершенияОперации,
		ПараметрыВыполненияДействий);
	
КонецПроцедуры

Процедура ОтклонитьДокументПоЭДО(ДокументДО, ОбработчикЗавершения) Экспорт
	
	ВходящийЭД = ОбменСКонтрагентамиДОВызовСервера.ЭлектронныйДокументДокументаДО(ДокументДО);
	
	Если Не ЗначениеЗаполнено(ВходящийЭД) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отклонить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыОкончания = Новый Структура;
	ПараметрыОкончания.Вставить("ДокументДО", ДокументДО);
	ПараметрыОкончания.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОбработкаОкончания = Новый ОписаниеОповещения("ОтклонитьДокументПоЭДОЗавершение", ЭтотОбъект, ПараметрыОкончания);
	
	ПараметрыДействий = Новый Структура;
	ПараметрыДействий.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВходящийЭД));
	ПараметрыДействий.Вставить("ОповещениеУспешногоЗавершения", ОбработкаОкончания);
	ПараметрыДействий.Вставить("НаборДействий", НаборДействий);
	ПараметрыДействий.Вставить("ОсновноеДействие",
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отклонить"));
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ПараметрыДействий);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ПараметрыВводаСтроки);
	
КонецПроцедуры

Процедура ОтклонитьДокументПоЭДОЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.ОбработанныеДокументы.Количество() <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Документы",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.ДокументДО));
	
	Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	
	Если Параметры.Свойство("ОбработчикЗавершения") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру принудительного закрытия обмена ЭДО документов ДО
// 
// Параметры:
//  ДокументыДО - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо закрыть принудительно
//  ОбработчикЗавершения - ОписаниеОповещения - Описание обработчика завершения операции
// 
Процедура ЗакрытьДокументыПринудительно(ДокументыДО, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Документы", ДокументыДО);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗакрытьДокументыПринудительноПослеВводаПричины",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ТекстПричины = "";
	ПоказатьВводСтроки(
		Обработчик,
		ТекстПричины,
		НСтр("ru = 'Укажите причину закрытия документов'"), ,
		Истина);
	
КонецПроцедуры

// Ставит документы в очередь приема документов ЭДО и опопвещает о изменении статусов ЭД
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД, которые необходимо
//                                                              поставить в очередь приема
// 
// Возвращаемое значение:
//  Булево - Результат выполнения операции, истина, если операция завершилась успешно, ложь - в противном случае
// 
Функция ПоставитьЭДВОчередьПриема(ЭД) Экспорт
	
	Результат = ОбменСКонтрагентамиДОВызовСервера.ПоставитьЭДВОчередьПриема(ЭД);
	
	Если Результат.ИзмененныеЭД.Количество() > 0
		ИЛИ Результат.ИзмененныеСообщенияЭДО.Количество() > 0 Тогда
		
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	Если Результат.ПоставленныеВОчередь.Количество() > 0 Тогда
		ТекстОповещения =
			СтрШаблон(НСтр("ru = 'В очередь приема сообщений ЭДО %1.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';поставлен %1 документ;;поставлены %1 документа;поставлено %1 документов;поставлено %1 документов'"),
					Результат.ПоставленныеВОчередь.Количество()));
	Иначе
		ТекстОповещения =
			НСтр("ru = 'В очередь не поставлено ни одного документа'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение очереди приема ЭДО'"), ,
		ТекстОповещения, ,
		?(Результат.ПоставленныеВОчередь.Количество() > 0,
			СтатусОповещенияПользователя.Информация,
			СтатусОповещенияПользователя.Важное));
	
	Для Каждого ОписаниеОшибки Из Результат.Ошибки Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЦикла;
	
	Возврат (Результат.Ошибки.Количество() = 0);
	
КонецФункции

// Вызывает процедуру принудительного закрытия ЭД
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД, которые необходимо
//                                                              закрыть принудительно
//  ОбработчикЗавершения - ОписаниеОповещения - Описание обработчика завершения операции
// 
Процедура ЗакрытьПринудительноЭД(ЭД, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭД", ЭД);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗакрытьПринудительноЭДПослеВводаПричины",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ТекстПричины = "";
	ПоказатьВводСтроки(
		Обработчик,
		ТекстПричины,
		НСтр("ru = 'Укажите причину закрытия документов'"), ,
		Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьДанныеСертификатовДляЭДО(Форма, ОбработчикЗавершения = Неопределено) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОбработчикПолученияОтпечатков = Новый ОписаниеОповещения("ЗаполнитьДанныеСертификатовДляЭДОПродолжение",
		ЭтотОбъект, ПараметрыОбработчика);
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(ОбработчикПолученияОтпечатков, Истина, Ложь);
	
КонецПроцедуры

Процедура ПроверитьНаличиеСертификатовЭДО(Форма, ОбработчикЗавершения = Неопределено, СообщатьОбОшибке = Истина) Экспорт
	
	Форма.ЕстьЭДО();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	Контекст.Вставить("СообщатьОбОшибке", СообщатьОбОшибке);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения(
		"ПроверитьНаличиеСертификатовЭДОПослеОбновленияСертификатов", ЭтотОбъект, Контекст);
	
	ЗаполнитьДанныеСертификатовДляЭДО(Форма, ОбработчикПродолжения);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументГотовКФормированиюЭД(
		Документ, 
		ВыводитьСообщение = Ложь, 
		КонтрагентыГотовыеКЭДО = Неопределено, 
		ПроверятьПодписанДокумент = Истина) Экспорт
	
	Возврат ОбменСКонтрагентамиДОВызовСервера.ДокументГотовКФормированиюЭД(
		Документ, 
		ВыводитьСообщение, 
		КонтрагентыГотовыеКЭДО, 
		ПроверятьПодписанДокумент);

КонецФункции

Процедура ПодписатьУтвердитьЭДНаСторонеПолучателяЗавершение(Результат, Параметры) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Документы",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.ДокументДО));
	
	Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	
	Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'");
	Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
	
	Если Параметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОЗаписи(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	Если Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОУдаленииЭП",
			ЭтотОбъект, Контекст);
	
	Если Форма.Объект.ПодписанЭП
		ИЛИ Форма.Файлы.НайтиСтроки(Новый Структура("ПодписанЭП", Истина)).Количество() > 0 Тогда
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Чтобы вернуть документ в режим редактирования, необходимо удалить электронные подписи документа и файлов.
						|Удалить электронные подписи?'"),
			РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВопросОПодготовкеДокументамККорректировкеПослеОтветаОУдаленииЭП(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	ОбменСКонтрагентамиДОВызовСервера.ПодготовитьДокументККорректировке(
		Форма.Объект.Ссылка, 
		Форма.Объект.Стороны[1].Сторона,
		ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий"),
		Истина,
		Форма.УникальныйИдентификатор);
			
	Форма.Прочитать();	
	Форма.ДокументПодписанНами = Ложь;
	
	Оповестить("ОбновитьДанныеФормыПослеПодготовкиДокументаККорректировке", Форма.Объект.Ссылка);
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросОтправкиПоЭДОЗавершение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			ПараметрыОбработчика.Объект.Ссылка, 
			ПараметрыОбработчика.КонтрагентыГотовыеКЭДО, 
			ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий"));
			
		ПараметрыОбработчика.ЭтаФорма.ПоказанВопросОбОтправкеПоЭДО = Истина;
		ПараметрыОбработчика.ЭтаФорма.Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыОбработчика.ЭтаФорма.ПоказанВопросОбОтправкеПоЭДО = Истина;
		ОбменСКонтрагентамиДОВызовСервера.УдалитьСостояниеДокументаЭДО(ПараметрыОбработчика.Объект.Ссылка);
		ПараметрыОбработчика.ЭтаФорма.Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры ЗакрытьДокументыПринудительно()
// 
Процедура ЗакрытьДокументыПринудительноПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для принудительного закрытия документов необходимо указать причину.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	РезультатЗакрытия = ОбменСКонтрагентамиДОВызовСервера.ЗакрытьДокументыПринудительно(
		ДополнительныеПараметры.Документы,
		Результат);
	
	Если РезультатЗакрытия.ЗакрытыеДокументы.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы",
			РезультатЗакрытия.ЗакрытыеДокументы);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЗакрытьПринудительноЭД()
// 
Процедура ЗакрытьПринудительноЭДПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для принудительного закрытия документов необходимо указать причину.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
		НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	
	ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы = ДополнительныеПараметры.ЭД;
	
	ПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
	ПараметрыДействия.Комментарий = Результат;
	
	ПараметрыВыполненияДействийЭДО.ДополнительныеПараметрыДействий.Вставить(
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"), ПараметрыДействия);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ЗакрытьПринудительноЭДПослеЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		ОбработчикЗавершения,
		ПараметрыВыполненияДействийЭДО);
	
КонецПроцедуры

Процедура ЗакрытьПринудительноЭДПослеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыВладельцы", ДополнительныеПараметры.ЭД);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("Ошибки", Новый Массив);
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСертификатовДляЭДОПродолжение(Отпечатки, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Для Каждого Строка Из Форма.СертификатыДляЭДО Цикл
		Строка.ДоступенНаКлиенте = Ложь;
	КонецЦикла;
	
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого Элемент Из Отпечатки Цикл
			
			Отпечаток = Элемент.Ключ;
			
			ОтборСертификата = Новый Структура("Отпечаток", Отпечаток);
			СтрокиСуществующие = Форма.СертификатыДляЭДО.НайтиСтроки(ОтборСертификата);
			
			Если СтрокиСуществующие.Количество() = 0 Тогда
				
				НоваяСтрока = Форма.СертификатыДляЭДО.Добавить();
				НоваяСтрока.Отпечаток = Отпечаток;
				НоваяСтрока.ДоступенНаКлиенте = Истина;
				
			Иначе
				
				Для Каждого СтрокаСуществующая Из СтрокиСуществующие Цикл
					СтрокаСуществующая.ДоступенНаКлиенте = Истина;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла
	КонецЕсли;
	
	Если Параметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеСертификатовЭДОПослеОбновленияСертификатов(Результат, Контекст) Экспорт
	
	Форма = Контекст.Форма;
	
	ДоступныеДляЭДООтпечатки = Новый Массив;
	
	Для Каждого СтрокаСертификата Из Форма.СертификатыДляЭДО Цикл
		Если СтрокаСертификата.ДоступенДляЭДО
			И (СтрокаСертификата.ДоступенНаКлиенте Или СтрокаСертификата.ДоступенНаСервере) Тогда
			
			ДоступныеДляЭДООтпечатки.Добавить(СтрокаСертификата.Отпечаток);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеДляЭДООтпечатки.Количество() = 0 И Контекст.СообщатьОбОшибке Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Невозможно выполнить действие по ЭДО, поскольку не обнаружено сертификатов электронной подписи
			|по которым разрешен обмен ЭДО. Проверьте наличие сертификата в хранилище личных сертификатов пользователя и
			|разрешенные к обмену сертификаты в настройках учетной записи ЭДО.'"));
	КонецЕсли;
	
	СертификатыПольозвателя =
		ОбменСКонтрагентамиДОВызовСервера.СертификатыПользователяПоОтпечаткам(ДоступныеДляЭДООтпечатки);
	
	Если СертификатыПольозвателя.Количество() = 0 И Контекст.СообщатьОбОшибке Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Невозможно выполнить действие по ЭДО, поскольку сертификаты для ЭДО недоступны пользователю 1С.
			|Укажите в карточке сертификата пользователя, либо выполните вход под пользователем, которому принадлежат сертификаты.'"));
	КонецЕсли;
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, СертификатыПольозвателя);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
