
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаДействийПоЭДО

Процедура НачатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеПолученияОтпечатков", ЭтотОбъект, Контекст);
	
	Если ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи()
		И (ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ПараметрыВыполнения.НаборДействий,
				ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"))
			ИЛИ ЭлектронныеДокументыЭДОКлиентСервер.ЕстьДействие(ПараметрыВыполнения.НаборДействий,
				ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"))) Тогда
		
		КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	Иначе
		ВыполнитьДействияПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОжидатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ДлительнаяОперация, КонтекстДиагностики = Неопределено) Экспорт
	
	ПраметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	//ПраметрыОжидания.Заголовок = НСтр("ru = 'Выполняются действия по ЭДО'");
	КонтекстОжиданияОперации = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПраметрыОжидания);
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		ОжиданиеОперацийБЭДКлиент.УстановитьОбработчикПрерывания(ОповещениеОЗавершении, КонтекстОжиданияОперации);
		ОжиданиеОперацийБЭДКлиент.ОтметитьНачалоВыполнения(КонтекстОжиданияОперации);
		ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжиданияОперации);
	КонецЕсли;
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	КонтекстДействийПоЭДО = НовыйКонтекстДействийПоЭДО();
	КонтекстДействийПоЭДО.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстДействийПоЭДО.КонтекстДиагностики = КонтекстДиагностики;
	КонтекстДействийПоЭДО.КонтекстОжиданияОперации = КонтекстОжиданияОперации;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатДействийПоЭДОПослеДлительнойОперации",
		ЭтотОбъект, КонтекстДействийПоЭДО);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокументов

Процедура НачатьОбработкуРезультатовЗагрузкиДокументов(ОповещениеОЗавершении, РезультатЗагрузки, ПаролиСертификатов = Неопределено, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПаролиСертификатов", ПаролиСертификатов);
	Контекст.Вставить("АдресКонтекстаНаСервере", "");
	Контекст.Вставить("КонтекстСобытияПослеЗагрузки");
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	Контекст.Вставить("ИтогДействийПоЭДО", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	
	ОбработатьРезультатЗагрузки(РезультатЗагрузки, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ЖурналДействий

// Открывает журнал действий по указанному электронному документу.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                    ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Ссылка на электронный документ.
Процедура ОткрытьЖурналДействийПоЭДО(ЭлектронныйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналДействийПоЭДО.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Подписи

Процедура ПроверитьПодписиДокумента(ОповещениеОЗавершении, ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = ЭлектронныеДокументыЭДОВызовСервера.ПроверитьПодписиДокумента(
		ЭлектронныйДокумент, КонтекстДиагностики);
	
	Если РезультатПроверки.Успех Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(РезультатПроверки.ПодписиДляПроверки) Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ПодписиДляПроверки = РезультатПроверки.ПодписиДляПроверки;
	ПараметрыПроверки.ОбработкаЗавершенияПроверки = Новый ОписаниеОповещения(
		"ПроверитьПодписиДокументаЗавершение", ЭтотОбъект, ОповещениеОЗавершении);
	ПараметрыПроверки.ОбработкаПроверкиПодписи = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиПодписиДокумента", ЭтотОбъект, ПараметрыПроверки);
	ПараметрыПроверки.ОперацияМенеджераКриптографии = "ПроверкаПодписи";
	ПараметрыПроверки.КонтекстДиагностики = КонтекстДиагностики;
	
	ПроверитьПодписи(ПараметрыПроверки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДействийПоЭДО

Функция НовыйКонтекстДействийПоЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("Итог", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	Контекст.Вставить("ОповещениеОЗавершении");
	Контекст.Вставить("КонтекстДиагностики");
	Контекст.Вставить("КонтекстОжиданияОперации");
	Контекст.Вставить("ПаролиСертификатов");
	Возврат Контекст;
КонецФункции

Процедура ВыполнитьДействияПоЭДОПослеПолученияОтпечатков(ОтпечаткиСертификатов, Контекст) Экспорт
	
	Контекст.ПараметрыВыполнения.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	
	ВыполнитьДействияПоЭДО(Контекст.ОповещениеОЗавершении, Контекст.ПараметрыВыполнения, Контекст.КонтекстДиагностики);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоЭДО(ОповещениеОЗавершении, ПараметрыВыполнения, КонтекстДиагностики = Неопределено)
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ВыполнитьДействияПоЭДОВФоне(
		ПараметрыВыполнения, КонтекстДиагностики);
	
	ОжидатьВыполнениеДействийПоЭДО(ОповещениеОЗавершении, ДлительнаяОперация, КонтекстДиагностики);
	
КонецПроцедуры

Процедура ОбработатьРезультатДействийПоЭДОПослеДлительнойОперации(ДлительнаяОперация, КонтекстДействийПоЭДО) Экспорт
	
	АдресРезультата = АдресРезультатаДействийПоЭДО(ДлительнаяОперация, КонтекстДействийПоЭДО);
	Если ПустаяСтрока(АдресРезультата) Тогда
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
		Возврат;
	КонецЕсли;
	
	РезультатДействийПоЭДО = ЭлектронныеДокументыЭДОВызовСервера.РезультатДействийПоЭДО(АдресРезультата);
	
	ОбработатьРезультатДействийПоЭДО(РезультатДействийПоЭДО, КонтекстДействийПоЭДО);
	
КонецПроцедуры

Функция АдресРезультатаДействийПоЭДО(ДлительнаяОперация, КонтекстДействийПоЭДО) Экспорт
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДействийПоЭДО.КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ОбменСКонтрагентами);
		Возврат "";
	КонецЕсли;
	
	Возврат ДлительнаяОперация.АдресРезультата;
	
КонецФункции

Процедура ОбработатьРезультатДействийПоЭДО(РезультатДействийПоЭДО, КонтекстДействийПоЭДО)
	
	КонтекстДействийПоЭДО.Итог = РезультатДействийПоЭДО.Итог;
	КонтекстДействийПоЭДО.КонтекстДиагностики = РезультатДействийПоЭДО.КонтекстДиагностики;
	
	Если ЗначениеЗаполнено(РезультатДействийПоЭДО.КонтекстПодписания) Тогда
		
		ПараметрыПодписания = ПараметрыПодписания(РезультатДействийПоЭДО, КонтекстДействийПоЭДО);
		
		Подисать(ПараметрыПодписания);
		
	ИначеЕсли ЗначениеЗаполнено(РезультатДействийПоЭДО.КонтекстОтправки) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатОтправки", ЭтотОбъект, КонтекстДействийПоЭДО);
		ДополнительныеПараметры = Новый Структура("ИтогДействийПоЭДО",
			ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
		
		СинхронизацияЭДОКлиент.ОтправитьОбъекты(Оповещение, РезультатДействийПоЭДО.КонтекстОтправки,
			РезультатДействийПоЭДО.КонтекстДиагностики, КонтекстДействийПоЭДО.ПаролиСертификатов, ДополнительныеПараметры);
		
	Иначе
		
		ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО, РезультатДействийПоЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПодписания(РезультатДействийПоЭДО, КонтекстДействийПоЭДО)
	Параметры = Новый Структура;
	Параметры.Вставить("ИндексНабораДанных", 0);
	Параметры.Вставить("ДанныеДляПодписания", РезультатДействийПоЭДО.КонтекстПодписания.ДанныеДляПодписания);
	Параметры.Вставить("ПодписанныеСообщения", Новый Массив);
	Параметры.Вставить("КонтекстПодписания", РезультатДействийПоЭДО.КонтекстПодписания);
	Параметры.Вставить("КонтекстДиагностики", РезультатДействийПоЭДО.КонтекстДиагностики);
	Параметры.Вставить("КонтекстДействийПоЭДО", КонтекстДействийПоЭДО);
	Возврат Параметры;
КонецФункции

Процедура Подисать(ПараметрыПодписания)
	
	ОписаниеНабораДанных = ПараметрыПодписания.ДанныеДляПодписания[ПараметрыПодписания.ИндексНабораДанных];
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",      НСтр("ru = 'Документ'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении",  Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий",  Ложь);
	ОписаниеДанных.Вставить("КонтекстОперации",     Неопределено);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	ОписаниеДанных.Вставить("БезПодтверждения",     Истина);
	ОписаниеДанных.Вставить("ОтборСертификатов",    ОписаниеНабораДанных.Сертификаты);
	ОписаниеДанных.Вставить("НаборДанных",          ОписаниеНабораДанных.НаборДанных);
	
	Если ОписаниеНабораДанных.ТребуетсяЗаполнитьПодписантов Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодписантовПослеВыбораСертификата",
			ЭтотОбъект, ПараметрыПодписания);
		Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
			Если ДанныеСообщения.ТребуетсяЗаполнитьПодписанта Тогда
				ДанныеСообщения.Данные = Оповещение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоДанных = ОписаниеНабораДанных.НаборДанных.Количество();
	Если КоличествоДанных = 1 Тогда
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронного документа'"));
	Иначе
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронных документов'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			СтрШаблон(НСтр("ru = 'Электронные документы (%1)'"), КоличествоДанных));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПодписания", ЭтотОбъект, ПараметрыПодписания);
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, ПараметрыПодписания.КонтекстДиагностики,, Оповещение,
		ПараметрыПодписания.КонтекстДействийПоЭДО.ПаролиСертификатов);
	
КонецПроцедуры

Процедура ЗаполнитьПодписантовПослеВыбораСертификата(Результат, ПараметрыПодписания) Экспорт
	
	ОписаниеНабораДанных = ПараметрыПодписания.ДанныеДляПодписания[ПараметрыПодписания.ИндексНабораДанных];
	
	ПрисоединенныеФайлыМассив = Новый Массив;
	
	Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
		
		Если ДанныеСообщения.ТребуетсяЗаполнитьПодписанта Тогда
			ПрисоединенныеФайлыМассив.Добавить(ДанныеСообщения.ПрисоединенныйФайл);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатыПоФайлам = ЭлектронныеДокументыЭДОВызовСервера.ЗаполнитьПодписантовПоСертификату(ПрисоединенныеФайлыМассив,
		Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка, ПараметрыПодписания.КонтекстДиагностики);
	
	ДанныеДляПодписания = Неопределено;
	ИндексыДляУдаления = Новый Массив;
	ИндексДанных = 0;
	
	Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
		
		РезультатЗаполнения = РезультатыПоФайлам[ДанныеСообщения.ПрисоединенныйФайл];
		Если РезультатЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатЗаполнения.Отказ Тогда
			ИндексыДляУдаления.Добавить(ИндексДанных);
			Продолжить;
		КонецЕсли;
		
		ДанныеСообщения.Данные = РезультатЗаполнения.ДанныеДляПодписания;
		ДанныеСообщения.АдресДанныхДляОбновления = РезультатЗаполнения.АдресДанныхДляОбновления;
		ДанныеСообщения.ДанныеИзменены = Истина;
		Если ДанныеДляПодписания = Неопределено Тогда
			ДанныеДляПодписания = РезультатЗаполнения.ДанныеДляПодписания;
		КонецЕсли;
		
		ИндексДанных = ИндексДанных + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИндексыДляУдаления) Тогда
		Для Каждого ИндексДанных Из ИндексыДляУдаления Цикл
			ОписаниеНабораДанных.НаборДанных.Удалить(ИндексДанных);
		КонецЦикла;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура("Данные", ДанныеДляПодписания);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, ОписаниеДанных);
	
КонецПроцедуры

Процедура ОбработатьРезультатПодписания(РезультатПодписания, ПараметрыПодписания) Экспорт
	
	Если РезультатПодписания.Отказ Тогда
		ВыполнитьДействияПоЭДОПослеПодписания(ПараметрыПодписания);
		Возврат;
	КонецЕсли;
	
	Если РезультатПодписания.Успех Тогда
		Для Каждого ДанныеСообщения Из РезультатПодписания.НаборДанных Цикл
			Если Не ДанныеСообщения.Свойство("СвойстваПодписи") Тогда
				Продолжить;
			КонецЕсли;
			ДанныеПодписанногоСообщения = НовоеОписаниеПодписанногоСообщения();
			ДанныеПодписанногоСообщения.Ссылка = ДанныеСообщения.Представление.Значение;
			ДанныеПодписанногоСообщения.ПрисоединенныйФайл = ДанныеСообщения.ПрисоединенныйФайл;
			ДанныеПодписанногоСообщения.СвойстваПодписи = ДанныеСообщения.СвойстваПодписи;
			ДанныеПодписанногоСообщения.ВыбранныйСертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
			ДанныеПодписанногоСообщения.АдресДанныхДляОбновления = ДанныеСообщения.АдресДанныхДляОбновления;
			ПараметрыПодписания.ПодписанныеСообщения.Добавить(ДанныеПодписанногоСообщения);
		КонецЦикла;
		
		ПараметрыПодписания.КонтекстДействийПоЭДО.ПаролиСертификатов = РезультатПодписания.ПаролиСертификатов;
	КонецЕсли;
	
	Если ПараметрыПодписания.ИндексНабораДанных < ПараметрыПодписания.ДанныеДляПодписания.Количество() - 1 Тогда
		ПараметрыПодписания.ИндексНабораДанных = ПараметрыПодписания.ИндексНабораДанных + 1;
		Подисать(ПараметрыПодписания);
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействияПоЭДОПослеПодписания(ПараметрыПодписания);
	
КонецПроцедуры

Функция НовоеОписаниеПодписанногоСообщения()
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Ссылка");
	ОписаниеДанных.Вставить("ПрисоединенныйФайл");
	ОписаниеДанных.Вставить("СвойстваПодписи");
	ОписаниеДанных.Вставить("ВыбранныйСертификат");
	ОписаниеДанных.Вставить("АдресДанныхДляОбновления");
	Возврат ОписаниеДанных;
КонецФункции

Процедура ВыполнитьДействияПоЭДОПослеПодписания(ПараметрыПодписания)
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ВыполнитьДействияПоЭДОПослеПодписания(
		ПараметрыПодписания.ПодписанныеСообщения,
		ПараметрыПодписания.КонтекстПодписания.АдресКонтекстаНаСервере,
		ПараметрыПодписания.КонтекстДиагностики);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатДействийПоЭДОПослеДлительнойОперации",
		ЭтотОбъект, ПараметрыПодписания.КонтекстДействийПоЭДО);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправки(РезультатОтправки, КонтекстДействийПоЭДО) Экспорт
	
	КонтекстДействийПоЭДО.КонтекстДиагностики = РезультатОтправки.КонтекстДиагностики;
	
	ИтогДействийПоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОтправки.ДополнительныеПараметры,
		"ИтогДействийПоЭДО");
	Если ЗначениеЗаполнено(ИтогДействийПоЭДО) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.Итог.ОбработанныеДокументы,
			ИтогДействийПоЭДО.ОбработанныеДокументы, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстДействийПоЭДО.Итог.ОбработаноПоДействиям,
			ИтогДействийПоЭДО.ОбработаноПоДействиям, Истина);
	КонецЕсли;
	
	ЗавершитьВыполнениеДействийПоЭДО(КонтекстДействийПоЭДО);
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеДействийПоЭДО(Контекст, РезультатДействийПоЭДО = Неопределено)
	
	Если Контекст.КонтекстОжиданияОперации <> Неопределено Тогда
		ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(Контекст.КонтекстОжиданияОперации);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Итог", Контекст.Итог);
	Результат.Вставить("ОшибкиФормирования", Новый Массив);
	Результат.Вставить("КонтекстДиагностики", Контекст.КонтекстДиагностики);
	
	Если РезультатДействийПоЭДО <> Неопределено
		И ЗначениеЗаполнено(РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
		Результат.ОшибкиФормирования = РезультатДействийПоЭДО.ОшибкиФормирования;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокументов

Процедура ОбработатьРезультатЗагрузкиПослеДлительнойОперации(ДлительнаяОперация, Контекст) Экспорт
	
	Если ДлительнаяОперация.Статус = Неопределено Тогда
		ЗавершитьОбработкуРезультатовЗагрузки(Контекст);
		Возврат;
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Контекст.КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ОбменСКонтрагентами);
		ЗавершитьОбработкуРезультатовЗагрузки(Контекст);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ЭлектронныеДокументыЭДОВызовСервера.РезультатЗагрузкиДанныхОбъектовКонтейнеров(
		ДлительнаяОперация.АдресРезультата);
	
	ОбработатьРезультатЗагрузки(РезультатЗагрузки, Контекст);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗагрузки(РезультатЗагрузки, Контекст) Экспорт
	
	Контекст.АдресКонтекстаНаСервере = РезультатЗагрузки.АдресКонтекстаНаСервере;
	Контекст.КонтекстСобытияПослеЗагрузки = РезультатЗагрузки.КонтекстСобытияПослеЗагрузки;
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.ПодписиДляПроверки) Тогда
		
		ПараметрыПроверки = НовыеПараметрыПроверкиПодписей();
		ПараметрыПроверки.ПодписиДляПроверки = РезультатЗагрузки.ПодписиДляПроверки;
		ПараметрыПроверки.ОбработкаЗавершенияПроверки = Новый ОписаниеОповещения(
			"ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей", ЭтотОбъект, Контекст);
		ПараметрыПроверки.ОбработкаПроверкиПодписи = Новый ОписаниеОповещения(
			"ОбработатьРезультатПроверкиПодписиПриЗагрузкиДокументов", ЭтотОбъект, ПараметрыПроверки);
		ПараметрыПроверки.КонтекстДиагностики = РезультатЗагрузки.КонтекстДиагностики;
		ПараметрыПроверки.ОперацияМенеджераКриптографии = "ПолучениеСертификатов";
		ПроверитьПодписи(ПараметрыПроверки);
		
	ИначеЕсли ЗначениеЗаполнено(РезультатЗагрузки.РезультатДействийПоЭДО) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПослеВыполненияДействийПоЭДО",
			ЭтотОбъект, Контекст);
		
		КонтекстДействий = НовыйКонтекстДействийПоЭДО();
		КонтекстДействий.ОповещениеОЗавершении = Оповещение;
		КонтекстДействий.КонтекстДиагностики = РезультатЗагрузки.КонтекстДиагностики;
		КонтекстДействий.ПаролиСертификатов = Контекст.ПаролиСертификатов;
		
		ОбработатьРезультатДействийПоЭДО(РезультатЗагрузки.РезультатДействийПоЭДО, КонтекстДействий);
		
	Иначе
		
		ВыполнитьОбработчикПослеЗагрузкиНовыхДокументов(Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиПодписиПриЗагрузкиДокументов(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	
	СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
	СвойстваПодписи.Подпись = ТекущиеДанные.ДвоичныеДанныеПодписи;
	
	ПроверенныеПодписи = ПараметрыПроверки.ПроверенныеПодписи[ТекущиеДанные.ИдентификаторДанныхДокумента];
	Если ПроверенныеПодписи = Неопределено Тогда
		ПроверенныеПодписи = Новый Структура;
		ПроверенныеПодписи.Вставить("ПодписиОсновныхДанных", Новый Массив);
		ПроверенныеПодписи.Вставить("ПодписиДополнительныхДанных", Новый Массив);
		ПараметрыПроверки.ПроверенныеПодписи.Вставить(ТекущиеДанные.ИдентификаторДанныхДокумента,
			ПроверенныеПодписи);
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоОсновныеДанные Тогда
		ПроверенныеПодписи.ПодписиОсновныхДанных.Добавить(СвойстваПодписи);
	Иначе
		ПроверенныеПодписи.ПодписиДополнительныхДанных.Добавить(СвойстваПодписи);
	КонецЕсли;
	
	ПараметрыПроверки.Индекс = ПараметрыПроверки.Индекс + 1;
	
	Если ПараметрыПроверки.ПодписиДляПроверки.Количество() > ПараметрыПроверки.Индекс Тогда
		ПроверитьПодписи(ПараметрыПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, ПараметрыПроверки.ПроверенныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(ПроверенныеПодписи, Контекст) Экспорт
	
	ДлительнаяОперация = ЭлектронныеДокументыЭДОВызовСервера.ЗагрузитьДанныеОбъектовКонтейнеровПослеПроверкиПодписей(
		ПроверенныеПодписи, Контекст.АдресКонтекстаНаСервере, Контекст.КонтекстДиагностики);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПослеДлительнойОперации",
		ЭтотОбъект, Контекст);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗагрузкиПослеВыполненияДействийПоЭДО(Результат, Контекст) Экспорт
	
	Контекст.ИтогДействийПоЭДО = Результат.Итог;
	Контекст.КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	ВыполнитьОбработчикПослеЗагрузкиНовыхДокументов(Контекст);
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПослеЗагрузкиНовыхДокументов(Контекст)
	
	СтандартнаяОбработка = Истина;
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПослеОбработкиСобытия", ЭтотОбъект, Контекст);
	ЭлектронныеДокументыЭДОСобытияКлиент.ПослеЗагрузкиНовыхДокументов(Оповещение,
		Контекст.КонтекстСобытияПослеЗагрузки, Контекст.КонтекстДиагностики, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатЗагрузкиПослеОбработкиСобытия(Результат, Контекст) Экспорт
	
	ЗавершитьОбработкуРезультатовЗагрузки(Контекст);
	
КонецПроцедуры

Процедура ЗавершитьОбработкуРезультатовЗагрузки(Контекст)
	
	Результат = Новый Структура;
	Результат.Вставить("Итог", Контекст.ИтогДействийПоЭДО);
	Результат.Вставить("КонтекстДиагностики", Контекст.КонтекстДиагностики);
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Подписи

Функция НовыеПараметрыПроверкиПодписей()
	Параметры = Новый Структура;
	Параметры.Вставить("Индекс", 0);
	Параметры.Вставить("ОбработкаЗавершенияПроверки", Новый ОписаниеОповещения);
	Параметры.Вставить("ОбработкаПроверкиПодписи", Новый ОписаниеОповещения);
	Параметры.Вставить("ПодписиДляПроверки", Новый Массив);
	Параметры.Вставить("МенеджерКриптографии", Неопределено);
	Параметры.Вставить("ОперацияМенеджераКриптографии", "");
	Параметры.Вставить("КонтекстДиагностики", Неопределено);
	Параметры.Вставить("ПроверенныеПодписи", Новый Соответствие);
	Возврат Параметры;
КонецФункции

Процедура ПроверитьПодписи(ПараметрыПроверки) Экспорт
	
	СоздатьМенеджерКриптографии(ПараметрыПроверки.МенеджерКриптографии, ПараметрыПроверки);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографии(МенеджерКриптографии, ПараметрыПроверки) Экспорт
	
	Если МенеджерКриптографии = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии", ЭтотОбъект, ПараметрыПроверки);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение,
			ПараметрыПроверки.ОперацияМенеджераКриптографии, Ложь);
		Возврат;
	ИначеЕсли ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки);
		Возврат;
	ИначеЕсли ПараметрыПроверки.МенеджерКриптографии = Неопределено Тогда 
		ПараметрыПроверки.МенеджерКриптографии = МенеджерКриптографии;
	КонецЕсли;
	
	ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПроверитьПодписиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ПараметрыПроверки)
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	КриптографияБЭДКлиент.ПроверитьПодпись(ПараметрыПроверки.ОбработкаПроверкиПодписи, ТекущиеДанные.ДвоичныеДанныеФайла,
		ТекущиеДанные.ДвоичныеДанныеПодписи, ПараметрыПроверки.КонтекстДиагностики, МенеджерКриптографии);
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиПодписиДокумента(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	
	СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
	СвойстваПодписи.Подпись = ТекущиеДанные.ДвоичныеДанныеПодписи;
	
	ПроверенныеПодписи = ПараметрыПроверки.ПроверенныеПодписи[ТекущиеДанные.ПрисоединенныйФайл];
	Если ПроверенныеПодписи = Неопределено Тогда
		ПроверенныеПодписи = Новый Массив;
		ПараметрыПроверки.ПроверенныеПодписи.Вставить(ТекущиеДанные.ПрисоединенныйФайл, ПроверенныеПодписи);
	КонецЕсли;
	ПроверенныеПодписи.Добавить(СвойстваПодписи);
	
	ПараметрыПроверки.Индекс = ПараметрыПроверки.Индекс + 1;
	
	Если ПараметрыПроверки.ПодписиДляПроверки.Количество() > ПараметрыПроверки.Индекс Тогда
		ПроверитьПодписи(ПараметрыПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, ПараметрыПроверки.ПроверенныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписиДокументаЗавершение(ПроверенныеПодписи, ОповещениеОЗавершении) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверенныеПодписи) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	КонецЕсли;
	
	РезультатЗаписи = ЭлектронныеДокументыЭДОВызовСервера.ЗаписатьРезультатПроверкиПодписейДокумента(ПроверенныеПодписи);
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатЗаписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти